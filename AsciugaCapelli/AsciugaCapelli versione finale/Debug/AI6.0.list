
AI6.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009b4c  0800b9a0  0800b9a0  0001b9a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154ec  080154ec  00030870  2**0
                  CONTENTS
  4 .ARM          00000008  080154ec  080154ec  000254ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154f4  080154f4  00030870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154f4  080154f4  000254f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154f8  080154f8  000254f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000870  20000000  080154fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030870  2**0
                  CONTENTS
 10 .bss          00023f14  20000870  20000870  00030870  2**2
                  ALLOC
 11 ._user_heap_stack 00001204  20024784  20024784  00030870  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030870  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce6c  00000000  00000000  000308a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fa4  00000000  00000000  0004d70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  000516b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  000528b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cbc8  00000000  00000000  000539b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e0d  00000000  00000000  00080578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106568  00000000  00000000  00099385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000140  00000000  00000000  0019f8ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aec  00000000  00000000  0019fa30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000352f  00000000  00000000  001a551c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000870 	.word	0x20000870
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b96c 	.word	0x0800b96c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000874 	.word	0x20000874
 80001fc:	0800b96c 	.word	0x0800b96c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_CRC_Init+0x20>)
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <MX_CRC_Init+0x24>)
 8000ee4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_CRC_Init+0x20>)
 8000ee8:	f001 ff31 	bl	8002d4e <HAL_CRC_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ef2:	f001 fa05 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000088c 	.word	0x2000088c
 8000f00:	40023000 	.word	0x40023000

08000f04 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_CRC_MspInit+0x3c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10d      	bne.n	8000f32 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_CRC_MspInit+0x40>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <HAL_CRC_MspInit+0x40>)
 8000f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <HAL_CRC_MspInit+0x40>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023000 	.word	0x40023000
 8000f44:	40023800 	.word	0x40023800

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2010      	movs	r0, #16
 8000f70:	f001 feb7 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f74:	2010      	movs	r0, #16
 8000f76:	f001 fed0 	bl	8002d1a <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a3e      	ldr	r2, [pc, #248]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a37      	ldr	r2, [pc, #220]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a30      	ldr	r2, [pc, #192]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_GPIO_Init+0x150>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2104      	movs	r1, #4
 800104a:	4824      	ldr	r0, [pc, #144]	; (80010dc <MX_GPIO_Init+0x154>)
 800104c:	f002 fbc4 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001056:	4822      	ldr	r0, [pc, #136]	; (80010e0 <MX_GPIO_Init+0x158>)
 8001058:	f002 fbbe 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG4 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800105c:	2318      	movs	r3, #24
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001060:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <MX_GPIO_Init+0x154>)
 8001072:	f002 fa05 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001076:	2304      	movs	r3, #4
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <MX_GPIO_Init+0x154>)
 800108e:	f002 f9f7 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_GPIO_Init+0x158>)
 80010ac:	f002 f9e8 	bl	8003480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2009      	movs	r0, #9
 80010b6:	f001 fe14 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010ba:	2009      	movs	r0, #9
 80010bc:	f001 fe2d 	bl	8002d1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	200a      	movs	r0, #10
 80010c6:	f001 fe0c 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010ca:	200a      	movs	r0, #10
 80010cc:	f001 fe25 	bl	8002d1a <HAL_NVIC_EnableIRQ>

}
 80010d0:	bf00      	nop
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <uprintf>:
float Vetty[DIM];
float Vettz[DIM];
volatile uint8_t flag_elapsed = 0;


void uprintf(char* str){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*)str, strlen(str), 100);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f887 	bl	8000200 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <uprintf+0x24>)
 80010fc:	f004 fafd 	bl	80056fa <HAL_UART_Transmit>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20024604 	.word	0x20024604

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	f5ad 4d3d 	sub.w	sp, sp, #48384	; 0xbd00
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

		spiSndX[0]=0x29|0x80;
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <main+0xb0>)
 8001118:	22a9      	movs	r2, #169	; 0xa9
 800111a:	701a      	strb	r2, [r3, #0]
	    spiSndY[0]=0x2B|0x80;
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <main+0xb4>)
 800111e:	22ab      	movs	r2, #171	; 0xab
 8001120:	701a      	strb	r2, [r3, #0]
		spiSndZ[0]=0x2D|0x80;
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <main+0xb8>)
 8001124:	22ad      	movs	r2, #173	; 0xad
 8001126:	701a      	strb	r2, [r3, #0]
		spiSndXLSB[0]=0x28|0x80;
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <main+0xbc>)
 800112a:	22a8      	movs	r2, #168	; 0xa8
 800112c:	701a      	strb	r2, [r3, #0]
		spiSndYLSB[0]=0x2A|0x80;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <main+0xc0>)
 8001130:	22aa      	movs	r2, #170	; 0xaa
 8001132:	701a      	strb	r2, [r3, #0]
		spiSndZLSB[0]=0x2C|0x80;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <main+0xc4>)
 8001136:	22ac      	movs	r2, #172	; 0xac
 8001138:	701a      	strb	r2, [r3, #0]
		uint16_t x[DIM];
		uint16_t y[DIM];
		uint16_t z[DIM];
		int16_t k=0;
 800113a:	2300      	movs	r3, #0
 800113c:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 8001140:	f102 02fe 	add.w	r2, r2, #254	; 0xfe
 8001144:	8013      	strh	r3, [r2, #0]
		float acc;
		float typ=0.488;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <main+0xc8>)
 8001148:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 800114c:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8001150:	6013      	str	r3, [r2, #0]
		int i=0;
 8001152:	2300      	movs	r3, #0
 8001154:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001158:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800115c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f001 fc73 	bl	8002a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f001 f85b 	bl	800221c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f7ff ff0f 	bl	8000f88 <MX_GPIO_Init>
  MX_DMA_Init();
 800116a:	f7ff feed 	bl	8000f48 <MX_DMA_Init>
  MX_SPI1_Init();
 800116e:	f001 f8cd 	bl	800230c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001172:	f001 fb3d 	bl	80027f0 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8001176:	f001 fb11 	bl	800279c <MX_UART5_Init>
  MX_TIM2_Init();
 800117a:	f001 fa9b 	bl	80026b4 <MX_TIM2_Init>
  MX_CRC_Init();
 800117e:	f7ff fead 	bl	8000edc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart5);
 8001182:	4815      	ldr	r0, [pc, #84]	; (80011d8 <main+0xcc>)
 8001184:	f001 fb5e 	bl	8002844 <HAL_UART_MspInit>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2104      	movs	r1, #4
 800118c:	4813      	ldr	r0, [pc, #76]	; (80011dc <main+0xd0>)
 800118e:	f002 fb23 	bl	80037d8 <HAL_GPIO_WritePin>
  spiSnd[0]=0x10;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <main+0xd4>)
 8001194:	2210      	movs	r2, #16
 8001196:	701a      	strb	r2, [r3, #0]
  spiSnd[1]=0xA4;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <main+0xd4>)
 800119a:	22a4      	movs	r2, #164	; 0xa4
 800119c:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit(&hspi1, spiSnd, 2, 100);
 800119e:	2364      	movs	r3, #100	; 0x64
 80011a0:	2202      	movs	r2, #2
 80011a2:	490f      	ldr	r1, [pc, #60]	; (80011e0 <main+0xd4>)
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <main+0xd8>)
 80011a6:	f003 f892 	bl	80042ce <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2104      	movs	r1, #4
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <main+0xd0>)
 80011b0:	f002 fb12 	bl	80037d8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim2);
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <main+0xdc>)
 80011b6:	f003 fdf9 	bl	8004dac <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (i<DIM)
 80011ba:	e1cd      	b.n	8001558 <main+0x44c>
 80011bc:	2000c98c 	.word	0x2000c98c
 80011c0:	2000c990 	.word	0x2000c990
 80011c4:	2000c994 	.word	0x2000c994
 80011c8:	2000c998 	.word	0x2000c998
 80011cc:	2000c99c 	.word	0x2000c99c
 80011d0:	2000c9a0 	.word	0x2000c9a0
 80011d4:	3ef9db23 	.word	0x3ef9db23
 80011d8:	20024604 	.word	0x20024604
 80011dc:	40021800 	.word	0x40021800
 80011e0:	2000c9a8 	.word	0x2000c9a8
 80011e4:	20024560 	.word	0x20024560
 80011e8:	200245bc 	.word	0x200245bc
   {
 	 if((flag_elapsed=1))											//La funzione di interrupt abilita il flag per ogni n conteggi selezionati
 80011ec:	4bcb      	ldr	r3, [pc, #812]	; (800151c <main+0x410>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
 	 {
 		 flag_elapsed=0;										//flag=0 in modo che non rientro ma aspetto che sia l'interrupt ad alzarlo
 80011f2:	4bca      	ldr	r3, [pc, #808]	; (800151c <main+0x410>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]

 		//Asse X
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito SPI1
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	48c8      	ldr	r0, [pc, #800]	; (8001520 <main+0x414>)
 80011fe:	f002 faeb 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndX, 1, 100);				//Trasmetto Indirizzo dove leggere istruzione
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	2201      	movs	r2, #1
 8001206:	49c7      	ldr	r1, [pc, #796]	; (8001524 <main+0x418>)
 8001208:	48c7      	ldr	r0, [pc, #796]	; (8001528 <main+0x41c>)
 800120a:	f003 f860 	bl	80042ce <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);			//Ricevo Risultato di misura MSB (8bit)
 800120e:	2364      	movs	r3, #100	; 0x64
 8001210:	2201      	movs	r2, #1
 8001212:	49c6      	ldr	r1, [pc, #792]	; (800152c <main+0x420>)
 8001214:	48c4      	ldr	r0, [pc, #784]	; (8001528 <main+0x41c>)
 8001216:	f003 f996 	bl	8004546 <HAL_SPI_Receive>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 800121a:	2201      	movs	r2, #1
 800121c:	2104      	movs	r1, #4
 800121e:	48c0      	ldr	r0, [pc, #768]	; (8001520 <main+0x414>)
 8001220:	f002 fada 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito la comunicazione SPI1 (NON POSSO FARE PIU OPERAZIONI CON UN'UNICA ATTIVAZIONE)
 8001224:	2200      	movs	r2, #0
 8001226:	2104      	movs	r1, #4
 8001228:	48bd      	ldr	r0, [pc, #756]	; (8001520 <main+0x414>)
 800122a:	f002 fad5 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndXLSB, 1, 100);			//Trasmetto Indirizzo dove leggere istruzione
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	2201      	movs	r2, #1
 8001232:	49bf      	ldr	r1, [pc, #764]	; (8001530 <main+0x424>)
 8001234:	48bc      	ldr	r0, [pc, #752]	; (8001528 <main+0x41c>)
 8001236:	f003 f84a 	bl	80042ce <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);			//Ricevo Risultato di misura LSB (8bit)
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	2201      	movs	r2, #1
 800123e:	49bd      	ldr	r1, [pc, #756]	; (8001534 <main+0x428>)
 8001240:	48b9      	ldr	r0, [pc, #740]	; (8001528 <main+0x41c>)
 8001242:	f003 f980 	bl	8004546 <HAL_SPI_Receive>
 		x[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];				//Unisco MSB e LSB attraverso un'operazione di shift su 16bit
 8001246:	4bb9      	ldr	r3, [pc, #740]	; (800152c <main+0x420>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	4bb7      	ldr	r3, [pc, #732]	; (800152c <main+0x420>)
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21b      	sxth	r3, r3
 8001258:	b299      	uxth	r1, r3
 800125a:	f507 430d 	add.w	r3, r7, #36096	; 0x8d00
 800125e:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001262:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 8001266:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800126a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 8001274:	2201      	movs	r2, #1
 8001276:	2104      	movs	r1, #4
 8001278:	48a9      	ldr	r0, [pc, #676]	; (8001520 <main+0x414>)
 800127a:	f002 faad 	bl	80037d8 <HAL_GPIO_WritePin>
 		k=(int16_t)x[i];										//Casting da uint a int (abilitazione del segno, complemento)
 800127e:	f507 430d 	add.w	r3, r7, #36096	; 0x8d00
 8001282:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001286:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 800128a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800128e:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001298:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 800129c:	f102 02fe 	add.w	r2, r2, #254	; 0xfe
 80012a0:	8013      	strh	r3, [r2, #0]
 		acc=(k*typ)/1000;										//Da datasheet, il dato letto, lo converto in scala g attraverso questo calcolo
 80012a2:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80012a6:	f103 03fe 	add.w	r3, r3, #254	; 0xfe
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b6:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80012ba:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c6:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8001538 <main+0x42c>
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80012d2:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 80012d6:	edc3 7a00 	vstr	s15, [r3]
 		Vettx[i]=acc;											//Aggiungo la misura al vettore delle letture
 80012da:	4a98      	ldr	r2, [pc, #608]	; (800153c <main+0x430>)
 80012dc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80012e0:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 80012ee:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	601a      	str	r2, [r3, #0]
 		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo


 		spiRcv[0]=0;
 80012f6:	4b8d      	ldr	r3, [pc, #564]	; (800152c <main+0x420>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 		spiRcv[1]=0;
 80012fc:	4b8b      	ldr	r3, [pc, #556]	; (800152c <main+0x420>)
 80012fe:	2200      	movs	r2, #0
 8001300:	705a      	strb	r2, [r3, #1]
 		//Asse Y
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito SPI1
 8001302:	2200      	movs	r2, #0
 8001304:	2104      	movs	r1, #4
 8001306:	4886      	ldr	r0, [pc, #536]	; (8001520 <main+0x414>)
 8001308:	f002 fa66 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndY, 1, 100);				//Trasmetto Indirizzo dove leggere istruzione
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	2201      	movs	r2, #1
 8001310:	498b      	ldr	r1, [pc, #556]	; (8001540 <main+0x434>)
 8001312:	4885      	ldr	r0, [pc, #532]	; (8001528 <main+0x41c>)
 8001314:	f002 ffdb 	bl	80042ce <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);			//Ricevo Risultato di misura MSB (8bit)
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	2201      	movs	r2, #1
 800131c:	4983      	ldr	r1, [pc, #524]	; (800152c <main+0x420>)
 800131e:	4882      	ldr	r0, [pc, #520]	; (8001528 <main+0x41c>)
 8001320:	f003 f911 	bl	8004546 <HAL_SPI_Receive>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 8001324:	2201      	movs	r2, #1
 8001326:	2104      	movs	r1, #4
 8001328:	487d      	ldr	r0, [pc, #500]	; (8001520 <main+0x414>)
 800132a:	f002 fa55 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito la comunicazione SPI1 (NON POSSO FARE PIU OPERAZIONI CON UN'UNICA ATTIVAZIONE)
 800132e:	2200      	movs	r2, #0
 8001330:	2104      	movs	r1, #4
 8001332:	487b      	ldr	r0, [pc, #492]	; (8001520 <main+0x414>)
 8001334:	f002 fa50 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndYLSB, 1, 100);			//Trasmetto Indirizzo dove leggere istruzione
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	2201      	movs	r2, #1
 800133c:	4981      	ldr	r1, [pc, #516]	; (8001544 <main+0x438>)
 800133e:	487a      	ldr	r0, [pc, #488]	; (8001528 <main+0x41c>)
 8001340:	f002 ffc5 	bl	80042ce <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);			//Ricevo Risultato di misura LSB (8bit)
 8001344:	2364      	movs	r3, #100	; 0x64
 8001346:	2201      	movs	r2, #1
 8001348:	497a      	ldr	r1, [pc, #488]	; (8001534 <main+0x428>)
 800134a:	4877      	ldr	r0, [pc, #476]	; (8001528 <main+0x41c>)
 800134c:	f003 f8fb 	bl	8004546 <HAL_SPI_Receive>
 		y[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];				//Unisco MSB e LSB attraverso un'operazione di shift su 16bit
 8001350:	4b76      	ldr	r3, [pc, #472]	; (800152c <main+0x420>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b74      	ldr	r3, [pc, #464]	; (800152c <main+0x420>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	b299      	uxth	r1, r3
 8001364:	f507 439a 	add.w	r3, r7, #19712	; 0x4d00
 8001368:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800136c:	f6a3 5364 	subw	r3, r3, #3428	; 0xd64
 8001370:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001374:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 800137e:	2201      	movs	r2, #1
 8001380:	2104      	movs	r1, #4
 8001382:	4867      	ldr	r0, [pc, #412]	; (8001520 <main+0x414>)
 8001384:	f002 fa28 	bl	80037d8 <HAL_GPIO_WritePin>
 		k=(int16_t)y[i];										//Casting da uint a int (abilitazione del segno, complemento)
 8001388:	f507 439a 	add.w	r3, r7, #19712	; 0x4d00
 800138c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001390:	f6a3 5364 	subw	r3, r3, #3428	; 0xd64
 8001394:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001398:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013a2:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 80013a6:	f102 02fe 	add.w	r2, r2, #254	; 0xfe
 80013aa:	8013      	strh	r3, [r2, #0]
 		acc=(k*typ)/1000;										//Da datasheet, il dato letto, lo converto in scala g attraverso questo calcolo
 80013ac:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80013b0:	f103 03fe 	add.w	r3, r3, #254	; 0xfe
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80013c4:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d0:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001538 <main+0x42c>
 80013d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d8:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80013dc:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 80013e0:	edc3 7a00 	vstr	s15, [r3]
 		Vetty[i]=acc;											//Aggiungo la misura al vettore delle letture
 80013e4:	4a58      	ldr	r2, [pc, #352]	; (8001548 <main+0x43c>)
 80013e6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80013ea:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 80013f8:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	601a      	str	r2, [r3, #0]
 		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo

 		spiRcv[0]=0;
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <main+0x420>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
 		spiRcv[1]=0;
 8001406:	4b49      	ldr	r3, [pc, #292]	; (800152c <main+0x420>)
 8001408:	2200      	movs	r2, #0
 800140a:	705a      	strb	r2, [r3, #1]
 		//Asse Z												//Si ripetono gli stessi commenti
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2104      	movs	r1, #4
 8001410:	4843      	ldr	r0, [pc, #268]	; (8001520 <main+0x414>)
 8001412:	f002 f9e1 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndZ, 1, 100);
 8001416:	2364      	movs	r3, #100	; 0x64
 8001418:	2201      	movs	r2, #1
 800141a:	494c      	ldr	r1, [pc, #304]	; (800154c <main+0x440>)
 800141c:	4842      	ldr	r0, [pc, #264]	; (8001528 <main+0x41c>)
 800141e:	f002 ff56 	bl	80042ce <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);
 8001422:	2364      	movs	r3, #100	; 0x64
 8001424:	2201      	movs	r2, #1
 8001426:	4941      	ldr	r1, [pc, #260]	; (800152c <main+0x420>)
 8001428:	483f      	ldr	r0, [pc, #252]	; (8001528 <main+0x41c>)
 800142a:	f003 f88c 	bl	8004546 <HAL_SPI_Receive>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2104      	movs	r1, #4
 8001432:	483b      	ldr	r0, [pc, #236]	; (8001520 <main+0x414>)
 8001434:	f002 f9d0 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2104      	movs	r1, #4
 800143c:	4838      	ldr	r0, [pc, #224]	; (8001520 <main+0x414>)
 800143e:	f002 f9cb 	bl	80037d8 <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndZLSB, 1, 100);
 8001442:	2364      	movs	r3, #100	; 0x64
 8001444:	2201      	movs	r2, #1
 8001446:	4942      	ldr	r1, [pc, #264]	; (8001550 <main+0x444>)
 8001448:	4837      	ldr	r0, [pc, #220]	; (8001528 <main+0x41c>)
 800144a:	f002 ff40 	bl	80042ce <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	2201      	movs	r2, #1
 8001452:	4938      	ldr	r1, [pc, #224]	; (8001534 <main+0x428>)
 8001454:	4834      	ldr	r0, [pc, #208]	; (8001528 <main+0x41c>)
 8001456:	f003 f876 	bl	8004546 <HAL_SPI_Receive>
 		z[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <main+0x420>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	4b32      	ldr	r3, [pc, #200]	; (800152c <main+0x420>)
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	b299      	uxth	r1, r3
 800146e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001472:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 8001476:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800147a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2104      	movs	r1, #4
 8001488:	4825      	ldr	r0, [pc, #148]	; (8001520 <main+0x414>)
 800148a:	f002 f9a5 	bl	80037d8 <HAL_GPIO_WritePin>
 		k=(int16_t)z[i];
 800148e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001492:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 8001496:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800149a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014a4:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 80014a8:	f102 02fe 	add.w	r2, r2, #254	; 0xfe
 80014ac:	8013      	strh	r3, [r2, #0]
 		acc=(k*typ)/1000;
 80014ae:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80014b2:	f103 03fe 	add.w	r3, r3, #254	; 0xfe
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c2:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80014c6:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001538 <main+0x42c>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80014de:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 80014e2:	edc3 7a00 	vstr	s15, [r3]
 		Vettz[i]=acc;
 80014e6:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <main+0x448>)
 80014e8:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80014ec:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 80014fa:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	601a      	str	r2, [r3, #0]
 		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo

 	    i=i+1;															//Incremento la i per spostare le misure nel buffer
 8001502:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001506:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001512:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e01e      	b.n	8001558 <main+0x44c>
 800151a:	bf00      	nop
 800151c:	2002455c 	.word	0x2002455c
 8001520:	40021800 	.word	0x40021800
 8001524:	2000c98c 	.word	0x2000c98c
 8001528:	20024560 	.word	0x20024560
 800152c:	2000c9a4 	.word	0x2000c9a4
 8001530:	2000c998 	.word	0x2000c998
 8001534:	2000c9a5 	.word	0x2000c9a5
 8001538:	447a0000 	.word	0x447a0000
 800153c:	2000ce5c 	.word	0x2000ce5c
 8001540:	2000c990 	.word	0x2000c990
 8001544:	2000c99c 	.word	0x2000c99c
 8001548:	20014b5c 	.word	0x20014b5c
 800154c:	2000c994 	.word	0x2000c994
 8001550:	2000c9a0 	.word	0x2000c9a0
 8001554:	2001c85c 	.word	0x2001c85c
  while (i<DIM)
 8001558:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800155c:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001566:	f6ff ae41 	blt.w	80011ec <main+0xe0>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  HAL_TIM_Base_Stop(&htim2);											//Completate le n=DIM misure, fermo il timer
 800156a:	48b4      	ldr	r0, [pc, #720]	; (800183c <main+0x730>)
 800156c:	f003 fc86 	bl	8004e7c <HAL_TIM_Base_Stop>
     HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);		//Trasmetto uno spazio per ordine
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	2203      	movs	r2, #3
 8001576:	49b2      	ldr	r1, [pc, #712]	; (8001840 <main+0x734>)
 8001578:	48b2      	ldr	r0, [pc, #712]	; (8001844 <main+0x738>)
 800157a:	f004 f8be 	bl	80056fa <HAL_UART_Transmit>


     	 	  arm_cfft_radix4_instance_f32 S;

     	 	  /* Inizializzo il modulo CFFT/CIFFT, intFlag = 0, doBitReverse = 1 */
     	 	  arm_cfft_radix4_init_f32(&S, FFT_SIZE, 0, 1);
 800157e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8001582:	38f8      	subs	r0, #248	; 0xf8
 8001584:	2301      	movs	r3, #1
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158c:	f005 fa1e 	bl	80069cc <arm_cfft_radix4_init_f32>

     	 	  //Asse X

     	 	  //Raccolgo i campioni
     	 	  for(int j=0;j<SAMPLES;j+=2){
 8001590:	2300      	movs	r3, #0
 8001592:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001596:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e028      	b.n	80015f0 <main+0x4e4>
     	 		  fft_in_buf_realX[j] = ((float32_t)((float32_t)Vettx[j]));
 800159e:	4aaa      	ldr	r2, [pc, #680]	; (8001848 <main+0x73c>)
 80015a0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015a4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	49a6      	ldr	r1, [pc, #664]	; (800184c <main+0x740>)
 80015b2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015b6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	601a      	str	r2, [r3, #0]
     	 		  fft_in_buf_realX[j+1] = 0;
 80015c2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015c6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a9f      	ldr	r2, [pc, #636]	; (800184c <main+0x740>)
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
     	 	  for(int j=0;j<SAMPLES;j+=2){
 80015da:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015de:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3302      	adds	r3, #2
 80015e6:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80015ea:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015f4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015fe:	dbce      	blt.n	800159e <main+0x492>
     	 	  }

     	       /* Processo i dati attraverso il modulo CFFT/CIFFT */
     	        arm_cfft_radix4_f32(&S, fft_in_buf_realX);
 8001600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001604:	3bf8      	subs	r3, #248	; 0xf8
 8001606:	4991      	ldr	r1, [pc, #580]	; (800184c <main+0x740>)
 8001608:	4618      	mov	r0, r3
 800160a:	f005 fda3 	bl	8007154 <arm_cfft_radix4_f32>

     	       /* Processo i dati attraverso il modulo Complex Magnitude */
     	        arm_cmplx_mag_f32(fft_in_buf_realX, fft_out_buf_realX, FFT_SIZE);
 800160e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001612:	498f      	ldr	r1, [pc, #572]	; (8001850 <main+0x744>)
 8001614:	488d      	ldr	r0, [pc, #564]	; (800184c <main+0x740>)
 8001616:	f005 fe2d 	bl	8007274 <arm_cmplx_mag_f32>
          //Asse Y



       	 	  //Raccolgo i campioni
       	 	  for(int j=0;j<SAMPLES;j+=2){
 800161a:	2300      	movs	r3, #0
 800161c:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001620:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e028      	b.n	800167a <main+0x56e>
       	 		  fft_in_buf_realY[j] = ((float32_t)((float32_t)Vetty[j]));
 8001628:	4a8a      	ldr	r2, [pc, #552]	; (8001854 <main+0x748>)
 800162a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800162e:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4987      	ldr	r1, [pc, #540]	; (8001858 <main+0x74c>)
 800163c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001640:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	601a      	str	r2, [r3, #0]
       	 		  fft_in_buf_realY[j+1] = 0;
 800164c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001650:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	4a7f      	ldr	r2, [pc, #508]	; (8001858 <main+0x74c>)
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
       	 	  for(int j=0;j<SAMPLES;j+=2){
 8001664:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001668:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3302      	adds	r3, #2
 8001670:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001674:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800167e:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001688:	dbce      	blt.n	8001628 <main+0x51c>
       	 	  }

       	       /* Processo i dati attraverso il modulo CFFT/CIFFT */
       	        arm_cfft_radix4_f32(&S, fft_in_buf_realY);
 800168a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800168e:	3bf8      	subs	r3, #248	; 0xf8
 8001690:	4971      	ldr	r1, [pc, #452]	; (8001858 <main+0x74c>)
 8001692:	4618      	mov	r0, r3
 8001694:	f005 fd5e 	bl	8007154 <arm_cfft_radix4_f32>

       	       /* Processo i dati attraverso il modulo Complex Magnitude */
       	        arm_cmplx_mag_f32(fft_in_buf_realY, fft_out_buf_realY, FFT_SIZE);
 8001698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169c:	496f      	ldr	r1, [pc, #444]	; (800185c <main+0x750>)
 800169e:	486e      	ldr	r0, [pc, #440]	; (8001858 <main+0x74c>)
 80016a0:	f005 fde8 	bl	8007274 <arm_cmplx_mag_f32>


           //Eseguo la fft sull'Asse Z

       	     //Raccolgo i campioni
       	       for(int j=0;j<SAMPLES;j+=2){
 80016a4:	2300      	movs	r3, #0
 80016a6:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80016aa:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e028      	b.n	8001704 <main+0x5f8>
       	    	   fft_in_buf_realZ[j] = ((float32_t)((float32_t)Vettz[j]));
 80016b2:	4a6b      	ldr	r2, [pc, #428]	; (8001860 <main+0x754>)
 80016b4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80016b8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4967      	ldr	r1, [pc, #412]	; (8001864 <main+0x758>)
 80016c6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80016ca:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	601a      	str	r2, [r3, #0]
       	           fft_in_buf_realZ[j+1] = 0;
 80016d6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80016da:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	4a60      	ldr	r2, [pc, #384]	; (8001864 <main+0x758>)
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
       	       for(int j=0;j<SAMPLES;j+=2){
 80016ee:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80016f2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3302      	adds	r3, #2
 80016fa:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80016fe:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001708:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001712:	dbce      	blt.n	80016b2 <main+0x5a6>
       	           }

       	      /* Processo i dati attraverso il modulo CFFT/CIFFT */
       	      arm_cfft_radix4_f32(&S, fft_in_buf_realZ);
 8001714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001718:	3bf8      	subs	r3, #248	; 0xf8
 800171a:	4952      	ldr	r1, [pc, #328]	; (8001864 <main+0x758>)
 800171c:	4618      	mov	r0, r3
 800171e:	f005 fd19 	bl	8007154 <arm_cfft_radix4_f32>

       	      /* Processo i dati attraverso il modulo Complex Magnitude */
       	      arm_cmplx_mag_f32(fft_in_buf_realZ, fft_out_buf_realZ, FFT_SIZE);
 8001722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001726:	4950      	ldr	r1, [pc, #320]	; (8001868 <main+0x75c>)
 8001728:	484e      	ldr	r0, [pc, #312]	; (8001864 <main+0x758>)
 800172a:	f005 fda3 	bl	8007274 <arm_cmplx_mag_f32>


       	  //Prendo le N armoniche a magnitude maggiore di X

          for(int j = 0; j<((FFT_SIZE/2)-1);j++){
 800172e:	2300      	movs	r3, #0
 8001730:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001734:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e01d      	b.n	8001778 <main+0x66c>
         	 tempX[j] = (float32_t)fft_out_buf_realX[j+1];
 800173c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001740:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a41      	ldr	r2, [pc, #260]	; (8001850 <main+0x744>)
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4946      	ldr	r1, [pc, #280]	; (800186c <main+0x760>)
 8001752:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001756:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	601a      	str	r2, [r3, #0]
          for(int j = 0; j<((FFT_SIZE/2)-1);j++){
 8001762:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001766:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001772:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800177c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001786:	ddd9      	ble.n	800173c <main+0x630>
          }

          for(int j=0; j<N;j++){
 8001788:	2300      	movs	r3, #0
 800178a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800178e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e03d      	b.n	8001812 <main+0x706>

         	 arm_max_f32(tempX, FFT_SIZE/2, &massimo, &indmax);
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <main+0x764>)
 8001798:	4a36      	ldr	r2, [pc, #216]	; (8001874 <main+0x768>)
 800179a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179e:	4833      	ldr	r0, [pc, #204]	; (800186c <main+0x760>)
 80017a0:	f005 f8a8 	bl	80068f4 <arm_max_f32>
         	 valMassimiX[j] = massimo;
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <main+0x768>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4933      	ldr	r1, [pc, #204]	; (8001878 <main+0x76c>)
 80017aa:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80017ae:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	601a      	str	r2, [r3, #0]
         	 indX[j] = indmax*passo_f;
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <main+0x764>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f242 7210 	movw	r2, #10000	; 0x2710
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da01      	bge.n	80017ce <main+0x6c2>
 80017ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80017ce:	125b      	asrs	r3, r3, #9
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d8:	4a28      	ldr	r2, [pc, #160]	; (800187c <main+0x770>)
 80017da:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80017de:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	edc3 7a00 	vstr	s15, [r3]
         	 tempX[indmax] = 0;
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <main+0x764>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1e      	ldr	r2, [pc, #120]	; (800186c <main+0x760>)
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
          for(int j=0; j<N;j++){
 80017fc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001800:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800180c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001816:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b04      	cmp	r3, #4
 800181e:	ddba      	ble.n	8001796 <main+0x68a>
          }

          //Stampo le N frequenze corrispondenti di X

          sprintf(buffer2,"Armoniche asse X \n \r");
 8001820:	4917      	ldr	r1, [pc, #92]	; (8001880 <main+0x774>)
 8001822:	4818      	ldr	r0, [pc, #96]	; (8001884 <main+0x778>)
 8001824:	f007 fddc 	bl	80093e0 <siprintf>
          uprintf(buffer2);
 8001828:	4816      	ldr	r0, [pc, #88]	; (8001884 <main+0x778>)
 800182a:	f7ff fc5b 	bl	80010e4 <uprintf>

          for(int j=0;j<N;j++){
 800182e:	2300      	movs	r3, #0
 8001830:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001834:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e045      	b.n	80018c8 <main+0x7bc>
 800183c:	200245bc 	.word	0x200245bc
 8001840:	0800b9a0 	.word	0x0800b9a0
 8001844:	20024604 	.word	0x20024604
 8001848:	2000ce5c 	.word	0x2000ce5c
 800184c:	20000894 	.word	0x20000894
 8001850:	20009894 	.word	0x20009894
 8001854:	20014b5c 	.word	0x20014b5c
 8001858:	20002894 	.word	0x20002894
 800185c:	2000a894 	.word	0x2000a894
 8001860:	2001c85c 	.word	0x2001c85c
 8001864:	20004894 	.word	0x20004894
 8001868:	2000b894 	.word	0x2000b894
 800186c:	20006894 	.word	0x20006894
 8001870:	2000c988 	.word	0x2000c988
 8001874:	2000c894 	.word	0x2000c894
 8001878:	2000c898 	.word	0x2000c898
 800187c:	2000c8ac 	.word	0x2000c8ac
 8001880:	0800b9a4 	.word	0x0800b9a4
 8001884:	2000c9ac 	.word	0x2000c9ac
          sprintf(buffer3,"%f \n \r",valMassimiX[j]);
 8001888:	4ab9      	ldr	r2, [pc, #740]	; (8001b70 <main+0xa64>)
 800188a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800188e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe6c 	bl	8000578 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	49b3      	ldr	r1, [pc, #716]	; (8001b74 <main+0xa68>)
 80018a6:	48b4      	ldr	r0, [pc, #720]	; (8001b78 <main+0xa6c>)
 80018a8:	f007 fd9a 	bl	80093e0 <siprintf>
          uprintf(buffer3);
 80018ac:	48b2      	ldr	r0, [pc, #712]	; (8001b78 <main+0xa6c>)
 80018ae:	f7ff fc19 	bl	80010e4 <uprintf>
          for(int j=0;j<N;j++){
 80018b2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80018b6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80018c2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80018cc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	ddd8      	ble.n	8001888 <main+0x77c>
          }

          //Stampo le relative frequenze di X

          sprintf(buffer2,"Frequenze asse X \n \r");
 80018d6:	49a9      	ldr	r1, [pc, #676]	; (8001b7c <main+0xa70>)
 80018d8:	48a9      	ldr	r0, [pc, #676]	; (8001b80 <main+0xa74>)
 80018da:	f007 fd81 	bl	80093e0 <siprintf>
          uprintf(buffer2);
 80018de:	48a8      	ldr	r0, [pc, #672]	; (8001b80 <main+0xa74>)
 80018e0:	f7ff fc00 	bl	80010e4 <uprintf>

          for(int j=0;j<N;j++){
 80018e4:	2300      	movs	r3, #0
 80018e6:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80018ea:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e01f      	b.n	8001932 <main+0x826>
          sprintf(buffer2,"%f \n \r",indX[j]);
 80018f2:	4aa4      	ldr	r2, [pc, #656]	; (8001b84 <main+0xa78>)
 80018f4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80018f8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe37 	bl	8000578 <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4999      	ldr	r1, [pc, #612]	; (8001b74 <main+0xa68>)
 8001910:	489b      	ldr	r0, [pc, #620]	; (8001b80 <main+0xa74>)
 8001912:	f007 fd65 	bl	80093e0 <siprintf>
          uprintf(buffer2);
 8001916:	489a      	ldr	r0, [pc, #616]	; (8001b80 <main+0xa74>)
 8001918:	f7ff fbe4 	bl	80010e4 <uprintf>
          for(int j=0;j<N;j++){
 800191c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001920:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800192c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001936:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b04      	cmp	r3, #4
 800193e:	ddd8      	ble.n	80018f2 <main+0x7e6>
          }

          //Prendo le N armoniche a magnitude maggiore di Y

          for(int j = 1; j<((FFT_SIZE/2)-1);j++){
 8001940:	2301      	movs	r3, #1
 8001942:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001946:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	e01d      	b.n	800198a <main+0x87e>
              	 tempY[j] = (float32_t)fft_out_buf_realY[j+1];
 800194e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001952:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	4a8b      	ldr	r2, [pc, #556]	; (8001b88 <main+0xa7c>)
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	498a      	ldr	r1, [pc, #552]	; (8001b8c <main+0xa80>)
 8001964:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001968:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	601a      	str	r2, [r3, #0]
          for(int j = 1; j<((FFT_SIZE/2)-1);j++){
 8001974:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001978:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001984:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800198e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001998:	ddd9      	ble.n	800194e <main+0x842>
               }

               for(int j = 0; j<N;j++){
 800199a:	2300      	movs	r3, #0
 800199c:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80019a0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e03d      	b.n	8001a24 <main+0x918>

              	 arm_max_f32(tempY, FFT_SIZE/2, &massimo, &indmax);
 80019a8:	4b79      	ldr	r3, [pc, #484]	; (8001b90 <main+0xa84>)
 80019aa:	4a7a      	ldr	r2, [pc, #488]	; (8001b94 <main+0xa88>)
 80019ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b0:	4876      	ldr	r0, [pc, #472]	; (8001b8c <main+0xa80>)
 80019b2:	f004 ff9f 	bl	80068f4 <arm_max_f32>
              	 valMassimiY[j] = massimo;
 80019b6:	4b77      	ldr	r3, [pc, #476]	; (8001b94 <main+0xa88>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4977      	ldr	r1, [pc, #476]	; (8001b98 <main+0xa8c>)
 80019bc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80019c0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	601a      	str	r2, [r3, #0]
              	 indY[j] = indmax*passo_f;
 80019cc:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <main+0xa84>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da01      	bge.n	80019e0 <main+0x8d4>
 80019dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019e0:	125b      	asrs	r3, r3, #9
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	4a6c      	ldr	r2, [pc, #432]	; (8001b9c <main+0xa90>)
 80019ec:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80019f0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	edc3 7a00 	vstr	s15, [r3]
              	 tempY[indmax] = 0;
 80019fe:	4b64      	ldr	r3, [pc, #400]	; (8001b90 <main+0xa84>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a62      	ldr	r2, [pc, #392]	; (8001b8c <main+0xa80>)
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
               for(int j = 0; j<N;j++){
 8001a0e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a12:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001a1e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a28:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	ddba      	ble.n	80019a8 <main+0x89c>
               }

            //Stampo le N armoniche di Y

                         sprintf(buffer2,"Armoniche asse Y \n \r");
 8001a32:	495b      	ldr	r1, [pc, #364]	; (8001ba0 <main+0xa94>)
 8001a34:	4852      	ldr	r0, [pc, #328]	; (8001b80 <main+0xa74>)
 8001a36:	f007 fcd3 	bl	80093e0 <siprintf>
                         uprintf(buffer2);
 8001a3a:	4851      	ldr	r0, [pc, #324]	; (8001b80 <main+0xa74>)
 8001a3c:	f7ff fb52 	bl	80010e4 <uprintf>

                         for(int j=0;j<N;j++){
 8001a40:	2300      	movs	r3, #0
 8001a42:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001a46:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e01f      	b.n	8001a8e <main+0x982>
                         sprintf(buffer3,"%f \n \r",valMassimiY[j]);
 8001a4e:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <main+0xa8c>)
 8001a50:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a54:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fd89 	bl	8000578 <__aeabi_f2d>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4942      	ldr	r1, [pc, #264]	; (8001b74 <main+0xa68>)
 8001a6c:	4842      	ldr	r0, [pc, #264]	; (8001b78 <main+0xa6c>)
 8001a6e:	f007 fcb7 	bl	80093e0 <siprintf>
                         uprintf(buffer3);
 8001a72:	4841      	ldr	r0, [pc, #260]	; (8001b78 <main+0xa6c>)
 8001a74:	f7ff fb36 	bl	80010e4 <uprintf>
                         for(int j=0;j<N;j++){
 8001a78:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a7c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001a88:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a92:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	ddd8      	ble.n	8001a4e <main+0x942>
                         }

                         //Stampo le relative frequenze di Y

                         sprintf(buffer2,"Frequenze asse Y \n \r");
 8001a9c:	4941      	ldr	r1, [pc, #260]	; (8001ba4 <main+0xa98>)
 8001a9e:	4838      	ldr	r0, [pc, #224]	; (8001b80 <main+0xa74>)
 8001aa0:	f007 fc9e 	bl	80093e0 <siprintf>
                         uprintf(buffer2);
 8001aa4:	4836      	ldr	r0, [pc, #216]	; (8001b80 <main+0xa74>)
 8001aa6:	f7ff fb1d 	bl	80010e4 <uprintf>

                         for(int j=0;j<N;j++){
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001ab0:	f102 0220 	add.w	r2, r2, #32
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01f      	b.n	8001af8 <main+0x9ec>
                         sprintf(buffer2,"%f \n \r",indY[j]);
 8001ab8:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <main+0xa90>)
 8001aba:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001abe:	f103 0320 	add.w	r3, r3, #32
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd54 	bl	8000578 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4927      	ldr	r1, [pc, #156]	; (8001b74 <main+0xa68>)
 8001ad6:	482a      	ldr	r0, [pc, #168]	; (8001b80 <main+0xa74>)
 8001ad8:	f007 fc82 	bl	80093e0 <siprintf>
                         uprintf(buffer2);
 8001adc:	4828      	ldr	r0, [pc, #160]	; (8001b80 <main+0xa74>)
 8001ade:	f7ff fb01 	bl	80010e4 <uprintf>
                         for(int j=0;j<N;j++){
 8001ae2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001ae6:	f103 0320 	add.w	r3, r3, #32
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001af2:	f102 0220 	add.w	r2, r2, #32
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001afc:	f103 0320 	add.w	r3, r3, #32
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	ddd8      	ble.n	8001ab8 <main+0x9ac>
                         }

            //Prendo le N armoniche a magnitude maggiore di Z

            for(int j = 1; j<((FFT_SIZE/2)-1);j++){
 8001b06:	2301      	movs	r3, #1
 8001b08:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001b0c:	f102 021c 	add.w	r2, r2, #28
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <main+0xa44>
                   	 tempZ[j] = (float32_t)fft_out_buf_realZ[j+1];
 8001b14:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001b18:	f103 031c 	add.w	r3, r3, #28
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <main+0xa9c>)
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4920      	ldr	r1, [pc, #128]	; (8001bac <main+0xaa0>)
 8001b2a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001b2e:	f103 031c 	add.w	r3, r3, #28
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	601a      	str	r2, [r3, #0]
            for(int j = 1; j<((FFT_SIZE/2)-1);j++){
 8001b3a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001b3e:	f103 031c 	add.w	r3, r3, #28
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001b4a:	f102 021c 	add.w	r2, r2, #28
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001b54:	f103 031c 	add.w	r3, r3, #28
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001b5e:	ddd9      	ble.n	8001b14 <main+0xa08>
                    }

                    for(int j = 0; j<N;j++){
 8001b60:	2300      	movs	r3, #0
 8001b62:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001b66:	f102 0218 	add.w	r2, r2, #24
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e05e      	b.n	8001c2c <main+0xb20>
 8001b6e:	bf00      	nop
 8001b70:	2000c898 	.word	0x2000c898
 8001b74:	0800b9bc 	.word	0x0800b9bc
 8001b78:	2000cc04 	.word	0x2000cc04
 8001b7c:	0800b9c4 	.word	0x0800b9c4
 8001b80:	2000c9ac 	.word	0x2000c9ac
 8001b84:	2000c8ac 	.word	0x2000c8ac
 8001b88:	2000a894 	.word	0x2000a894
 8001b8c:	20007894 	.word	0x20007894
 8001b90:	2000c988 	.word	0x2000c988
 8001b94:	2000c894 	.word	0x2000c894
 8001b98:	2000c8c0 	.word	0x2000c8c0
 8001b9c:	2000c8d4 	.word	0x2000c8d4
 8001ba0:	0800b9dc 	.word	0x0800b9dc
 8001ba4:	0800b9f4 	.word	0x0800b9f4
 8001ba8:	2000b894 	.word	0x2000b894
 8001bac:	20008894 	.word	0x20008894

                   	 arm_max_f32(tempZ, FFT_SIZE/2, &massimo, &indmax);
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	; (8001d2c <main+0xc20>)
 8001bb2:	4a5f      	ldr	r2, [pc, #380]	; (8001d30 <main+0xc24>)
 8001bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb8:	485e      	ldr	r0, [pc, #376]	; (8001d34 <main+0xc28>)
 8001bba:	f004 fe9b 	bl	80068f4 <arm_max_f32>
                   	 valMassimiZ[j] = massimo;
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <main+0xc24>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	495d      	ldr	r1, [pc, #372]	; (8001d38 <main+0xc2c>)
 8001bc4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001bc8:	f103 0318 	add.w	r3, r3, #24
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	601a      	str	r2, [r3, #0]
                   	 indZ[j] = indmax*passo_f;
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <main+0xc20>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da01      	bge.n	8001be8 <main+0xadc>
 8001be4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001be8:	125b      	asrs	r3, r3, #9
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf2:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <main+0xc30>)
 8001bf4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001bf8:	f103 0318 	add.w	r3, r3, #24
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	edc3 7a00 	vstr	s15, [r3]
                   	 tempZ[indmax] = 0;
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <main+0xc20>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4a      	ldr	r2, [pc, #296]	; (8001d34 <main+0xc28>)
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
                    for(int j = 0; j<N;j++){
 8001c16:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c1a:	f103 0318 	add.w	r3, r3, #24
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001c26:	f102 0218 	add.w	r2, r2, #24
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c30:	f103 0318 	add.w	r3, r3, #24
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	ddba      	ble.n	8001bb0 <main+0xaa4>
                    }
                    //Stampo le N armoniche di Z

                              sprintf(buffer2,"Armoniche asse Z \n \r");
 8001c3a:	4941      	ldr	r1, [pc, #260]	; (8001d40 <main+0xc34>)
 8001c3c:	4841      	ldr	r0, [pc, #260]	; (8001d44 <main+0xc38>)
 8001c3e:	f007 fbcf 	bl	80093e0 <siprintf>
                              uprintf(buffer2);
 8001c42:	4840      	ldr	r0, [pc, #256]	; (8001d44 <main+0xc38>)
 8001c44:	f7ff fa4e 	bl	80010e4 <uprintf>

                              for(int j=0;j<N;j++){
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001c4e:	f102 0214 	add.w	r2, r2, #20
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e01f      	b.n	8001c96 <main+0xb8a>
                              sprintf(buffer3,"%f \n \r",valMassimiZ[j]);
 8001c56:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <main+0xc2c>)
 8001c58:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c5c:	f103 0314 	add.w	r3, r3, #20
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc85 	bl	8000578 <__aeabi_f2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4935      	ldr	r1, [pc, #212]	; (8001d48 <main+0xc3c>)
 8001c74:	4835      	ldr	r0, [pc, #212]	; (8001d4c <main+0xc40>)
 8001c76:	f007 fbb3 	bl	80093e0 <siprintf>
                              uprintf(buffer3);
 8001c7a:	4834      	ldr	r0, [pc, #208]	; (8001d4c <main+0xc40>)
 8001c7c:	f7ff fa32 	bl	80010e4 <uprintf>
                              for(int j=0;j<N;j++){
 8001c80:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c84:	f103 0314 	add.w	r3, r3, #20
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001c90:	f102 0214 	add.w	r2, r2, #20
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c9a:	f103 0314 	add.w	r3, r3, #20
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	ddd8      	ble.n	8001c56 <main+0xb4a>
                              }

                              //Stampo le relative frequenze di Z

                              sprintf(buffer2,"Frequenze asse Z \n \r");
 8001ca4:	492a      	ldr	r1, [pc, #168]	; (8001d50 <main+0xc44>)
 8001ca6:	4827      	ldr	r0, [pc, #156]	; (8001d44 <main+0xc38>)
 8001ca8:	f007 fb9a 	bl	80093e0 <siprintf>
                              uprintf(buffer2);
 8001cac:	4825      	ldr	r0, [pc, #148]	; (8001d44 <main+0xc38>)
 8001cae:	f7ff fa19 	bl	80010e4 <uprintf>

                              for(int j=0;j<N;j++){
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001cb8:	f102 0210 	add.w	r2, r2, #16
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e01f      	b.n	8001d00 <main+0xbf4>
                              sprintf(buffer2,"%f \n \r",indZ[j]);
 8001cc0:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <main+0xc30>)
 8001cc2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001cc6:	f103 0310 	add.w	r3, r3, #16
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc50 	bl	8000578 <__aeabi_f2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	491a      	ldr	r1, [pc, #104]	; (8001d48 <main+0xc3c>)
 8001cde:	4819      	ldr	r0, [pc, #100]	; (8001d44 <main+0xc38>)
 8001ce0:	f007 fb7e 	bl	80093e0 <siprintf>
                              uprintf(buffer2);
 8001ce4:	4817      	ldr	r0, [pc, #92]	; (8001d44 <main+0xc38>)
 8001ce6:	f7ff f9fd 	bl	80010e4 <uprintf>
                              for(int j=0;j<N;j++){
 8001cea:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001cee:	f103 0310 	add.w	r3, r3, #16
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001cfa:	f102 0210 	add.w	r2, r2, #16
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001d04:	f103 0310 	add.w	r3, r3, #16
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	ddd8      	ble.n	8001cc0 <main+0xbb4>
                              }

  //Preparo la matrice con gli input da dare al mio NN(riempio la matrice per colonne)

  for(int j=0;j<AI_NETWORK_IN_1_SIZE;j++){
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001d14:	f102 020c 	add.w	r2, r2, #12
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e10b      	b.n	8001f34 <main+0xe28>

	  for(int k=0;k<N;k++){
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001d22:	f102 0208 	add.w	r2, r2, #8
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	e0f1      	b.n	8001f0e <main+0xe02>
 8001d2a:	bf00      	nop
 8001d2c:	2000c988 	.word	0x2000c988
 8001d30:	2000c894 	.word	0x2000c894
 8001d34:	20008894 	.word	0x20008894
 8001d38:	2000c8e8 	.word	0x2000c8e8
 8001d3c:	2000c8fc 	.word	0x2000c8fc
 8001d40:	0800ba0c 	.word	0x0800ba0c
 8001d44:	2000c9ac 	.word	0x2000c9ac
 8001d48:	0800b9bc 	.word	0x0800b9bc
 8001d4c:	2000cc04 	.word	0x2000cc04
 8001d50:	0800ba24 	.word	0x0800ba24

		  if(j==0)
 8001d54:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001d58:	f103 030c 	add.w	r3, r3, #12
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11b      	bne.n	8001d9a <main+0xc8e>
			  matriceInput[k][j] = (float32_t)valMassimiX[k];
 8001d62:	4acd      	ldr	r2, [pc, #820]	; (8002098 <main+0xf8c>)
 8001d64:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001d68:	f103 0308 	add.w	r3, r3, #8
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	48c9      	ldr	r0, [pc, #804]	; (800209c <main+0xf90>)
 8001d76:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001d7a:	f103 0308 	add.w	r3, r3, #8
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001d8c:	f102 020c 	add.w	r2, r2, #12
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4403      	add	r3, r0
 8001d98:	6019      	str	r1, [r3, #0]
		  if(j==1)
 8001d9a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001d9e:	f103 030c 	add.w	r3, r3, #12
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d11b      	bne.n	8001de0 <main+0xcd4>
			  matriceInput[k][j] = (float32_t)indX[k];
 8001da8:	4abd      	ldr	r2, [pc, #756]	; (80020a0 <main+0xf94>)
 8001daa:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001dae:	f103 0308 	add.w	r3, r3, #8
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	48b8      	ldr	r0, [pc, #736]	; (800209c <main+0xf90>)
 8001dbc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001dc0:	f103 0308 	add.w	r3, r3, #8
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001dd2:	f102 020c 	add.w	r2, r2, #12
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4403      	add	r3, r0
 8001dde:	6019      	str	r1, [r3, #0]
		  if(j==2)
 8001de0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001de4:	f103 030c 	add.w	r3, r3, #12
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d11b      	bne.n	8001e26 <main+0xd1a>
			  matriceInput[k][j] = (float32_t)valMassimiY[k];
 8001dee:	4aad      	ldr	r2, [pc, #692]	; (80020a4 <main+0xf98>)
 8001df0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001df4:	f103 0308 	add.w	r3, r3, #8
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	48a6      	ldr	r0, [pc, #664]	; (800209c <main+0xf90>)
 8001e02:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e06:	f103 0308 	add.w	r3, r3, #8
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001e18:	f102 020c 	add.w	r2, r2, #12
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4403      	add	r3, r0
 8001e24:	6019      	str	r1, [r3, #0]
		  if(j==3)
 8001e26:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e2a:	f103 030c 	add.w	r3, r3, #12
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d11b      	bne.n	8001e6c <main+0xd60>
			  matriceInput[k][j] = (float32_t)indY[k];
 8001e34:	4a9c      	ldr	r2, [pc, #624]	; (80020a8 <main+0xf9c>)
 8001e36:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e3a:	f103 0308 	add.w	r3, r3, #8
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	4895      	ldr	r0, [pc, #596]	; (800209c <main+0xf90>)
 8001e48:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e4c:	f103 0308 	add.w	r3, r3, #8
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001e5e:	f102 020c 	add.w	r2, r2, #12
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4403      	add	r3, r0
 8001e6a:	6019      	str	r1, [r3, #0]
		  if(j==4)
 8001e6c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e70:	f103 030c 	add.w	r3, r3, #12
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d11b      	bne.n	8001eb2 <main+0xda6>
			  matriceInput[k][j] = (float32_t)valMassimiZ[k];
 8001e7a:	4a8c      	ldr	r2, [pc, #560]	; (80020ac <main+0xfa0>)
 8001e7c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e80:	f103 0308 	add.w	r3, r3, #8
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	4883      	ldr	r0, [pc, #524]	; (800209c <main+0xf90>)
 8001e8e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e92:	f103 0308 	add.w	r3, r3, #8
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001ea4:	f102 020c 	add.w	r2, r2, #12
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4403      	add	r3, r0
 8001eb0:	6019      	str	r1, [r3, #0]
		  if(j==5)
 8001eb2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001eb6:	f103 030c 	add.w	r3, r3, #12
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d11b      	bne.n	8001ef8 <main+0xdec>
			  matriceInput[k][j] = (float32_t)indZ[k];
 8001ec0:	4a7b      	ldr	r2, [pc, #492]	; (80020b0 <main+0xfa4>)
 8001ec2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001ec6:	f103 0308 	add.w	r3, r3, #8
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	4872      	ldr	r0, [pc, #456]	; (800209c <main+0xf90>)
 8001ed4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001ed8:	f103 0308 	add.w	r3, r3, #8
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001eea:	f102 020c 	add.w	r2, r2, #12
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4403      	add	r3, r0
 8001ef6:	6019      	str	r1, [r3, #0]
	  for(int k=0;k<N;k++){
 8001ef8:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001efc:	f103 0308 	add.w	r3, r3, #8
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001f08:	f102 0208 	add.w	r2, r2, #8
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001f12:	f103 0308 	add.w	r3, r3, #8
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	f77f af1b 	ble.w	8001d54 <main+0xc48>
  for(int j=0;j<AI_NETWORK_IN_1_SIZE;j++){
 8001f1e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001f22:	f103 030c 	add.w	r3, r3, #12
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001f2e:	f102 020c 	add.w	r2, r2, #12
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001f38:	f103 030c 	add.w	r3, r3, #12
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	f77f aeec 	ble.w	8001d1c <main+0xc10>
  	AI_ALIGNED(4) ai_i8 in_data[AI_NETWORK_IN_1_SIZE_BYTES];
    AI_ALIGNED(4) ai_i8 out_data[AI_NETWORK_OUT_1_SIZE_BYTES];

    //Puntatore al modello

    ai_handle network = AI_HANDLE_NULL;
 8001f44:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001f48:	f6a3 43e8 	subw	r3, r3, #3304	; 0xce8
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

    //Inizializzo le struct che conterranno i puntatori ai dati

    ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8001f50:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001f54:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8001f58:	4a56      	ldr	r2, [pc, #344]	; (80020b4 <main+0xfa8>)
 8001f5a:	461c      	mov	r4, r3
 8001f5c:	4615      	mov	r5, r2
 8001f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f66:	e884 0003 	stmia.w	r4, {r0, r1}
    ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8001f6a:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001f6e:	f6a3 5318 	subw	r3, r3, #3352	; 0xd18
 8001f72:	4a51      	ldr	r2, [pc, #324]	; (80020b8 <main+0xfac>)
 8001f74:	461c      	mov	r4, r3
 8001f76:	4615      	mov	r5, r2
 8001f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f80:	e884 0003 	stmia.w	r4, {r0, r1}

    //Ricavo i pesi e i bias del modello

       ai_network_params ai_params = {
 8001f84:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001f88:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001f8c:	4a4b      	ldr	r2, [pc, #300]	; (80020bc <main+0xfb0>)
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001f94:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001f98:	2201      	movs	r2, #1
 8001f9a:	809a      	strh	r2, [r3, #4]
 8001f9c:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001fa0:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	80da      	strh	r2, [r3, #6]
 8001fa8:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001fac:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	811a      	strh	r2, [r3, #8]
 8001fb4:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001fb8:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001fbc:	f640 621c 	movw	r2, #3612	; 0xe1c
 8001fc0:	60da      	str	r2, [r3, #12]
       AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8001fc2:	f004 fc8d 	bl	80068e0 <ai_network_data_weights_get>
 8001fc6:	4602      	mov	r2, r0
       ai_network_params ai_params = {
 8001fc8:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001fcc:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001fd6:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001fe2:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001fe6:	4a36      	ldr	r2, [pc, #216]	; (80020c0 <main+0xfb4>)
 8001fe8:	619a      	str	r2, [r3, #24]
 8001fea:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001fee:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	839a      	strh	r2, [r3, #28]
 8001ff6:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001ffa:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001ffe:	2201      	movs	r2, #1
 8002000:	83da      	strh	r2, [r3, #30]
 8002002:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8002006:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 800200a:	2201      	movs	r2, #1
 800200c:	841a      	strh	r2, [r3, #32]
 800200e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8002012:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8002016:	22c8      	movs	r2, #200	; 0xc8
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
 800201a:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800201e:	f6a3 5248 	subw	r2, r3, #3400	; 0xd48
 8002022:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002026:	3bc0      	subs	r3, #192	; 0xc0
 8002028:	6293      	str	r3, [r2, #40]	; 0x28
 800202a:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800202e:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8002032:	2200      	movs	r2, #0
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
       AI_NETWORK_DATA_ACTIVATIONS(activations)
     };

     //Setto le struct

       ai_input[0].n_batches = 1;
 8002036:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800203a:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 800203e:	2201      	movs	r2, #1
 8002040:	809a      	strh	r2, [r3, #4]
       ai_input[0].data = AI_HANDLE_PTR(in_data);
 8002042:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8002046:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 800204a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800204e:	3bd8      	subs	r3, #216	; 0xd8
 8002050:	6113      	str	r3, [r2, #16]
       ai_output[0].n_batches = 1;
 8002052:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8002056:	f6a3 5318 	subw	r3, r3, #3352	; 0xd18
 800205a:	2201      	movs	r2, #1
 800205c:	809a      	strh	r2, [r3, #4]
       ai_output[0].data = AI_HANDLE_PTR(out_data);
 800205e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8002062:	f6a3 5218 	subw	r2, r3, #3352	; 0xd18
 8002066:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800206a:	3be4      	subs	r3, #228	; 0xe4
 800206c:	6113      	str	r3, [r2, #16]


    //Creo un'istanza del NN

     ai_error ai_err;
     ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800206e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002072:	3be8      	subs	r3, #232	; 0xe8
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f004 fbcc 	bl	8006814 <ai_network_create>
 800207c:	4602      	mov	r2, r0
 800207e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8002082:	f6a3 534c 	subw	r3, r3, #3404	; 0xd4c
 8002086:	601a      	str	r2, [r3, #0]
     if (ai_err.type != AI_ERROR_NONE)
 8002088:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800208c:	f6a3 534c 	subw	r3, r3, #3404	; 0xd4c
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01d      	beq.n	80020d2 <main+0xfc6>
 8002096:	e015      	b.n	80020c4 <main+0xfb8>
 8002098:	2000c898 	.word	0x2000c898
 800209c:	2000c910 	.word	0x2000c910
 80020a0:	2000c8ac 	.word	0x2000c8ac
 80020a4:	2000c8c0 	.word	0x2000c8c0
 80020a8:	2000c8d4 	.word	0x2000c8d4
 80020ac:	2000c8e8 	.word	0x2000c8e8
 80020b0:	2000c8fc 	.word	0x2000c8fc
 80020b4:	0800ba44 	.word	0x0800ba44
 80020b8:	0800ba5c 	.word	0x0800ba5c
 80020bc:	40040440 	.word	0x40040440
 80020c0:	00040440 	.word	0x00040440
     {
    	 sprintf(buffer2,"Errore");
 80020c4:	4951      	ldr	r1, [pc, #324]	; (800220c <main+0x1100>)
 80020c6:	4852      	ldr	r0, [pc, #328]	; (8002210 <main+0x1104>)
 80020c8:	f007 f98a 	bl	80093e0 <siprintf>
    	 uprintf(buffer2);
 80020cc:	4850      	ldr	r0, [pc, #320]	; (8002210 <main+0x1104>)
 80020ce:	f7ff f809 	bl	80010e4 <uprintf>

     }

     //Verifico che il NN sia inizializzato correttamente

     if (!ai_network_init(network, &ai_params))
 80020d2:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80020d6:	f6a3 43e8 	subw	r3, r3, #3304	; 0xce8
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020e0:	3b48      	subs	r3, #72	; 0x48
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f004 fbab 	bl	8006840 <ai_network_init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <main+0xff8>
     {
    	 sprintf(buffer2,"Errore");
 80020f6:	4945      	ldr	r1, [pc, #276]	; (800220c <main+0x1100>)
 80020f8:	4845      	ldr	r0, [pc, #276]	; (8002210 <main+0x1104>)
 80020fa:	f007 f971 	bl	80093e0 <siprintf>
    	 uprintf(buffer2);
 80020fe:	4844      	ldr	r0, [pc, #272]	; (8002210 <main+0x1104>)
 8002100:	f7fe fff0 	bl	80010e4 <uprintf>

     }

     //Riempio il buffer di input

     	 for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8002104:	2300      	movs	r3, #0
 8002106:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800210a:	f102 0204 	add.w	r2, r2, #4
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e01f      	b.n	8002152 <main+0x1046>
         {
           ((ai_float *)in_data)[i] = (ai_float)matriceInput[1][i];
 8002112:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8002116:	f103 0304 	add.w	r3, r3, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	009a      	lsls	r2, r3, #2
 800211e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002122:	3bd8      	subs	r3, #216	; 0xd8
 8002124:	4413      	add	r3, r2
 8002126:	493b      	ldr	r1, [pc, #236]	; (8002214 <main+0x1108>)
 8002128:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800212c:	f102 0204 	add.w	r2, r2, #4
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	3206      	adds	r2, #6
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	440a      	add	r2, r1
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	601a      	str	r2, [r3, #0]
     	 for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 800213c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8002140:	f103 0304 	add.w	r3, r3, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800214c:	f102 0204 	add.w	r2, r2, #4
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8002156:	f103 0304 	add.w	r3, r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d9d8      	bls.n	8002112 <main+0x1006>
         }

      //Eseguo l'inferenza


             inferenza = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8002160:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8002164:	f6a3 43e8 	subw	r3, r3, #3304	; 0xce8
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800216e:	3b18      	subs	r3, #24
 8002170:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002174:	461a      	mov	r2, r3
 8002176:	f004 fba2 	bl	80068be <ai_network_run>
 800217a:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 800217e:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002182:	6018      	str	r0, [r3, #0]
             if (inferenza != 1) {
 8002184:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 8002188:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d006      	beq.n	80021a0 <main+0x1094>

            	 sprintf(buffer2,"Errore");
 8002192:	491e      	ldr	r1, [pc, #120]	; (800220c <main+0x1100>)
 8002194:	481e      	ldr	r0, [pc, #120]	; (8002210 <main+0x1104>)
 8002196:	f007 f923 	bl	80093e0 <siprintf>
            	 uprintf(buffer2);
 800219a:	481d      	ldr	r0, [pc, #116]	; (8002210 <main+0x1104>)
 800219c:	f7fe ffa2 	bl	80010e4 <uprintf>
             }

             //Visualizzo il risultato dell'inferenza

             float y_val;
             for(int j=0;j<3;j++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e024      	b.n	80021f4 <main+0x10e8>
             y_val = ((float *)out_data)[j];
 80021aa:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	009a      	lsls	r2, r3, #2
 80021b2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80021b6:	3be4      	subs	r3, #228	; 0xe4
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f507 423c 	add.w	r2, r7, #48128	; 0xbc00
 80021c0:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 80021c4:	6013      	str	r3, [r2, #0]
             sprintf(buffer2,"%f \n \r",y_val);
 80021c6:	f507 433c 	add.w	r3, r7, #48128	; 0xbc00
 80021ca:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	f7fe f9d2 	bl	8000578 <__aeabi_f2d>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	490f      	ldr	r1, [pc, #60]	; (8002218 <main+0x110c>)
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <main+0x1104>)
 80021dc:	f007 f900 	bl	80093e0 <siprintf>
             uprintf(buffer2);
 80021e0:	480b      	ldr	r0, [pc, #44]	; (8002210 <main+0x1104>)
 80021e2:	f7fe ff7f 	bl	80010e4 <uprintf>
             for(int j=0;j<3;j++){
 80021e6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	ddd5      	ble.n	80021aa <main+0x109e>
 80021fe:	2300      	movs	r3, #0




  /* USER CODE END 3 */
}
 8002200:	4618      	mov	r0, r3
 8002202:	f507 473d 	add.w	r7, r7, #48384	; 0xbd00
 8002206:	3750      	adds	r7, #80	; 0x50
 8002208:	46bd      	mov	sp, r7
 800220a:	bdb0      	pop	{r4, r5, r7, pc}
 800220c:	0800ba3c 	.word	0x0800ba3c
 8002210:	2000c9ac 	.word	0x2000c9ac
 8002214:	2000c910 	.word	0x2000c910
 8002218:	0800b9bc 	.word	0x0800b9bc

0800221c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b094      	sub	sp, #80	; 0x50
 8002220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	2234      	movs	r2, #52	; 0x34
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f006 fb76 	bl	800891c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <SystemClock_Config+0xdc>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a2b      	ldr	r2, [pc, #172]	; (80022f8 <SystemClock_Config+0xdc>)
 800224a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
 8002250:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <SystemClock_Config+0xdc>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800225c:	2300      	movs	r3, #0
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <SystemClock_Config+0xe0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <SystemClock_Config+0xe0>)
 8002266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <SystemClock_Config+0xe0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002278:	2301      	movs	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800227c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002280:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002282:	2302      	movs	r3, #2
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 800228c:	230c      	movs	r3, #12
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002290:	23b4      	movs	r3, #180	; 0xb4
 8002292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002294:	2302      	movs	r3, #2
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002298:	2304      	movs	r3, #4
 800229a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800229c:	2302      	movs	r3, #2
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 fd05 	bl	8003cb4 <HAL_RCC_OscConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80022b0:	f000 f826 	bl	8002300 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022b4:	f001 face 	bl	8003854 <HAL_PWREx_EnableOverDrive>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022be:	f000 f81f 	bl	8002300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c2:	230f      	movs	r3, #15
 80022c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c6:	2302      	movs	r3, #2
 80022c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	2105      	movs	r1, #5
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 fb07 	bl	80038f4 <HAL_RCC_ClockConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80022ec:	f000 f808 	bl	8002300 <Error_Handler>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3750      	adds	r7, #80	; 0x50
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40007000 	.word	0x40007000

08002300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002308:	e7fe      	b.n	8002308 <Error_Handler+0x8>
	...

0800230c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <MX_SPI1_Init+0x64>)
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <MX_SPI1_Init+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <MX_SPI1_Init+0x64>)
 8002318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800231c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_SPI1_Init+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_SPI1_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_SPI1_Init+0x64>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_SPI1_Init+0x64>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_SPI1_Init+0x64>)
 8002338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_SPI1_Init+0x64>)
 8002340:	2218      	movs	r2, #24
 8002342:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <MX_SPI1_Init+0x64>)
 8002346:	2200      	movs	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_SPI1_Init+0x64>)
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <MX_SPI1_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_SPI1_Init+0x64>)
 8002358:	220a      	movs	r2, #10
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <MX_SPI1_Init+0x64>)
 800235e:	f001 ff2d 	bl	80041bc <HAL_SPI_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002368:	f7ff ffca 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20024560 	.word	0x20024560
 8002374:	40013000 	.word	0x40013000

08002378 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <HAL_SPI_MspInit+0x84>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12b      	bne.n	80023f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_SPI_MspInit+0x88>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_SPI_MspInit+0x88>)
 80023a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_SPI_MspInit+0x88>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_SPI_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_SPI_MspInit+0x88>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_SPI_MspInit+0x88>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 80023d2:	2338      	movs	r3, #56	; 0x38
 80023d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023e2:	2305      	movs	r3, #5
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	4805      	ldr	r0, [pc, #20]	; (8002404 <HAL_SPI_MspInit+0x8c>)
 80023ee:	f001 f847 	bl	8003480 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023f2:	bf00      	nop
 80023f4:	3728      	adds	r7, #40	; 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40013000 	.word	0x40013000
 8002400:	40023800 	.word	0x40023800
 8002404:	40020400 	.word	0x40020400

08002408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_MspInit+0x4c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <HAL_MspInit+0x4c>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_MspInit+0x4c>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_MspInit+0x4c>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <HAL_MspInit+0x4c>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_MspInit+0x4c>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800245c:	e7fe      	b.n	800245c <NMI_Handler+0x4>

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f000 fb22 	bl	8002aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80024b0:	2008      	movs	r0, #8
 80024b2:	f001 f9ab 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}

080024ba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80024be:	2010      	movs	r0, #16
 80024c0:	f001 f9a4 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA1_Stream5_IRQHandler+0x10>)
 80024ce:	f000 fd9b 	bl	8003008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2002468c 	.word	0x2002468c

080024dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <TIM2_IRQHandler+0x10>)
 80024e2:	f002 fcf2 	bl	8004eca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200245bc 	.word	0x200245bc

080024f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <USART2_IRQHandler+0x10>)
 80024f6:	f003 f993 	bl	8005820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20024648 	.word	0x20024648

08002504 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return 1;
 8002508:	2301      	movs	r3, #1
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_kill>:

int _kill(int pid, int sig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800251e:	f006 f9bd 	bl	800889c <__errno>
 8002522:	4603      	mov	r3, r0
 8002524:	2216      	movs	r2, #22
 8002526:	601a      	str	r2, [r3, #0]
  return -1;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_exit>:

void _exit (int status)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ffe7 	bl	8002514 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002546:	e7fe      	b.n	8002546 <_exit+0x12>

08002548 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e00a      	b.n	8002570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800255a:	f3af 8000 	nop.w
 800255e:	4601      	mov	r1, r0
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	60ba      	str	r2, [r7, #8]
 8002566:	b2ca      	uxtb	r2, r1
 8002568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	dbf0      	blt.n	800255a <_read+0x12>
  }

  return len;
 8002578:	687b      	ldr	r3, [r7, #4]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e009      	b.n	80025a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	60ba      	str	r2, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dbf1      	blt.n	8002594 <_write+0x12>
  }
  return len;
 80025b0:	687b      	ldr	r3, [r7, #4]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_close>:

int _close(int file)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e2:	605a      	str	r2, [r3, #4]
  return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_isatty>:

int _isatty(int file)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800262c:	4a14      	ldr	r2, [pc, #80]	; (8002680 <_sbrk+0x5c>)
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <_sbrk+0x60>)
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <_sbrk+0x64>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <_sbrk+0x68>)
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d207      	bcs.n	8002664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002654:	f006 f922 	bl	800889c <__errno>
 8002658:	4603      	mov	r3, r0
 800265a:	220c      	movs	r2, #12
 800265c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	e009      	b.n	8002678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <_sbrk+0x64>)
 8002674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20050000 	.word	0x20050000
 8002684:	00001000 	.word	0x00001000
 8002688:	200245b8 	.word	0x200245b8
 800268c:	20024788 	.word	0x20024788

08002690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <SystemInit+0x20>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <SystemInit+0x20>)
 800269c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c8:	463b      	mov	r3, r7
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <MX_TIM2_Init+0x98>)
 80026d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <MX_TIM2_Init+0x98>)
 80026da:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80026de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MX_TIM2_Init+0x98>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <MX_TIM2_Init+0x98>)
 80026e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <MX_TIM2_Init+0x98>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <MX_TIM2_Init+0x98>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026fa:	4814      	ldr	r0, [pc, #80]	; (800274c <MX_TIM2_Init+0x98>)
 80026fc:	f002 fb06 	bl	8004d0c <HAL_TIM_Base_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002706:	f7ff fdfb 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800270a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4619      	mov	r1, r3
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <MX_TIM2_Init+0x98>)
 8002718:	f002 fcdf 	bl	80050da <HAL_TIM_ConfigClockSource>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002722:	f7ff fded 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800272e:	463b      	mov	r3, r7
 8002730:	4619      	mov	r1, r3
 8002732:	4806      	ldr	r0, [pc, #24]	; (800274c <MX_TIM2_Init+0x98>)
 8002734:	f002 ff04 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800273e:	f7ff fddf 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200245bc 	.word	0x200245bc

08002750 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d115      	bne.n	800278e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_TIM_Base_MspInit+0x48>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <HAL_TIM_Base_MspInit+0x48>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_TIM_Base_MspInit+0x48>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	201c      	movs	r0, #28
 8002784:	f000 faad 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002788:	201c      	movs	r0, #28
 800278a:	f000 fac6 	bl	8002d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800

0800279c <MX_UART5_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <MX_UART5_Init+0x50>)
 80027a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027a8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80027ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027c2:	220c      	movs	r2, #12
 80027c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_UART5_Init+0x4c>)
 80027d4:	f002 ff44 	bl	8005660 <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80027de:	f7ff fd8f 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20024604 	.word	0x20024604
 80027ec:	40005000 	.word	0x40005000

080027f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <MX_USART2_UART_Init+0x4c>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <MX_USART2_UART_Init+0x50>)
 80027f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <MX_USART2_UART_Init+0x4c>)
 80027fc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_USART2_UART_Init+0x4c>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002816:	220c      	movs	r2, #12
 8002818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <MX_USART2_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002828:	f002 ff1a 	bl	8005660 <HAL_UART_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002832:	f7ff fd65 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20024648 	.word	0x20024648
 8002840:	40004400 	.word	0x40004400

08002844 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5d      	ldr	r2, [pc, #372]	; (80029d8 <HAL_UART_MspInit+0x194>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d14b      	bne.n	80028fe <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	4b5c      	ldr	r3, [pc, #368]	; (80029dc <HAL_UART_MspInit+0x198>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a5b      	ldr	r2, [pc, #364]	; (80029dc <HAL_UART_MspInit+0x198>)
 8002870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b59      	ldr	r3, [pc, #356]	; (80029dc <HAL_UART_MspInit+0x198>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	4b55      	ldr	r3, [pc, #340]	; (80029dc <HAL_UART_MspInit+0x198>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a54      	ldr	r2, [pc, #336]	; (80029dc <HAL_UART_MspInit+0x198>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b52      	ldr	r3, [pc, #328]	; (80029dc <HAL_UART_MspInit+0x198>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b4e      	ldr	r3, [pc, #312]	; (80029dc <HAL_UART_MspInit+0x198>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a4d      	ldr	r2, [pc, #308]	; (80029dc <HAL_UART_MspInit+0x198>)
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_UART_MspInit+0x198>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028cc:	2308      	movs	r3, #8
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	4842      	ldr	r0, [pc, #264]	; (80029e0 <HAL_UART_MspInit+0x19c>)
 80028d8:	f000 fdd2 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028dc:	2304      	movs	r3, #4
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028ec:	2308      	movs	r3, #8
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	483b      	ldr	r0, [pc, #236]	; (80029e4 <HAL_UART_MspInit+0x1a0>)
 80028f8:	f000 fdc2 	bl	8003480 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028fc:	e067      	b.n	80029ce <HAL_UART_MspInit+0x18a>
  else if(uartHandle->Instance==USART2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a39      	ldr	r2, [pc, #228]	; (80029e8 <HAL_UART_MspInit+0x1a4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d162      	bne.n	80029ce <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	4b33      	ldr	r3, [pc, #204]	; (80029dc <HAL_UART_MspInit+0x198>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	4a32      	ldr	r2, [pc, #200]	; (80029dc <HAL_UART_MspInit+0x198>)
 8002912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002916:	6413      	str	r3, [r2, #64]	; 0x40
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_UART_MspInit+0x198>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <HAL_UART_MspInit+0x198>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <HAL_UART_MspInit+0x198>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_UART_MspInit+0x198>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002940:	2360      	movs	r3, #96	; 0x60
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002950:	2307      	movs	r3, #7
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	4619      	mov	r1, r3
 800295a:	4822      	ldr	r0, [pc, #136]	; (80029e4 <HAL_UART_MspInit+0x1a0>)
 800295c:	f000 fd90 	bl	8003480 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 8002962:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <HAL_UART_MspInit+0x1ac>)
 8002964:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 8002968:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800296c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800296e:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002974:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800297a:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 800297c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002980:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 8002990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002994:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029a2:	4812      	ldr	r0, [pc, #72]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 80029a4:	f000 f9f0 	bl	8002d88 <HAL_DMA_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80029ae:	f7ff fca7 	bl	8002300 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
 80029b8:	4a0c      	ldr	r2, [pc, #48]	; (80029ec <HAL_UART_MspInit+0x1a8>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	2026      	movs	r0, #38	; 0x26
 80029c4:	f000 f98d 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029c8:	2026      	movs	r0, #38	; 0x26
 80029ca:	f000 f9a6 	bl	8002d1a <HAL_NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3730      	adds	r7, #48	; 0x30
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40005000 	.word	0x40005000
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020800 	.word	0x40020800
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40004400 	.word	0x40004400
 80029ec:	2002468c 	.word	0x2002468c
 80029f0:	40026088 	.word	0x40026088

080029f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029f8:	480d      	ldr	r0, [pc, #52]	; (8002a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029fa:	490e      	ldr	r1, [pc, #56]	; (8002a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029fc:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a00:	e002      	b.n	8002a08 <LoopCopyDataInit>

08002a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a06:	3304      	adds	r3, #4

08002a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a0c:	d3f9      	bcc.n	8002a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a10:	4c0b      	ldr	r4, [pc, #44]	; (8002a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a14:	e001      	b.n	8002a1a <LoopFillZerobss>

08002a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a18:	3204      	adds	r2, #4

08002a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a1c:	d3fb      	bcc.n	8002a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a1e:	f7ff fe37 	bl	8002690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a22:	f005 ff41 	bl	80088a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a26:	f7fe fb71 	bl	800110c <main>
  bx  lr    
 8002a2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a34:	20000870 	.word	0x20000870
  ldr r2, =_sidata
 8002a38:	080154fc 	.word	0x080154fc
  ldr r2, =_sbss
 8002a3c:	20000870 	.word	0x20000870
  ldr r4, =_ebss
 8002a40:	20024784 	.word	0x20024784

08002a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a44:	e7fe      	b.n	8002a44 <ADC_IRQHandler>
	...

08002a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_Init+0x40>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <HAL_Init+0x40>)
 8002a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_Init+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <HAL_Init+0x40>)
 8002a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_Init+0x40>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <HAL_Init+0x40>)
 8002a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a70:	2003      	movs	r0, #3
 8002a72:	f000 f92b 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a76:	200f      	movs	r0, #15
 8002a78:	f000 f808 	bl	8002a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a7c:	f7ff fcc4 	bl	8002408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x54>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_InitTick+0x58>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f943 	bl	8002d36 <HAL_SYSTICK_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00e      	b.n	8002ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d80a      	bhi.n	8002ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f000 f90b 	bl	8002ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_InitTick+0x5c>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_IncTick+0x20>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_IncTick+0x24>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_IncTick+0x24>)
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000008 	.word	0x20000008
 8002b10:	200246ec 	.word	0x200246ec

08002b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return uwTick;
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_GetTick+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	200246ec 	.word	0x200246ec

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <__NVIC_EnableIRQ+0x38>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db0a      	blt.n	8002bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <__NVIC_SetPriority+0x4c>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf4:	e00a      	b.n	8002c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4908      	ldr	r1, [pc, #32]	; (8002c1c <__NVIC_SetPriority+0x50>)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3b04      	subs	r3, #4
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	440b      	add	r3, r1
 8002c0a:	761a      	strb	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2304      	movcs	r3, #4
 8002c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d902      	bls.n	8002c50 <NVIC_EncodePriority+0x30>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b03      	subs	r3, #3
 8002c4e:	e000      	b.n	8002c52 <NVIC_EncodePriority+0x32>
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	4313      	orrs	r3, r2
         );
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c98:	d301      	bcc.n	8002c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <SysTick_Config+0x40>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	f7ff ff8e 	bl	8002bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000e010 	.word	0xe000e010

08002ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff29 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf4:	f7ff ff3e 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff8e 	bl	8002c20 <NVIC_EncodePriority>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff5d 	bl	8002bcc <__NVIC_SetPriority>
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff31 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ffa2 	bl	8002c88 <SysTick_Config>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e00e      	b.n	8002d7e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	795b      	ldrb	r3, [r3, #5]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe f8c7 	bl	8000f04 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff febe 	bl	8002b14 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e099      	b.n	8002ed8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc4:	e00f      	b.n	8002de6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dc6:	f7ff fea5 	bl	8002b14 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d908      	bls.n	8002de6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e078      	b.n	8002ed8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e8      	bne.n	8002dc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_DMA_Init+0x158>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0307 	bic.w	r3, r3, #7
 8002e66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d117      	bne.n	8002eaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fa7b 	bl	8003388 <DMA_CheckFifoParam>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e016      	b.n	8002ed8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa32 	bl	800331c <DMA_CalcBaseAndBitshift>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	223f      	movs	r2, #63	; 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	f010803f 	.word	0xf010803f

08002ee4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ef2:	f7ff fe0f 	bl	8002b14 <HAL_GetTick>
 8002ef6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d008      	beq.n	8002f16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e052      	b.n	8002fbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0216 	bic.w	r2, r2, #22
 8002f24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <HAL_DMA_Abort+0x62>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0208 	bic.w	r2, r2, #8
 8002f54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f66:	e013      	b.n	8002f90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f68:	f7ff fdd4 	bl	8002b14 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d90c      	bls.n	8002f90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e015      	b.n	8002fbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e4      	bne.n	8002f68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	223f      	movs	r2, #63	; 0x3f
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00c      	b.n	8002ffc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2205      	movs	r2, #5
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003014:	4b8e      	ldr	r3, [pc, #568]	; (8003250 <HAL_DMA_IRQHandler+0x248>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a8e      	ldr	r2, [pc, #568]	; (8003254 <HAL_DMA_IRQHandler+0x24c>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0a9b      	lsrs	r3, r3, #10
 8003020:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	2208      	movs	r2, #8
 8003034:	409a      	lsls	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01a      	beq.n	8003074 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	2208      	movs	r2, #8
 8003062:	409a      	lsls	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	2201      	movs	r2, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d012      	beq.n	80030aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	2201      	movs	r2, #1
 8003098:	409a      	lsls	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	f043 0202 	orr.w	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	2204      	movs	r2, #4
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d012      	beq.n	80030e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	2204      	movs	r2, #4
 80030ce:	409a      	lsls	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f043 0204 	orr.w	r2, r3, #4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	2210      	movs	r2, #16
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d043      	beq.n	8003178 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d03c      	beq.n	8003178 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	2210      	movs	r2, #16
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d018      	beq.n	800314a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d108      	bne.n	8003138 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d024      	beq.n	8003178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
 8003136:	e01f      	b.n	8003178 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01b      	beq.n	8003178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
 8003148:	e016      	b.n	8003178 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0208 	bic.w	r2, r2, #8
 8003166:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	2220      	movs	r2, #32
 800317e:	409a      	lsls	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 808f 	beq.w	80032a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8087 	beq.w	80032a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	2220      	movs	r2, #32
 80031a0:	409a      	lsls	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b05      	cmp	r3, #5
 80031b0:	d136      	bne.n	8003220 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0216 	bic.w	r2, r2, #22
 80031c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x1da>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0208 	bic.w	r2, r2, #8
 80031f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	223f      	movs	r2, #63	; 0x3f
 80031f8:	409a      	lsls	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	2b00      	cmp	r3, #0
 8003214:	d07e      	beq.n	8003314 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
        }
        return;
 800321e:	e079      	b.n	8003314 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01d      	beq.n	800326a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10d      	bne.n	8003258 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	2b00      	cmp	r3, #0
 8003242:	d031      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
 800324c:	e02c      	b.n	80032a8 <HAL_DMA_IRQHandler+0x2a0>
 800324e:	bf00      	nop
 8003250:	20000000 	.word	0x20000000
 8003254:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
 8003268:	e01e      	b.n	80032a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10f      	bne.n	8003298 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0210 	bic.w	r2, r2, #16
 8003286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d032      	beq.n	8003316 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d022      	beq.n	8003302 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2205      	movs	r2, #5
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3301      	adds	r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d307      	bcc.n	80032f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f2      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x2cc>
 80032ee:	e000      	b.n	80032f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
 8003312:	e000      	b.n	8003316 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003314:	bf00      	nop
    }
  }
}
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	3b10      	subs	r3, #16
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <DMA_CalcBaseAndBitshift+0x64>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003336:	4a13      	ldr	r2, [pc, #76]	; (8003384 <DMA_CalcBaseAndBitshift+0x68>)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d909      	bls.n	800335e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	659a      	str	r2, [r3, #88]	; 0x58
 800335c:	e007      	b.n	800336e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	aaaaaaab 	.word	0xaaaaaaab
 8003384:	0800ba90 	.word	0x0800ba90

08003388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11f      	bne.n	80033e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d856      	bhi.n	8003456 <DMA_CheckFifoParam+0xce>
 80033a8:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <DMA_CheckFifoParam+0x28>)
 80033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ae:	bf00      	nop
 80033b0:	080033c1 	.word	0x080033c1
 80033b4:	080033d3 	.word	0x080033d3
 80033b8:	080033c1 	.word	0x080033c1
 80033bc:	08003457 	.word	0x08003457
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d046      	beq.n	800345a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d0:	e043      	b.n	800345a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033da:	d140      	bne.n	800345e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e0:	e03d      	b.n	800345e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ea:	d121      	bne.n	8003430 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d837      	bhi.n	8003462 <DMA_CheckFifoParam+0xda>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <DMA_CheckFifoParam+0x70>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	08003409 	.word	0x08003409
 80033fc:	0800340f 	.word	0x0800340f
 8003400:	08003409 	.word	0x08003409
 8003404:	08003421 	.word	0x08003421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
      break;
 800340c:	e030      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d025      	beq.n	8003466 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341e:	e022      	b.n	8003466 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003428:	d11f      	bne.n	800346a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800342e:	e01c      	b.n	800346a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d903      	bls.n	800343e <DMA_CheckFifoParam+0xb6>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d003      	beq.n	8003444 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800343c:	e018      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      break;
 8003442:	e015      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e00b      	b.n	800346e <DMA_CheckFifoParam+0xe6>
      break;
 8003456:	bf00      	nop
 8003458:	e00a      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
      break;
 800345a:	bf00      	nop
 800345c:	e008      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
      break;
 800345e:	bf00      	nop
 8003460:	e006      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
      break;
 8003462:	bf00      	nop
 8003464:	e004      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
      break;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
      break;   
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
      break;
 800346e:	bf00      	nop
    }
  } 
  
  return status; 
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	e177      	b.n	800378c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800349c:	2201      	movs	r2, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f040 8166 	bne.w	8003786 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d005      	beq.n	80034d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d130      	bne.n	8003534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003508:	2201      	movs	r2, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 0201 	and.w	r2, r3, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b03      	cmp	r3, #3
 800353e:	d017      	beq.n	8003570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d123      	bne.n	80035c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	220f      	movs	r2, #15
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	08da      	lsrs	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3208      	adds	r2, #8
 80035be:	69b9      	ldr	r1, [r7, #24]
 80035c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80c0 	beq.w	8003786 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	4a65      	ldr	r2, [pc, #404]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003614:	6453      	str	r3, [r2, #68]	; 0x44
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003622:	4a61      	ldr	r2, [pc, #388]	; (80037a8 <HAL_GPIO_Init+0x328>)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_GPIO_Init+0x32c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d037      	beq.n	80036be <HAL_GPIO_Init+0x23e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_GPIO_Init+0x330>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d031      	beq.n	80036ba <HAL_GPIO_Init+0x23a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a56      	ldr	r2, [pc, #344]	; (80037b4 <HAL_GPIO_Init+0x334>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02b      	beq.n	80036b6 <HAL_GPIO_Init+0x236>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a55      	ldr	r2, [pc, #340]	; (80037b8 <HAL_GPIO_Init+0x338>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d025      	beq.n	80036b2 <HAL_GPIO_Init+0x232>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a54      	ldr	r2, [pc, #336]	; (80037bc <HAL_GPIO_Init+0x33c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01f      	beq.n	80036ae <HAL_GPIO_Init+0x22e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a53      	ldr	r2, [pc, #332]	; (80037c0 <HAL_GPIO_Init+0x340>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d019      	beq.n	80036aa <HAL_GPIO_Init+0x22a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_GPIO_Init+0x344>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_GPIO_Init+0x226>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_GPIO_Init+0x348>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00d      	beq.n	80036a2 <HAL_GPIO_Init+0x222>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x34c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <HAL_GPIO_Init+0x21e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x350>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_GPIO_Init+0x21a>
 8003696:	2309      	movs	r3, #9
 8003698:	e012      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 800369a:	230a      	movs	r3, #10
 800369c:	e010      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 800369e:	2308      	movs	r3, #8
 80036a0:	e00e      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036a2:	2307      	movs	r3, #7
 80036a4:	e00c      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036a6:	2306      	movs	r3, #6
 80036a8:	e00a      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e008      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036b2:	2303      	movs	r3, #3
 80036b4:	e004      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036be:	2300      	movs	r3, #0
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	f002 0203 	and.w	r2, r2, #3
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	4093      	lsls	r3, r2
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d0:	4935      	ldr	r1, [pc, #212]	; (80037a8 <HAL_GPIO_Init+0x328>)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_GPIO_Init+0x354>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003702:	4a34      	ldr	r2, [pc, #208]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3301      	adds	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	f67f ae84 	bls.w	800349c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40020800 	.word	0x40020800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40021400 	.word	0x40021400
 80037c4:	40021800 	.word	0x40021800
 80037c8:	40021c00 	.word	0x40021c00
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40022400 	.word	0x40022400
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f806 	bl	800383c <HAL_GPIO_EXTI_Callback>
  }
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40013c00 	.word	0x40013c00

0800383c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003880:	f7ff f948 	bl	8002b14 <HAL_GetTick>
 8003884:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003886:	e009      	b.n	800389c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003888:	f7ff f944 	bl	8002b14 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003896:	d901      	bls.n	800389c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e01f      	b.n	80038dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <HAL_PWREx_EnableOverDrive+0x98>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a8:	d1ee      	bne.n	8003888 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b0:	f7ff f930 	bl	8002b14 <HAL_GetTick>
 80038b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038b6:	e009      	b.n	80038cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038b8:	f7ff f92c 	bl	8002b14 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c6:	d901      	bls.n	80038cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e007      	b.n	80038dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038cc:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_PWREx_EnableOverDrive+0x98>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038d8:	d1ee      	bne.n	80038b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40023800 	.word	0x40023800
 80038e8:	420e0040 	.word	0x420e0040
 80038ec:	40007000 	.word	0x40007000
 80038f0:	420e0044 	.word	0x420e0044

080038f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0cc      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b68      	ldr	r3, [pc, #416]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d90c      	bls.n	8003930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b8      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a58      	ldr	r2, [pc, #352]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a52      	ldr	r2, [pc, #328]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800396a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396c:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	494d      	ldr	r1, [pc, #308]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d044      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d119      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e07f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e067      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4934      	ldr	r1, [pc, #208]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7ff f896 	bl	8002b14 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7ff f892 	bl	8002b14 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e04f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d20c      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b22      	ldr	r3, [pc, #136]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e032      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4916      	ldr	r1, [pc, #88]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a7a:	f000 f821 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	5ccb      	ldrb	r3, [r1, r3]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fff6 	bl	8002a8c <HAL_InitTick>

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	0800ba78 	.word	0x0800ba78
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	20000004 	.word	0x20000004

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac4:	b090      	sub	sp, #64	; 0x40
 8003ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
 8003acc:	2300      	movs	r3, #0
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d00d      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x40>
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	f200 80a1 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x16c>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x34>
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x3a>
 8003af2:	e09b      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003af8:	e09b      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003afa:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003afe:	e098      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b00:	4b4f      	ldr	r3, [pc, #316]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b0a:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b16:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	627a      	str	r2, [r7, #36]	; 0x24
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b2c:	fb03 f201 	mul.w	r2, r3, r1
 8003b30:	2300      	movs	r3, #0
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	4a43      	ldr	r2, [pc, #268]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b40:	460a      	mov	r2, r1
 8003b42:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b46:	4413      	add	r3, r2
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	61fa      	str	r2, [r7, #28]
 8003b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b5a:	f7fd f83d 	bl	8000bd8 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4613      	mov	r3, r2
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b66:	e053      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b68:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	099b      	lsrs	r3, r3, #6
 8003b6e:	2200      	movs	r2, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	617a      	str	r2, [r7, #20]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b7a:	f04f 0b00 	mov.w	fp, #0
 8003b7e:	4652      	mov	r2, sl
 8003b80:	465b      	mov	r3, fp
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	0159      	lsls	r1, r3, #5
 8003b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b90:	0150      	lsls	r0, r2, #5
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	ebb2 080a 	subs.w	r8, r2, sl
 8003b9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003baa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bb2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bb6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	00eb      	lsls	r3, r5, #3
 8003bc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc8:	00e2      	lsls	r2, r4, #3
 8003bca:	4614      	mov	r4, r2
 8003bcc:	461d      	mov	r5, r3
 8003bce:	eb14 030a 	adds.w	r3, r4, sl
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	eb45 030b 	adc.w	r3, r5, fp
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c04:	f7fc ffe8 	bl	8000bd8 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3740      	adds	r7, #64	; 0x40
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	016e3600 	.word	0x016e3600

08003c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000000 	.word	0x20000000

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800ba88 	.word	0x0800ba88

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c90:	f7ff ffdc 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	0b5b      	lsrs	r3, r3, #13
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	0800ba88 	.word	0x0800ba88

08003cb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e273      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d075      	beq.n	8003dbe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cd2:	4b88      	ldr	r3, [pc, #544]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cde:	4b85      	ldr	r3, [pc, #532]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d112      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf6:	d10b      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	4b7e      	ldr	r3, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d05b      	beq.n	8003dbc <HAL_RCC_OscConfig+0x108>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d157      	bne.n	8003dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e24e      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d106      	bne.n	8003d28 <HAL_RCC_OscConfig+0x74>
 8003d1a:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a75      	ldr	r2, [pc, #468]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e01d      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x98>
 8003d32:	4b70      	ldr	r3, [pc, #448]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6f      	ldr	r2, [pc, #444]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6c      	ldr	r2, [pc, #432]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e00b      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d4c:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a68      	ldr	r2, [pc, #416]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a65      	ldr	r2, [pc, #404]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fed2 	bl	8002b14 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fe fece 	bl	8002b14 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e213      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b5b      	ldr	r3, [pc, #364]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0xc0>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe febe 	bl	8002b14 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe feba 	bl	8002b14 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1ff      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0xe8>
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d063      	beq.n	8003e92 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d11c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1d3      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4937      	ldr	r1, [pc, #220]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	e03a      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x244>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fe fe73 	bl	8002b14 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fe fe6f 	bl	8002b14 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1b4      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4925      	ldr	r1, [pc, #148]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_OscConfig+0x244>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fe fe52 	bl	8002b14 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e74:	f7fe fe4e 	bl	8002b14 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e193      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d036      	beq.n	8003f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_RCC_OscConfig+0x248>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe fe32 	bl	8002b14 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fe2e 	bl	8002b14 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e173      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x200>
 8003ed2:	e01b      	b.n	8003f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_OscConfig+0x248>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fe fe1b 	bl	8002b14 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	e00e      	b.n	8003f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7fe fe17 	bl	8002b14 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d907      	bls.n	8003f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e15c      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	42470000 	.word	0x42470000
 8003efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	4b8a      	ldr	r3, [pc, #552]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ea      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8097 	beq.w	8004048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1e:	4b83      	ldr	r3, [pc, #524]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a7e      	ldr	r2, [pc, #504]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b7c      	ldr	r3, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b79      	ldr	r3, [pc, #484]	; (8004130 <HAL_RCC_OscConfig+0x47c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x47c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a75      	ldr	r2, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x47c>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fe fdd7 	bl	8002b14 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fe fdd3 	bl	8002b14 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e118      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCC_OscConfig+0x47c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x2ea>
 8003f90:	4b66      	ldr	r3, [pc, #408]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a65      	ldr	r2, [pc, #404]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	e01c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x324>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x30c>
 8003fa6:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a60      	ldr	r2, [pc, #384]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb2:	4b5e      	ldr	r3, [pc, #376]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a5d      	ldr	r2, [pc, #372]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x324>
 8003fc0:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a59      	ldr	r2, [pc, #356]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
 8003fcc:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8003fd2:	f023 0304 	bic.w	r3, r3, #4
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fe fd98 	bl	8002b14 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fe fd94 	bl	8002b14 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0d7      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	4b4b      	ldr	r3, [pc, #300]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0ee      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x334>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fe fd82 	bl	8002b14 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004012:	e00a      	b.n	800402a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fe fd7e 	bl	8002b14 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0c1      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402a:	4b40      	ldr	r3, [pc, #256]	; (800412c <HAL_RCC_OscConfig+0x478>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ee      	bne.n	8004014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d105      	bne.n	8004048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403c:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_OscConfig+0x478>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	4a3a      	ldr	r2, [pc, #232]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8004042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80ad 	beq.w	80041ac <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004052:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b08      	cmp	r3, #8
 800405c:	d060      	beq.n	8004120 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d145      	bne.n	80040f2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b33      	ldr	r3, [pc, #204]	; (8004134 <HAL_RCC_OscConfig+0x480>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fe fd52 	bl	8002b14 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe fd4e 	bl	8002b14 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e093      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	019b      	lsls	r3, r3, #6
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	491b      	ldr	r1, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x478>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x480>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fe fd23 	bl	8002b14 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fe fd1f 	bl	8002b14 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e064      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_OscConfig+0x478>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x41e>
 80040f0:	e05c      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCC_OscConfig+0x480>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fe fd0c 	bl	8002b14 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004100:	f7fe fd08 	bl	8002b14 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e04d      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x44c>
 800411e:	e045      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e040      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
 800412c:	40023800 	.word	0x40023800
 8004130:	40007000 	.word	0x40007000
 8004134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004138:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <HAL_RCC_OscConfig+0x504>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d030      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d129      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d122      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800416e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004170:	4293      	cmp	r3, r2
 8004172:	d119      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	3b01      	subs	r3, #1
 8004182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d10f      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800

080041bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07b      	b.n	80042c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041de:	d009      	beq.n	80041f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	61da      	str	r2, [r3, #28]
 80041e6:	e005      	b.n	80041f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe f8b2 	bl	8002378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	ea42 0103 	orr.w	r1, r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0104 	and.w	r1, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0210 	and.w	r2, r3, #16
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b088      	sub	sp, #32
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_SPI_Transmit+0x22>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e126      	b.n	800453e <HAL_SPI_Transmit+0x270>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f8:	f7fe fc0c 	bl	8002b14 <HAL_GetTick>
 80042fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d002      	beq.n	8004314 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800430e:	2302      	movs	r3, #2
 8004310:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004312:	e10b      	b.n	800452c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_SPI_Transmit+0x52>
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004324:	e102      	b.n	800452c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	d10f      	bne.n	800438e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d007      	beq.n	80043ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b4:	d14b      	bne.n	800444e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Transmit+0xf6>
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d13e      	bne.n	8004442 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	881a      	ldrh	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	1c9a      	adds	r2, r3, #2
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e8:	e02b      	b.n	8004442 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d112      	bne.n	800441e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	86da      	strh	r2, [r3, #54]	; 0x36
 800441c:	e011      	b.n	8004442 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441e:	f7fe fb79 	bl	8002b14 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d803      	bhi.n	8004436 <HAL_SPI_Transmit+0x168>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d102      	bne.n	800443c <HAL_SPI_Transmit+0x16e>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004440:	e074      	b.n	800452c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ce      	bne.n	80043ea <HAL_SPI_Transmit+0x11c>
 800444c:	e04c      	b.n	80044e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0x18e>
 8004456:	8afb      	ldrh	r3, [r7, #22]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d140      	bne.n	80044de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	7812      	ldrb	r2, [r2, #0]
 8004468:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004482:	e02c      	b.n	80044de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d113      	bne.n	80044ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80044b8:	e011      	b.n	80044de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ba:	f7fe fb2b 	bl	8002b14 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d803      	bhi.n	80044d2 <HAL_SPI_Transmit+0x204>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_Transmit+0x20a>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044dc:	e026      	b.n	800452c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1cd      	bne.n	8004484 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fbcb 	bl	8004c88 <SPI_EndRxTxTransaction>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e000      	b.n	800452c <HAL_SPI_Transmit+0x25e>
  }

error:
 800452a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800453c:	7ffb      	ldrb	r3, [r7, #31]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b088      	sub	sp, #32
 800454a:	af02      	add	r7, sp, #8
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004562:	d112      	bne.n	800458a <HAL_SPI_Receive+0x44>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10e      	bne.n	800458a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2204      	movs	r2, #4
 8004570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004574:	88fa      	ldrh	r2, [r7, #6]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	4613      	mov	r3, r2
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f8f1 	bl	8004768 <HAL_SPI_TransmitReceive>
 8004586:	4603      	mov	r3, r0
 8004588:	e0ea      	b.n	8004760 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_SPI_Receive+0x52>
 8004594:	2302      	movs	r3, #2
 8004596:	e0e3      	b.n	8004760 <HAL_SPI_Receive+0x21a>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a0:	f7fe fab8 	bl	8002b14 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d002      	beq.n	80045b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
 80045b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045b6:	e0ca      	b.n	800474e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_SPI_Receive+0x7e>
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045c8:	e0c1      	b.n	800474e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2204      	movs	r2, #4
 80045ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004610:	d10f      	bne.n	8004632 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004620:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004630:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d007      	beq.n	8004650 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800464e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d162      	bne.n	800471e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004658:	e02e      	b.n	80046b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b01      	cmp	r3, #1
 8004666:	d115      	bne.n	8004694 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f103 020c 	add.w	r2, r3, #12
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	7812      	ldrb	r2, [r2, #0]
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004692:	e011      	b.n	80046b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004694:	f7fe fa3e 	bl	8002b14 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d803      	bhi.n	80046ac <HAL_SPI_Receive+0x166>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d102      	bne.n	80046b2 <HAL_SPI_Receive+0x16c>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046b6:	e04a      	b.n	800474e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1cb      	bne.n	800465a <HAL_SPI_Receive+0x114>
 80046c2:	e031      	b.n	8004728 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d113      	bne.n	80046fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	b292      	uxth	r2, r2
 80046de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	1c9a      	adds	r2, r3, #2
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f8:	e011      	b.n	800471e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046fa:	f7fe fa0b 	bl	8002b14 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d803      	bhi.n	8004712 <HAL_SPI_Receive+0x1cc>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d102      	bne.n	8004718 <HAL_SPI_Receive+0x1d2>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800471c:	e017      	b.n	800474e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1cd      	bne.n	80046c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fa45 	bl	8004bbc <SPI_EndRxTransaction>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
 800474a:	e000      	b.n	800474e <HAL_SPI_Receive+0x208>
  }

error :
 800474c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004776:	2301      	movs	r3, #1
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_SPI_TransmitReceive+0x26>
 800478a:	2302      	movs	r3, #2
 800478c:	e18a      	b.n	8004aa4 <HAL_SPI_TransmitReceive+0x33c>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004796:	f7fe f9bd 	bl	8002b14 <HAL_GetTick>
 800479a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047ac:	887b      	ldrh	r3, [r7, #2]
 80047ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d00f      	beq.n	80047d8 <HAL_SPI_TransmitReceive+0x70>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047be:	d107      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x68>
 80047c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d003      	beq.n	80047d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047d6:	e15b      	b.n	8004a90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x82>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x82>
 80047e4:	887b      	ldrh	r3, [r7, #2]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047f0:	e14e      	b.n	8004a90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d003      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2205      	movs	r2, #5
 8004802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	887a      	ldrh	r2, [r7, #2]
 8004816:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	887a      	ldrh	r2, [r7, #2]
 8004828:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	887a      	ldrh	r2, [r7, #2]
 800482e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d007      	beq.n	800485a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004862:	d178      	bne.n	8004956 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_SPI_TransmitReceive+0x10a>
 800486c:	8b7b      	ldrh	r3, [r7, #26]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d166      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	881a      	ldrh	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	1c9a      	adds	r2, r3, #2
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004896:	e053      	b.n	8004940 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d11b      	bne.n	80048de <HAL_SPI_TransmitReceive+0x176>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d016      	beq.n	80048de <HAL_SPI_TransmitReceive+0x176>
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d113      	bne.n	80048de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	1c9a      	adds	r2, r3, #2
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d119      	bne.n	8004920 <HAL_SPI_TransmitReceive+0x1b8>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d014      	beq.n	8004920 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	b292      	uxth	r2, r2
 8004902:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	1c9a      	adds	r2, r3, #2
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800491c:	2301      	movs	r3, #1
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004920:	f7fe f8f8 	bl	8002b14 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492c:	429a      	cmp	r2, r3
 800492e:	d807      	bhi.n	8004940 <HAL_SPI_TransmitReceive+0x1d8>
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d003      	beq.n	8004940 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800493e:	e0a7      	b.n	8004a90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1a6      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x130>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1a1      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x130>
 8004954:	e07c      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x1fc>
 800495e:	8b7b      	ldrh	r3, [r7, #26]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d16b      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	7812      	ldrb	r2, [r2, #0]
 8004970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800498a:	e057      	b.n	8004a3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d11c      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x26c>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d017      	beq.n	80049d4 <HAL_SPI_TransmitReceive+0x26c>
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d114      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	7812      	ldrb	r2, [r2, #0]
 80049b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d119      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x2ae>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d014      	beq.n	8004a16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a12:	2301      	movs	r3, #1
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a16:	f7fe f87d 	bl	8002b14 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d803      	bhi.n	8004a2e <HAL_SPI_TransmitReceive+0x2c6>
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d102      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x2cc>
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d103      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a3a:	e029      	b.n	8004a90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1a2      	bne.n	800498c <HAL_SPI_TransmitReceive+0x224>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d19d      	bne.n	800498c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f917 	bl	8004c88 <SPI_EndRxTxTransaction>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a6c:	e010      	b.n	8004a90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	e000      	b.n	8004a90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3730      	adds	r7, #48	; 0x30
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004abc:	f7fe f82a 	bl	8002b14 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	4413      	add	r3, r2
 8004aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004acc:	f7fe f822 	bl	8002b14 <HAL_GetTick>
 8004ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ad2:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	015b      	lsls	r3, r3, #5
 8004ad8:	0d1b      	lsrs	r3, r3, #20
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ae2:	e054      	b.n	8004b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d050      	beq.n	8004b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004aec:	f7fe f812 	bl	8002b14 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d902      	bls.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d13d      	bne.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1a:	d111      	bne.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b24:	d004      	beq.n	8004b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2e:	d107      	bne.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b48:	d10f      	bne.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e017      	b.n	8004bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4013      	ands	r3, r2
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	bf0c      	ite	eq
 8004b9e:	2301      	moveq	r3, #1
 8004ba0:	2300      	movne	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d19b      	bne.n	8004ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000000 	.word	0x20000000

08004bbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd0:	d111      	bne.n	8004bf6 <SPI_EndRxTransaction+0x3a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bda:	d004      	beq.n	8004be6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d107      	bne.n	8004bf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfe:	d12a      	bne.n	8004c56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c08:	d012      	beq.n	8004c30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2180      	movs	r1, #128	; 0x80
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff ff49 	bl	8004aac <SPI_WaitFlagStateUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02d      	beq.n	8004c7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e026      	b.n	8004c7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2200      	movs	r2, #0
 8004c38:	2101      	movs	r1, #1
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff ff36 	bl	8004aac <SPI_WaitFlagStateUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01a      	beq.n	8004c7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e013      	b.n	8004c7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2101      	movs	r1, #1
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7ff ff23 	bl	8004aac <SPI_WaitFlagStateUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <SPI_EndRxTxTransaction+0x7c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <SPI_EndRxTxTransaction+0x80>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	0d5b      	lsrs	r3, r3, #21
 8004ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ca4:	fb02 f303 	mul.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb2:	d112      	bne.n	8004cda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff fef4 	bl	8004aac <SPI_WaitFlagStateUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e00f      	b.n	8004cfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b80      	cmp	r3, #128	; 0x80
 8004cf2:	d0f2      	beq.n	8004cda <SPI_EndRxTxTransaction+0x52>
 8004cf4:	e000      	b.n	8004cf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004cf6:	bf00      	nop
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000000 	.word	0x20000000
 8004d08:	165e9f81 	.word	0x165e9f81

08004d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e041      	b.n	8004da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd fd0c 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f000 fabe 	bl	80052cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d001      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e046      	b.n	8004e52 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <HAL_TIM_Base_Start+0xb4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d022      	beq.n	8004e1c <HAL_TIM_Base_Start+0x70>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d01d      	beq.n	8004e1c <HAL_TIM_Base_Start+0x70>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_TIM_Base_Start+0xb8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d018      	beq.n	8004e1c <HAL_TIM_Base_Start+0x70>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <HAL_TIM_Base_Start+0xbc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <HAL_TIM_Base_Start+0x70>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <HAL_TIM_Base_Start+0xc0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00e      	beq.n	8004e1c <HAL_TIM_Base_Start+0x70>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_TIM_Base_Start+0xc4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d009      	beq.n	8004e1c <HAL_TIM_Base_Start+0x70>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <HAL_TIM_Base_Start+0xc8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <HAL_TIM_Base_Start+0x70>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_TIM_Base_Start+0xcc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d111      	bne.n	8004e40 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d010      	beq.n	8004e50 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0201 	orr.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	e007      	b.n	8004e50 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0201 	orr.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40010400 	.word	0x40010400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40001800 	.word	0x40001800

08004e7c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10f      	bne.n	8004eb4 <HAL_TIM_Base_Stop+0x38>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	f240 4344 	movw	r3, #1092	; 0x444
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d107      	bne.n	8004eb4 <HAL_TIM_Base_Stop+0x38>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d122      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d11b      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f06f 0202 	mvn.w	r2, #2
 8004ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f9bf 	bl	8005290 <HAL_TIM_IC_CaptureCallback>
 8004f12:	e005      	b.n	8004f20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f9b1 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9c2 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d122      	bne.n	8004f7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d11b      	bne.n	8004f7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f06f 0204 	mvn.w	r2, #4
 8004f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f995 	bl	8005290 <HAL_TIM_IC_CaptureCallback>
 8004f66:	e005      	b.n	8004f74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f987 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f998 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d122      	bne.n	8004fce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d11b      	bne.n	8004fce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f06f 0208 	mvn.w	r2, #8
 8004f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f96b 	bl	8005290 <HAL_TIM_IC_CaptureCallback>
 8004fba:	e005      	b.n	8004fc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f95d 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f96e 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d122      	bne.n	8005022 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d11b      	bne.n	8005022 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f06f 0210 	mvn.w	r2, #16
 8004ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f941 	bl	8005290 <HAL_TIM_IC_CaptureCallback>
 800500e:	e005      	b.n	800501c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f933 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f944 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d10e      	bne.n	800504e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0201 	mvn.w	r2, #1
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f90d 	bl	8005268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d10e      	bne.n	800507a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d107      	bne.n	800507a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fae9 	bl	800564c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d10e      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d107      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800509e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f909 	bl	80052b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d10e      	bne.n	80050d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d107      	bne.n	80050d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0220 	mvn.w	r2, #32
 80050ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fab3 	bl	8005638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_ConfigClockSource+0x1c>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e0b4      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x186>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005114:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800511c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512e:	d03e      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0xd4>
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005134:	f200 8087 	bhi.w	8005246 <HAL_TIM_ConfigClockSource+0x16c>
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	f000 8086 	beq.w	800524c <HAL_TIM_ConfigClockSource+0x172>
 8005140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005144:	d87f      	bhi.n	8005246 <HAL_TIM_ConfigClockSource+0x16c>
 8005146:	2b70      	cmp	r3, #112	; 0x70
 8005148:	d01a      	beq.n	8005180 <HAL_TIM_ConfigClockSource+0xa6>
 800514a:	2b70      	cmp	r3, #112	; 0x70
 800514c:	d87b      	bhi.n	8005246 <HAL_TIM_ConfigClockSource+0x16c>
 800514e:	2b60      	cmp	r3, #96	; 0x60
 8005150:	d050      	beq.n	80051f4 <HAL_TIM_ConfigClockSource+0x11a>
 8005152:	2b60      	cmp	r3, #96	; 0x60
 8005154:	d877      	bhi.n	8005246 <HAL_TIM_ConfigClockSource+0x16c>
 8005156:	2b50      	cmp	r3, #80	; 0x50
 8005158:	d03c      	beq.n	80051d4 <HAL_TIM_ConfigClockSource+0xfa>
 800515a:	2b50      	cmp	r3, #80	; 0x50
 800515c:	d873      	bhi.n	8005246 <HAL_TIM_ConfigClockSource+0x16c>
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d058      	beq.n	8005214 <HAL_TIM_ConfigClockSource+0x13a>
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d86f      	bhi.n	8005246 <HAL_TIM_ConfigClockSource+0x16c>
 8005166:	2b30      	cmp	r3, #48	; 0x30
 8005168:	d064      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0x15a>
 800516a:	2b30      	cmp	r3, #48	; 0x30
 800516c:	d86b      	bhi.n	8005246 <HAL_TIM_ConfigClockSource+0x16c>
 800516e:	2b20      	cmp	r3, #32
 8005170:	d060      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0x15a>
 8005172:	2b20      	cmp	r3, #32
 8005174:	d867      	bhi.n	8005246 <HAL_TIM_ConfigClockSource+0x16c>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d05c      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0x15a>
 800517a:	2b10      	cmp	r3, #16
 800517c:	d05a      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0x15a>
 800517e:	e062      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6899      	ldr	r1, [r3, #8]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f000 f9b6 	bl	8005500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]
      break;
 80051ac:	e04f      	b.n	800524e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6899      	ldr	r1, [r3, #8]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f000 f99f 	bl	8005500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d0:	609a      	str	r2, [r3, #8]
      break;
 80051d2:	e03c      	b.n	800524e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6859      	ldr	r1, [r3, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	461a      	mov	r2, r3
 80051e2:	f000 f913 	bl	800540c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2150      	movs	r1, #80	; 0x50
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f96c 	bl	80054ca <TIM_ITRx_SetConfig>
      break;
 80051f2:	e02c      	b.n	800524e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6859      	ldr	r1, [r3, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	461a      	mov	r2, r3
 8005202:	f000 f932 	bl	800546a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2160      	movs	r1, #96	; 0x60
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f95c 	bl	80054ca <TIM_ITRx_SetConfig>
      break;
 8005212:	e01c      	b.n	800524e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	461a      	mov	r2, r3
 8005222:	f000 f8f3 	bl	800540c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2140      	movs	r1, #64	; 0x40
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f94c 	bl	80054ca <TIM_ITRx_SetConfig>
      break;
 8005232:	e00c      	b.n	800524e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f000 f943 	bl	80054ca <TIM_ITRx_SetConfig>
      break;
 8005244:	e003      	b.n	800524e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
      break;
 800524a:	e000      	b.n	800524e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800524c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800525e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a40      	ldr	r2, [pc, #256]	; (80053e0 <TIM_Base_SetConfig+0x114>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d013      	beq.n	800530c <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ea:	d00f      	beq.n	800530c <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3d      	ldr	r2, [pc, #244]	; (80053e4 <TIM_Base_SetConfig+0x118>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00b      	beq.n	800530c <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a3c      	ldr	r2, [pc, #240]	; (80053e8 <TIM_Base_SetConfig+0x11c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_Base_SetConfig+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a3b      	ldr	r2, [pc, #236]	; (80053ec <TIM_Base_SetConfig+0x120>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_Base_SetConfig+0x40>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a3a      	ldr	r2, [pc, #232]	; (80053f0 <TIM_Base_SetConfig+0x124>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2f      	ldr	r2, [pc, #188]	; (80053e0 <TIM_Base_SetConfig+0x114>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02b      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532c:	d027      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <TIM_Base_SetConfig+0x118>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d023      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2b      	ldr	r2, [pc, #172]	; (80053e8 <TIM_Base_SetConfig+0x11c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01f      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <TIM_Base_SetConfig+0x120>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01b      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <TIM_Base_SetConfig+0x124>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d017      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <TIM_Base_SetConfig+0x128>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a27      	ldr	r2, [pc, #156]	; (80053f8 <TIM_Base_SetConfig+0x12c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a26      	ldr	r2, [pc, #152]	; (80053fc <TIM_Base_SetConfig+0x130>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a25      	ldr	r2, [pc, #148]	; (8005400 <TIM_Base_SetConfig+0x134>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a24      	ldr	r2, [pc, #144]	; (8005404 <TIM_Base_SetConfig+0x138>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a23      	ldr	r2, [pc, #140]	; (8005408 <TIM_Base_SetConfig+0x13c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d108      	bne.n	8005390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <TIM_Base_SetConfig+0x114>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_Base_SetConfig+0xf8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a0c      	ldr	r2, [pc, #48]	; (80053f0 <TIM_Base_SetConfig+0x124>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d103      	bne.n	80053cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40010400 	.word	0x40010400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800
 8005400:	40001800 	.word	0x40001800
 8005404:	40001c00 	.word	0x40001c00
 8005408:	40002000 	.word	0x40002000

0800540c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 030a 	bic.w	r3, r3, #10
 8005448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800546a:	b480      	push	{r7}
 800546c:	b087      	sub	sp, #28
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f023 0210 	bic.w	r2, r3, #16
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	031b      	lsls	r3, r3, #12
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b085      	sub	sp, #20
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f043 0307 	orr.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	609a      	str	r2, [r3, #8]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800551a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	021a      	lsls	r2, r3, #8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	431a      	orrs	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4313      	orrs	r3, r2
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	609a      	str	r2, [r3, #8]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005554:	2302      	movs	r3, #2
 8005556:	e05a      	b.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a21      	ldr	r2, [pc, #132]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d01d      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a18      	ldr	r2, [pc, #96]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a17      	ldr	r2, [pc, #92]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10c      	bne.n	80055fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40010400 	.word	0x40010400
 8005630:	40014000 	.word	0x40014000
 8005634:	40001800 	.word	0x40001800

08005638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e03f      	b.n	80056f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fd f8dc 	bl	8002844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	; 0x24
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fd7b 	bl	80061a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b08a      	sub	sp, #40	; 0x28
 80056fe:	af02      	add	r7, sp, #8
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b20      	cmp	r3, #32
 8005718:	d17c      	bne.n	8005814 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_UART_Transmit+0x2c>
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e075      	b.n	8005816 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_UART_Transmit+0x3e>
 8005734:	2302      	movs	r3, #2
 8005736:	e06e      	b.n	8005816 <HAL_UART_Transmit+0x11c>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2221      	movs	r2, #33	; 0x21
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800574e:	f7fd f9e1 	bl	8002b14 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	88fa      	ldrh	r2, [r7, #6]
 800575e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005768:	d108      	bne.n	800577c <HAL_UART_Transmit+0x82>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	e003      	b.n	8005784 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800578c:	e02a      	b.n	80057e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2200      	movs	r2, #0
 8005796:	2180      	movs	r1, #128	; 0x80
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 faf9 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e036      	b.n	8005816 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	3302      	adds	r3, #2
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	e007      	b.n	80057d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1cf      	bne.n	800578e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2140      	movs	r1, #64	; 0x40
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fac9 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e006      	b.n	8005816 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	e000      	b.n	8005816 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005814:	2302      	movs	r3, #2
  }
}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b0ba      	sub	sp, #232	; 0xe8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005846:	2300      	movs	r3, #0
 8005848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800585e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_UART_IRQHandler+0x66>
 8005872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fbd3 	bl	800602a <UART_Receive_IT>
      return;
 8005884:	e256      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80de 	beq.w	8005a4c <HAL_UART_IRQHandler+0x22c>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800589c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80d1 	beq.w	8005a4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <HAL_UART_IRQHandler+0xae>
 80058b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f043 0201 	orr.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <HAL_UART_IRQHandler+0xd2>
 80058da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f043 0202 	orr.w	r2, r3, #2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <HAL_UART_IRQHandler+0xf6>
 80058fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f043 0204 	orr.w	r2, r3, #4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <HAL_UART_IRQHandler+0x126>
 8005922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800592e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f043 0208 	orr.w	r2, r3, #8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 81ed 	beq.w	8005d2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_UART_IRQHandler+0x14e>
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fb5e 	bl	800602a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	bf0c      	ite	eq
 800597c:	2301      	moveq	r3, #1
 800597e:	2300      	movne	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d103      	bne.n	800599a <HAL_UART_IRQHandler+0x17a>
 8005992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d04f      	beq.n	8005a3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa66 	bl	8005e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d141      	bne.n	8005a32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3314      	adds	r3, #20
 80059b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1d9      	bne.n	80059ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d013      	beq.n	8005a2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	4a7d      	ldr	r2, [pc, #500]	; (8005bfc <HAL_UART_IRQHandler+0x3dc>)
 8005a08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fd fad8 	bl	8002fc4 <HAL_DMA_Abort_IT>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a24:	4610      	mov	r0, r2
 8005a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	e00e      	b.n	8005a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f99a 	bl	8005d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	e00a      	b.n	8005a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f996 	bl	8005d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e006      	b.n	8005a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f992 	bl	8005d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a46:	e170      	b.n	8005d2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	bf00      	nop
    return;
 8005a4a:	e16e      	b.n	8005d2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	f040 814a 	bne.w	8005cea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8143 	beq.w	8005cea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 813c 	beq.w	8005cea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	f040 80b4 	bne.w	8005c00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8140 	beq.w	8005d2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	f080 8139 	bcs.w	8005d2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ace:	f000 8088 	beq.w	8005be2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005afe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1d9      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e1      	bne.n	8005b1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e3      	bne.n	8005b5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e3      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fd f981 	bl	8002ee4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f8c0 	bl	8005d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bf8:	e099      	b.n	8005d2e <HAL_UART_IRQHandler+0x50e>
 8005bfa:	bf00      	nop
 8005bfc:	08005f33 	.word	0x08005f33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 808b 	beq.w	8005d32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8086 	beq.w	8005d32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c4a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e3      	bne.n	8005c26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3314      	adds	r3, #20
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c82:	633a      	str	r2, [r7, #48]	; 0x30
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e3      	bne.n	8005c5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0310 	bic.w	r3, r3, #16
 8005cba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cc8:	61fa      	str	r2, [r7, #28]
 8005cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e3      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f848 	bl	8005d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ce8:	e023      	b.n	8005d32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_UART_IRQHandler+0x4ea>
 8005cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f929 	bl	8005f5a <UART_Transmit_IT>
    return;
 8005d08:	e014      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00e      	beq.n	8005d34 <HAL_UART_IRQHandler+0x514>
 8005d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f969 	bl	8005ffa <UART_EndTransmit_IT>
    return;
 8005d28:	e004      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
    return;
 8005d2a:	bf00      	nop
 8005d2c:	e002      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
      return;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
      return;
 8005d32:	bf00      	nop
  }
}
 8005d34:	37e8      	adds	r7, #232	; 0xe8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop

08005d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b090      	sub	sp, #64	; 0x40
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da0:	e050      	b.n	8005e44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d04c      	beq.n	8005e44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005db0:	f7fc feb0 	bl	8002b14 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d241      	bcs.n	8005e44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005de0:	637a      	str	r2, [r7, #52]	; 0x34
 8005de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e5      	bne.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3314      	adds	r3, #20
 8005dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	613b      	str	r3, [r7, #16]
   return(result);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e14:	623a      	str	r2, [r7, #32]
 8005e16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e5      	bne.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e00f      	b.n	8005e64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	bf0c      	ite	eq
 8005e54:	2301      	moveq	r3, #1
 8005e56:	2300      	movne	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d09f      	beq.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3740      	adds	r7, #64	; 0x40
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b095      	sub	sp, #84	; 0x54
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	330c      	adds	r3, #12
 8005e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e94:	643a      	str	r2, [r7, #64]	; 0x40
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e5      	bne.n	8005e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3314      	adds	r3, #20
 8005eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d119      	bne.n	8005f18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f023 0310 	bic.w	r3, r3, #16
 8005efa:	647b      	str	r3, [r7, #68]	; 0x44
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f04:	61ba      	str	r2, [r7, #24]
 8005f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6979      	ldr	r1, [r7, #20]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	613b      	str	r3, [r7, #16]
   return(result);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e5      	bne.n	8005ee4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f26:	bf00      	nop
 8005f28:	3754      	adds	r7, #84	; 0x54
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7ff ff09 	bl	8005d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b21      	cmp	r3, #33	; 0x21
 8005f6c:	d13e      	bne.n	8005fec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d114      	bne.n	8005fa2 <UART_Transmit_IT+0x48>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d110      	bne.n	8005fa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	1c9a      	adds	r2, r3, #2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	621a      	str	r2, [r3, #32]
 8005fa0:	e008      	b.n	8005fb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6211      	str	r1, [r2, #32]
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fe8e 	bl	8005d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b08c      	sub	sp, #48	; 0x30
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b22      	cmp	r3, #34	; 0x22
 800603c:	f040 80ab 	bne.w	8006196 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006048:	d117      	bne.n	800607a <UART_Receive_IT+0x50>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d113      	bne.n	800607a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006068:	b29a      	uxth	r2, r3
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
 8006078:	e026      	b.n	80060c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608c:	d007      	beq.n	800609e <UART_Receive_IT+0x74>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <UART_Receive_IT+0x82>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e008      	b.n	80060be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4619      	mov	r1, r3
 80060d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d15a      	bne.n	8006192 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0220 	bic.w	r2, r2, #32
 80060ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695a      	ldr	r2, [r3, #20]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	2b01      	cmp	r3, #1
 800611a:	d135      	bne.n	8006188 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	613b      	str	r3, [r7, #16]
   return(result);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f023 0310 	bic.w	r3, r3, #16
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	623a      	str	r2, [r7, #32]
 8006144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	69f9      	ldr	r1, [r7, #28]
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e5      	bne.n	8006122 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b10      	cmp	r3, #16
 8006162:	d10a      	bne.n	800617a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fdf9 	bl	8005d78 <HAL_UARTEx_RxEventCallback>
 8006186:	e002      	b.n	800618e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fde1 	bl	8005d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e002      	b.n	8006198 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	; 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a4:	b0c0      	sub	sp, #256	; 0x100
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061bc:	68d9      	ldr	r1, [r3, #12]
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	ea40 0301 	orr.w	r3, r0, r1
 80061c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	431a      	orrs	r2, r3
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061f8:	f021 010c 	bic.w	r1, r1, #12
 80061fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006206:	430b      	orrs	r3, r1
 8006208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	6999      	ldr	r1, [r3, #24]
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	ea40 0301 	orr.w	r3, r0, r1
 8006226:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b8f      	ldr	r3, [pc, #572]	; (800646c <UART_SetConfig+0x2cc>)
 8006230:	429a      	cmp	r2, r3
 8006232:	d005      	beq.n	8006240 <UART_SetConfig+0xa0>
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b8d      	ldr	r3, [pc, #564]	; (8006470 <UART_SetConfig+0x2d0>)
 800623c:	429a      	cmp	r2, r3
 800623e:	d104      	bne.n	800624a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006240:	f7fd fd24 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8006244:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006248:	e003      	b.n	8006252 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800624a:	f7fd fd0b 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 800624e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625c:	f040 810c 	bne.w	8006478 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006264:	2200      	movs	r2, #0
 8006266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800626a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800626e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006272:	4622      	mov	r2, r4
 8006274:	462b      	mov	r3, r5
 8006276:	1891      	adds	r1, r2, r2
 8006278:	65b9      	str	r1, [r7, #88]	; 0x58
 800627a:	415b      	adcs	r3, r3
 800627c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800627e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006282:	4621      	mov	r1, r4
 8006284:	eb12 0801 	adds.w	r8, r2, r1
 8006288:	4629      	mov	r1, r5
 800628a:	eb43 0901 	adc.w	r9, r3, r1
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800629a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800629e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062a2:	4690      	mov	r8, r2
 80062a4:	4699      	mov	r9, r3
 80062a6:	4623      	mov	r3, r4
 80062a8:	eb18 0303 	adds.w	r3, r8, r3
 80062ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062b0:	462b      	mov	r3, r5
 80062b2:	eb49 0303 	adc.w	r3, r9, r3
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062ce:	460b      	mov	r3, r1
 80062d0:	18db      	adds	r3, r3, r3
 80062d2:	653b      	str	r3, [r7, #80]	; 0x50
 80062d4:	4613      	mov	r3, r2
 80062d6:	eb42 0303 	adc.w	r3, r2, r3
 80062da:	657b      	str	r3, [r7, #84]	; 0x54
 80062dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062e4:	f7fa fc78 	bl	8000bd8 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4b61      	ldr	r3, [pc, #388]	; (8006474 <UART_SetConfig+0x2d4>)
 80062ee:	fba3 2302 	umull	r2, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	011c      	lsls	r4, r3, #4
 80062f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006300:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006304:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	1891      	adds	r1, r2, r2
 800630e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006310:	415b      	adcs	r3, r3
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006314:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006318:	4641      	mov	r1, r8
 800631a:	eb12 0a01 	adds.w	sl, r2, r1
 800631e:	4649      	mov	r1, r9
 8006320:	eb43 0b01 	adc.w	fp, r3, r1
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006330:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006338:	4692      	mov	sl, r2
 800633a:	469b      	mov	fp, r3
 800633c:	4643      	mov	r3, r8
 800633e:	eb1a 0303 	adds.w	r3, sl, r3
 8006342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006346:	464b      	mov	r3, r9
 8006348:	eb4b 0303 	adc.w	r3, fp, r3
 800634c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800635c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006364:	460b      	mov	r3, r1
 8006366:	18db      	adds	r3, r3, r3
 8006368:	643b      	str	r3, [r7, #64]	; 0x40
 800636a:	4613      	mov	r3, r2
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	647b      	str	r3, [r7, #68]	; 0x44
 8006372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800637a:	f7fa fc2d 	bl	8000bd8 <__aeabi_uldivmod>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4611      	mov	r1, r2
 8006384:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <UART_SetConfig+0x2d4>)
 8006386:	fba3 2301 	umull	r2, r3, r3, r1
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	2264      	movs	r2, #100	; 0x64
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	1acb      	subs	r3, r1, r3
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800639a:	4b36      	ldr	r3, [pc, #216]	; (8006474 <UART_SetConfig+0x2d4>)
 800639c:	fba3 2302 	umull	r2, r3, r3, r2
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063a8:	441c      	add	r4, r3
 80063aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	1891      	adds	r1, r2, r2
 80063c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80063c4:	415b      	adcs	r3, r3
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063cc:	4641      	mov	r1, r8
 80063ce:	1851      	adds	r1, r2, r1
 80063d0:	6339      	str	r1, [r7, #48]	; 0x30
 80063d2:	4649      	mov	r1, r9
 80063d4:	414b      	adcs	r3, r1
 80063d6:	637b      	str	r3, [r7, #52]	; 0x34
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063e4:	4659      	mov	r1, fp
 80063e6:	00cb      	lsls	r3, r1, #3
 80063e8:	4651      	mov	r1, sl
 80063ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ee:	4651      	mov	r1, sl
 80063f0:	00ca      	lsls	r2, r1, #3
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	4642      	mov	r2, r8
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006400:	464b      	mov	r3, r9
 8006402:	460a      	mov	r2, r1
 8006404:	eb42 0303 	adc.w	r3, r2, r3
 8006408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006418:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800641c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006420:	460b      	mov	r3, r1
 8006422:	18db      	adds	r3, r3, r3
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
 8006426:	4613      	mov	r3, r2
 8006428:	eb42 0303 	adc.w	r3, r2, r3
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006436:	f7fa fbcf 	bl	8000bd8 <__aeabi_uldivmod>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <UART_SetConfig+0x2d4>)
 8006440:	fba3 1302 	umull	r1, r3, r3, r2
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	2164      	movs	r1, #100	; 0x64
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	3332      	adds	r3, #50	; 0x32
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <UART_SetConfig+0x2d4>)
 8006454:	fba2 2303 	umull	r2, r3, r2, r3
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	f003 0207 	and.w	r2, r3, #7
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4422      	add	r2, r4
 8006466:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006468:	e105      	b.n	8006676 <UART_SetConfig+0x4d6>
 800646a:	bf00      	nop
 800646c:	40011000 	.word	0x40011000
 8006470:	40011400 	.word	0x40011400
 8006474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647c:	2200      	movs	r2, #0
 800647e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800648a:	4642      	mov	r2, r8
 800648c:	464b      	mov	r3, r9
 800648e:	1891      	adds	r1, r2, r2
 8006490:	6239      	str	r1, [r7, #32]
 8006492:	415b      	adcs	r3, r3
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
 8006496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800649a:	4641      	mov	r1, r8
 800649c:	1854      	adds	r4, r2, r1
 800649e:	4649      	mov	r1, r9
 80064a0:	eb43 0501 	adc.w	r5, r3, r1
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	00eb      	lsls	r3, r5, #3
 80064ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064b2:	00e2      	lsls	r2, r4, #3
 80064b4:	4614      	mov	r4, r2
 80064b6:	461d      	mov	r5, r3
 80064b8:	4643      	mov	r3, r8
 80064ba:	18e3      	adds	r3, r4, r3
 80064bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064c0:	464b      	mov	r3, r9
 80064c2:	eb45 0303 	adc.w	r3, r5, r3
 80064c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064e6:	4629      	mov	r1, r5
 80064e8:	008b      	lsls	r3, r1, #2
 80064ea:	4621      	mov	r1, r4
 80064ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f0:	4621      	mov	r1, r4
 80064f2:	008a      	lsls	r2, r1, #2
 80064f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064f8:	f7fa fb6e 	bl	8000bd8 <__aeabi_uldivmod>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4b60      	ldr	r3, [pc, #384]	; (8006684 <UART_SetConfig+0x4e4>)
 8006502:	fba3 2302 	umull	r2, r3, r3, r2
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	011c      	lsls	r4, r3, #4
 800650a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800650e:	2200      	movs	r2, #0
 8006510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006514:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800651c:	4642      	mov	r2, r8
 800651e:	464b      	mov	r3, r9
 8006520:	1891      	adds	r1, r2, r2
 8006522:	61b9      	str	r1, [r7, #24]
 8006524:	415b      	adcs	r3, r3
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800652c:	4641      	mov	r1, r8
 800652e:	1851      	adds	r1, r2, r1
 8006530:	6139      	str	r1, [r7, #16]
 8006532:	4649      	mov	r1, r9
 8006534:	414b      	adcs	r3, r1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006544:	4659      	mov	r1, fp
 8006546:	00cb      	lsls	r3, r1, #3
 8006548:	4651      	mov	r1, sl
 800654a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800654e:	4651      	mov	r1, sl
 8006550:	00ca      	lsls	r2, r1, #3
 8006552:	4610      	mov	r0, r2
 8006554:	4619      	mov	r1, r3
 8006556:	4603      	mov	r3, r0
 8006558:	4642      	mov	r2, r8
 800655a:	189b      	adds	r3, r3, r2
 800655c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006560:	464b      	mov	r3, r9
 8006562:	460a      	mov	r2, r1
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	67bb      	str	r3, [r7, #120]	; 0x78
 8006576:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006584:	4649      	mov	r1, r9
 8006586:	008b      	lsls	r3, r1, #2
 8006588:	4641      	mov	r1, r8
 800658a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800658e:	4641      	mov	r1, r8
 8006590:	008a      	lsls	r2, r1, #2
 8006592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006596:	f7fa fb1f 	bl	8000bd8 <__aeabi_uldivmod>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4b39      	ldr	r3, [pc, #228]	; (8006684 <UART_SetConfig+0x4e4>)
 80065a0:	fba3 1302 	umull	r1, r3, r3, r2
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	2164      	movs	r1, #100	; 0x64
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	3332      	adds	r3, #50	; 0x32
 80065b2:	4a34      	ldr	r2, [pc, #208]	; (8006684 <UART_SetConfig+0x4e4>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065be:	441c      	add	r4, r3
 80065c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c4:	2200      	movs	r2, #0
 80065c6:	673b      	str	r3, [r7, #112]	; 0x70
 80065c8:	677a      	str	r2, [r7, #116]	; 0x74
 80065ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065ce:	4642      	mov	r2, r8
 80065d0:	464b      	mov	r3, r9
 80065d2:	1891      	adds	r1, r2, r2
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	415b      	adcs	r3, r3
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065de:	4641      	mov	r1, r8
 80065e0:	1851      	adds	r1, r2, r1
 80065e2:	6039      	str	r1, [r7, #0]
 80065e4:	4649      	mov	r1, r9
 80065e6:	414b      	adcs	r3, r1
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065f6:	4659      	mov	r1, fp
 80065f8:	00cb      	lsls	r3, r1, #3
 80065fa:	4651      	mov	r1, sl
 80065fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006600:	4651      	mov	r1, sl
 8006602:	00ca      	lsls	r2, r1, #3
 8006604:	4610      	mov	r0, r2
 8006606:	4619      	mov	r1, r3
 8006608:	4603      	mov	r3, r0
 800660a:	4642      	mov	r2, r8
 800660c:	189b      	adds	r3, r3, r2
 800660e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006610:	464b      	mov	r3, r9
 8006612:	460a      	mov	r2, r1
 8006614:	eb42 0303 	adc.w	r3, r2, r3
 8006618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	663b      	str	r3, [r7, #96]	; 0x60
 8006624:	667a      	str	r2, [r7, #100]	; 0x64
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006632:	4649      	mov	r1, r9
 8006634:	008b      	lsls	r3, r1, #2
 8006636:	4641      	mov	r1, r8
 8006638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663c:	4641      	mov	r1, r8
 800663e:	008a      	lsls	r2, r1, #2
 8006640:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006644:	f7fa fac8 	bl	8000bd8 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <UART_SetConfig+0x4e4>)
 800664e:	fba3 1302 	umull	r1, r3, r3, r2
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	2164      	movs	r1, #100	; 0x64
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	3332      	adds	r3, #50	; 0x32
 8006660:	4a08      	ldr	r2, [pc, #32]	; (8006684 <UART_SetConfig+0x4e4>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4422      	add	r2, r4
 8006674:	609a      	str	r2, [r3, #8]
}
 8006676:	bf00      	nop
 8006678:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800667c:	46bd      	mov	sp, r7
 800667e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006682:	bf00      	nop
 8006684:	51eb851f 	.word	0x51eb851f

08006688 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	3303      	adds	r3, #3
 8006698:	f023 0303 	bic.w	r3, r3, #3
 800669c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 800669e:	4b1a      	ldr	r3, [pc, #104]	; (8006708 <network_configure_activations+0x80>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 80066a4:	4b18      	ldr	r3, [pc, #96]	; (8006708 <network_configure_activations+0x80>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 80066aa:	4a18      	ldr	r2, [pc, #96]	; (800670c <network_configure_activations+0x84>)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 80066b0:	4a16      	ldr	r2, [pc, #88]	; (800670c <network_configure_activations+0x84>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(activations + 0);
 80066b6:	4a16      	ldr	r2, [pc, #88]	; (8006710 <network_configure_activations+0x88>)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(activations + 0);
 80066bc:	4a14      	ldr	r2, [pc, #80]	; (8006710 <network_configure_activations+0x88>)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 100);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3364      	adds	r3, #100	; 0x64
 80066c6:	4a13      	ldr	r2, [pc, #76]	; (8006714 <network_configure_activations+0x8c>)
 80066c8:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 100);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3364      	adds	r3, #100	; 0x64
 80066ce:	4a11      	ldr	r2, [pc, #68]	; (8006714 <network_configure_activations+0x8c>)
 80066d0:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(activations + 0);
 80066d2:	4a11      	ldr	r2, [pc, #68]	; (8006718 <network_configure_activations+0x90>)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(activations + 0);
 80066d8:	4a0f      	ldr	r2, [pc, #60]	; (8006718 <network_configure_activations+0x90>)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 100);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3364      	adds	r3, #100	; 0x64
 80066e2:	4a0e      	ldr	r2, [pc, #56]	; (800671c <network_configure_activations+0x94>)
 80066e4:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 100);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3364      	adds	r3, #100	; 0x64
 80066ea:	4a0c      	ldr	r2, [pc, #48]	; (800671c <network_configure_activations+0x94>)
 80066ec:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(NULL);
 80066ee:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <network_configure_activations+0x98>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	609a      	str	r2, [r3, #8]
    nl_3_output_array.data_start = AI_PTR(NULL);
 80066f4:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <network_configure_activations+0x98>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80066fa:	2301      	movs	r3, #1
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20000070 	.word	0x20000070
 800670c:	20000080 	.word	0x20000080
 8006710:	20000090 	.word	0x20000090
 8006714:	200000a0 	.word	0x200000a0
 8006718:	200000b0 	.word	0x200000b0
 800671c:	200000c0 	.word	0x200000c0
 8006720:	200000d0 	.word	0x200000d0

08006724 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8006734:	4b31      	ldr	r3, [pc, #196]	; (80067fc <network_configure_weights+0xd8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800673c:	4a2f      	ldr	r2, [pc, #188]	; (80067fc <network_configure_weights+0xd8>)
 800673e:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8006740:	4a2e      	ldr	r2, [pc, #184]	; (80067fc <network_configure_weights+0xd8>)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8006746:	4a2d      	ldr	r2, [pc, #180]	; (80067fc <network_configure_weights+0xd8>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800674c:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <network_configure_weights+0xdc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006754:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <network_configure_weights+0xdc>)
 8006756:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 600);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800675e:	4a28      	ldr	r2, [pc, #160]	; (8006800 <network_configure_weights+0xdc>)
 8006760:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 600);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006768:	4a25      	ldr	r2, [pc, #148]	; (8006800 <network_configure_weights+0xdc>)
 800676a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800676c:	4b25      	ldr	r3, [pc, #148]	; (8006804 <network_configure_weights+0xe0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006774:	4a23      	ldr	r2, [pc, #140]	; (8006804 <network_configure_weights+0xe0>)
 8006776:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 700);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800677e:	4a21      	ldr	r2, [pc, #132]	; (8006804 <network_configure_weights+0xe0>)
 8006780:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 700);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8006788:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <network_configure_weights+0xe0>)
 800678a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <network_configure_weights+0xe4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006794:	4a1c      	ldr	r2, [pc, #112]	; (8006808 <network_configure_weights+0xe4>)
 8006796:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 3200);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800679e:	4a1a      	ldr	r2, [pc, #104]	; (8006808 <network_configure_weights+0xe4>)
 80067a0:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 3200);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80067a8:	4a17      	ldr	r2, [pc, #92]	; (8006808 <network_configure_weights+0xe4>)
 80067aa:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80067ac:	4b17      	ldr	r3, [pc, #92]	; (800680c <network_configure_weights+0xe8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b4:	4a15      	ldr	r2, [pc, #84]	; (800680c <network_configure_weights+0xe8>)
 80067b6:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 3300);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 80067be:	4a13      	ldr	r2, [pc, #76]	; (800680c <network_configure_weights+0xe8>)
 80067c0:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 3300);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 80067c8:	4a10      	ldr	r2, [pc, #64]	; (800680c <network_configure_weights+0xe8>)
 80067ca:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <network_configure_weights+0xec>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	4a0e      	ldr	r2, [pc, #56]	; (8006810 <network_configure_weights+0xec>)
 80067d6:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 3600);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80067de:	4a0c      	ldr	r2, [pc, #48]	; (8006810 <network_configure_weights+0xec>)
 80067e0:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 3600);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80067e8:	4a09      	ldr	r2, [pc, #36]	; (8006810 <network_configure_weights+0xec>)
 80067ea:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80067ec:	2301      	movs	r3, #1
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	200000e0 	.word	0x200000e0
 8006800:	200000f0 	.word	0x200000f0
 8006804:	20000100 	.word	0x20000100
 8006808:	20000110 	.word	0x20000110
 800680c:	20000120 	.word	0x20000120
 8006810:	20000130 	.word	0x20000130

08006814 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800681e:	2300      	movs	r3, #0
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	2304      	movs	r3, #4
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2301      	movs	r3, #1
 8006828:	4a04      	ldr	r2, [pc, #16]	; (800683c <ai_network_create+0x28>)
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fe65 	bl	80074fc <ai_platform_network_create>
 8006832:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	2000000c 	.word	0x2000000c

08006840 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fec7 	bl	80075e0 <ai_platform_network_init>
 8006852:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <ai_network_init+0x1e>
 800685a:	2300      	movs	r3, #0
 800685c:	e02b      	b.n	80068b6 <ai_network_init+0x76>

  ai_bool ok = true;
 800685e:	2301      	movs	r3, #1
 8006860:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	4619      	mov	r1, r3
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff ff5c 	bl	8006724 <network_configure_weights>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	3318      	adds	r3, #24
 8006882:	4619      	mov	r1, r3
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff feff 	bl	8006688 <network_configure_activations>
 800688a:	4603      	mov	r3, r0
 800688c:	461a      	mov	r2, r3
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	bf14      	ite	ne
 8006896:	2301      	movne	r3, #1
 8006898:	2300      	moveq	r3, #0
 800689a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 ff11 	bl	80076c4 <ai_platform_network_post_init>
 80068a2:	4603      	mov	r3, r0
 80068a4:	461a      	mov	r2, r3
 80068a6:	7afb      	ldrb	r3, [r7, #11]
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bf14      	ite	ne
 80068ae:	2301      	movne	r3, #1
 80068b0:	2300      	moveq	r3, #0
 80068b2:	72fb      	strb	r3, [r7, #11]

  return ok;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 ff44 	bl	800775c <ai_platform_network_process>
 80068d4:	4603      	mov	r3, r0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
    0xbe, 0xe4, 0xed, 0x10, 0xbe, 0x2a, 0x53, 0xb7, 0x3e,
    0x9f, 0xd3, 0x5e, 0xbd, 0xa9, 0xff, 0x37, 0xbd, 0x9a,
    0xcd, 0x9f, 0xbe, 0x8f, 0x8c, 0x6d, 0xbe, 0xbd, 0x94,
    0x24, 0xbe, 0xbe, 0x40, 0xbd, 0x3e, 0x51, 0xc3, 0xfc,
    0x3e, 0xc7, 0x9c, 0x91, 0x3d, 0x7c, 0x77, 0x8b, 0xbe  };
  return AI_HANDLE_PTR(s_network_weights);
 80068e4:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <ai_network_data_weights_get+0x10>)
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	0800bae0 	.word	0x0800bae0

080068f4 <arm_max_f32>:
 80068f4:	f101 3cff 	add.w	ip, r1, #4294967295
 80068f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068fa:	4607      	mov	r7, r0
 80068fc:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8006900:	ecf7 7a01 	vldmia	r7!, {s15}
 8006904:	d060      	beq.n	80069c8 <arm_max_f32+0xd4>
 8006906:	2400      	movs	r4, #0
 8006908:	3014      	adds	r0, #20
 800690a:	4625      	mov	r5, r4
 800690c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8006910:	ed10 7a04 	vldr	s14, [r0, #-16]
 8006914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691c:	bf48      	it	mi
 800691e:	eef0 7a47 	vmovmi.f32	s15, s14
 8006922:	ed10 7a03 	vldr	s14, [r0, #-12]
 8006926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800692a:	bf48      	it	mi
 800692c:	1c65      	addmi	r5, r4, #1
 800692e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006932:	bf48      	it	mi
 8006934:	eef0 7a47 	vmovmi.f32	s15, s14
 8006938:	ed10 7a02 	vldr	s14, [r0, #-8]
 800693c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006940:	bf48      	it	mi
 8006942:	1ca5      	addmi	r5, r4, #2
 8006944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006948:	bf48      	it	mi
 800694a:	eef0 7a47 	vmovmi.f32	s15, s14
 800694e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006956:	bf48      	it	mi
 8006958:	1ce5      	addmi	r5, r4, #3
 800695a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695e:	f104 0404 	add.w	r4, r4, #4
 8006962:	bf44      	itt	mi
 8006964:	eef0 7a47 	vmovmi.f32	s15, s14
 8006968:	4625      	movmi	r5, r4
 800696a:	42a6      	cmp	r6, r4
 800696c:	f100 0010 	add.w	r0, r0, #16
 8006970:	d1ce      	bne.n	8006910 <arm_max_f32+0x1c>
 8006972:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8006976:	f01c 0003 	ands.w	r0, ip, #3
 800697a:	d021      	beq.n	80069c0 <arm_max_f32+0xcc>
 800697c:	ed97 7a00 	vldr	s14, [r7]
 8006980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006988:	bfc4      	itt	gt
 800698a:	eef0 7a47 	vmovgt.f32	s15, s14
 800698e:	1a0d      	subgt	r5, r1, r0
 8006990:	3801      	subs	r0, #1
 8006992:	d015      	beq.n	80069c0 <arm_max_f32+0xcc>
 8006994:	ed97 7a01 	vldr	s14, [r7, #4]
 8006998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800699c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a0:	bf44      	itt	mi
 80069a2:	eef0 7a47 	vmovmi.f32	s15, s14
 80069a6:	1a0d      	submi	r5, r1, r0
 80069a8:	2801      	cmp	r0, #1
 80069aa:	d009      	beq.n	80069c0 <arm_max_f32+0xcc>
 80069ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80069b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b8:	bfc4      	itt	gt
 80069ba:	eef0 7a47 	vmovgt.f32	s15, s14
 80069be:	4665      	movgt	r5, ip
 80069c0:	edc2 7a00 	vstr	s15, [r2]
 80069c4:	601d      	str	r5, [r3, #0]
 80069c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c8:	4675      	mov	r5, lr
 80069ca:	e7d4      	b.n	8006976 <arm_max_f32+0x82>

080069cc <arm_cfft_radix4_init_f32>:
 80069cc:	b410      	push	{r4}
 80069ce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80069d2:	4c27      	ldr	r4, [pc, #156]	; (8006a70 <arm_cfft_radix4_init_f32+0xa4>)
 80069d4:	7082      	strb	r2, [r0, #2]
 80069d6:	70c3      	strb	r3, [r0, #3]
 80069d8:	8001      	strh	r1, [r0, #0]
 80069da:	6044      	str	r4, [r0, #4]
 80069dc:	d027      	beq.n	8006a2e <arm_cfft_radix4_init_f32+0x62>
 80069de:	d911      	bls.n	8006a04 <arm_cfft_radix4_init_f32+0x38>
 80069e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80069e4:	d02f      	beq.n	8006a46 <arm_cfft_radix4_init_f32+0x7a>
 80069e6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80069ea:	d11b      	bne.n	8006a24 <arm_cfft_radix4_init_f32+0x58>
 80069ec:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80069f0:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <arm_cfft_radix4_init_f32+0xa8>)
 80069f2:	6102      	str	r2, [r0, #16]
 80069f4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80069f8:	e9c0 3202 	strd	r3, r2, [r0, #8]
 80069fc:	2000      	movs	r0, #0
 80069fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	2910      	cmp	r1, #16
 8006a06:	d028      	beq.n	8006a5a <arm_cfft_radix4_init_f32+0x8e>
 8006a08:	2940      	cmp	r1, #64	; 0x40
 8006a0a:	d10b      	bne.n	8006a24 <arm_cfft_radix4_init_f32+0x58>
 8006a0c:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <arm_cfft_radix4_init_f32+0xac>)
 8006a12:	6102      	str	r2, [r0, #16]
 8006a14:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 8006a18:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295
 8006a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 8006a32:	4b12      	ldr	r3, [pc, #72]	; (8006a7c <arm_cfft_radix4_init_f32+0xb0>)
 8006a34:	6102      	str	r2, [r0, #16]
 8006a36:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 8006a3a:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8006a3e:	2000      	movs	r0, #0
 8006a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <arm_cfft_radix4_init_f32+0xb4>)
 8006a4c:	6102      	str	r2, [r0, #16]
 8006a4e:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 8006a52:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8006a56:	2000      	movs	r0, #0
 8006a58:	e7d1      	b.n	80069fe <arm_cfft_radix4_init_f32+0x32>
 8006a5a:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8006a5e:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <arm_cfft_radix4_init_f32+0xb8>)
 8006a60:	6102      	str	r2, [r0, #16]
 8006a62:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 8006a66:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e7c7      	b.n	80069fe <arm_cfft_radix4_init_f32+0x32>
 8006a6e:	bf00      	nop
 8006a70:	0800d0fc 	.word	0x0800d0fc
 8006a74:	0800c8fc 	.word	0x0800c8fc
 8006a78:	0800c97a 	.word	0x0800c97a
 8006a7c:	0800c91a 	.word	0x0800c91a
 8006a80:	0800c902 	.word	0x0800c902
 8006a84:	0800cafa 	.word	0x0800cafa

08006a88 <arm_radix4_butterfly_f32>:
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	ed2d 8b06 	vpush	{d8-d10}
 8006a90:	088c      	lsrs	r4, r1, #2
 8006a92:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8006a96:	461d      	mov	r5, r3
 8006a98:	b08d      	sub	sp, #52	; 0x34
 8006a9a:	468a      	mov	sl, r1
 8006a9c:	eb00 0109 	add.w	r1, r0, r9
 8006aa0:	1d16      	adds	r6, r2, #4
 8006aa2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8006aa6:	eb01 0209 	add.w	r2, r1, r9
 8006aaa:	9402      	str	r4, [sp, #8]
 8006aac:	9009      	str	r0, [sp, #36]	; 0x24
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	46a3      	mov	fp, r4
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8006ab8:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 8006abc:	960a      	str	r6, [sp, #40]	; 0x28
 8006abe:	eb02 0009 	add.w	r0, r2, r9
 8006ac2:	4688      	mov	r8, r1
 8006ac4:	00ff      	lsls	r7, r7, #3
 8006ac6:	4634      	mov	r4, r6
 8006ac8:	4635      	mov	r5, r6
 8006aca:	ed93 7a00 	vldr	s14, [r3]
 8006ace:	ed92 1a00 	vldr	s2, [r2]
 8006ad2:	edd0 1a00 	vldr	s3, [r0]
 8006ad6:	ed92 2a01 	vldr	s4, [r2, #4]
 8006ada:	edd0 2a01 	vldr	s5, [r0, #4]
 8006ade:	edd3 3a01 	vldr	s7, [r3, #4]
 8006ae2:	edd1 7a00 	vldr	s15, [r1]
 8006ae6:	edd1 5a01 	vldr	s11, [r1, #4]
 8006aea:	ed54 4a01 	vldr	s9, [r4, #-4]
 8006aee:	ed94 3a00 	vldr	s6, [r4]
 8006af2:	ee37 5aa1 	vadd.f32	s10, s15, s3
 8006af6:	ee35 6aa2 	vadd.f32	s12, s11, s5
 8006afa:	ee37 4a01 	vadd.f32	s8, s14, s2
 8006afe:	ee73 6a82 	vadd.f32	s13, s7, s4
 8006b02:	ee34 0a05 	vadd.f32	s0, s8, s10
 8006b06:	ee76 0a86 	vadd.f32	s1, s13, s12
 8006b0a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006b0e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006b12:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8006b16:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8006b1a:	ed83 0a00 	vstr	s0, [r3]
 8006b1e:	edc3 0a01 	vstr	s1, [r3, #4]
 8006b22:	ed55 1a01 	vldr	s3, [r5, #-4]
 8006b26:	ed96 2a00 	vldr	s4, [r6]
 8006b2a:	ee77 2a25 	vadd.f32	s5, s14, s11
 8006b2e:	ee34 4a45 	vsub.f32	s8, s8, s10
 8006b32:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006b36:	ed95 5a00 	vldr	s10, [r5]
 8006b3a:	ed16 6a01 	vldr	s12, [r6, #-4]
 8006b3e:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006b42:	ee73 5ae7 	vsub.f32	s11, s7, s15
 8006b46:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006b4a:	ee22 1aa1 	vmul.f32	s2, s5, s3
 8006b4e:	ee67 3a06 	vmul.f32	s7, s14, s12
 8006b52:	ee62 2a85 	vmul.f32	s5, s5, s10
 8006b56:	ee27 6a86 	vmul.f32	s12, s15, s12
 8006b5a:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006b5e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006b62:	ee65 5aa1 	vmul.f32	s11, s11, s3
 8006b66:	ee27 7a02 	vmul.f32	s14, s14, s4
 8006b6a:	ee64 1a84 	vmul.f32	s3, s9, s8
 8006b6e:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8006b72:	ee23 4a04 	vmul.f32	s8, s6, s8
 8006b76:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006b7a:	ee35 5a01 	vadd.f32	s10, s10, s2
 8006b7e:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8006b82:	ee76 6aa1 	vadd.f32	s13, s13, s3
 8006b86:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8006b8a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006b8e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006b92:	3308      	adds	r3, #8
 8006b94:	4598      	cmp	r8, r3
 8006b96:	edc1 6a00 	vstr	s13, [r1]
 8006b9a:	edc1 4a01 	vstr	s9, [r1, #4]
 8006b9e:	4474      	add	r4, lr
 8006ba0:	ed82 5a00 	vstr	s10, [r2]
 8006ba4:	edc2 5a01 	vstr	s11, [r2, #4]
 8006ba8:	4465      	add	r5, ip
 8006baa:	edc0 7a00 	vstr	s15, [r0]
 8006bae:	ed80 7a01 	vstr	s14, [r0, #4]
 8006bb2:	443e      	add	r6, r7
 8006bb4:	f101 0108 	add.w	r1, r1, #8
 8006bb8:	f102 0208 	add.w	r2, r2, #8
 8006bbc:	f100 0008 	add.w	r0, r0, #8
 8006bc0:	d183      	bne.n	8006aca <arm_radix4_butterfly_f32+0x42>
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8006bc8:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2a04      	cmp	r2, #4
 8006bd0:	9307      	str	r3, [sp, #28]
 8006bd2:	f240 80b6 	bls.w	8006d42 <arm_radix4_butterfly_f32+0x2ba>
 8006bd6:	9807      	ldr	r0, [sp, #28]
 8006bd8:	9208      	str	r2, [sp, #32]
 8006bda:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006be2:	9306      	str	r3, [sp, #24]
 8006be4:	00c3      	lsls	r3, r0, #3
 8006be6:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8006bea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	0103      	lsls	r3, r0, #4
 8006bf0:	9202      	str	r2, [sp, #8]
 8006bf2:	eb06 1802 	add.w	r8, r6, r2, lsl #4
 8006bf6:	9304      	str	r3, [sp, #16]
 8006bf8:	00d2      	lsls	r2, r2, #3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9203      	str	r2, [sp, #12]
 8006bfe:	46be      	mov	lr, r7
 8006c00:	46bc      	mov	ip, r7
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	ed17 0a01 	vldr	s0, [r7, #-4]
 8006c0a:	edd7 0a00 	vldr	s1, [r7]
 8006c0e:	ed1c 1a01 	vldr	s2, [ip, #-4]
 8006c12:	eddc 1a00 	vldr	s3, [ip]
 8006c16:	ed1e 2a01 	vldr	s4, [lr, #-4]
 8006c1a:	edde 2a00 	vldr	s5, [lr]
 8006c1e:	9d01      	ldr	r5, [sp, #4]
 8006c20:	1999      	adds	r1, r3, r6
 8006c22:	eb03 0208 	add.w	r2, r3, r8
 8006c26:	1d34      	adds	r4, r6, #4
 8006c28:	4643      	mov	r3, r8
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	ed14 7a01 	vldr	s14, [r4, #-4]
 8006c30:	edd3 3a00 	vldr	s7, [r3]
 8006c34:	edd2 4a00 	vldr	s9, [r2]
 8006c38:	edd0 5a01 	vldr	s11, [r0, #4]
 8006c3c:	ed93 6a01 	vldr	s12, [r3, #4]
 8006c40:	edd2 6a01 	vldr	s13, [r2, #4]
 8006c44:	edd1 7a00 	vldr	s15, [r1]
 8006c48:	ed91 5a01 	vldr	s10, [r1, #4]
 8006c4c:	ee37 4a23 	vadd.f32	s8, s14, s7
 8006c50:	ee37 9aa4 	vadd.f32	s18, s15, s9
 8006c54:	ee75 8a26 	vadd.f32	s17, s10, s13
 8006c58:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006c5c:	ee35 5a66 	vsub.f32	s10, s10, s13
 8006c60:	ee75 4a86 	vadd.f32	s9, s11, s12
 8006c64:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006c68:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8006c6c:	ee77 3a05 	vadd.f32	s7, s14, s10
 8006c70:	ee75 6ae7 	vsub.f32	s13, s11, s15
 8006c74:	ee34 3a49 	vsub.f32	s6, s8, s18
 8006c78:	ee34 6ae8 	vsub.f32	s12, s9, s17
 8006c7c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006c80:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006c84:	ee61 aa03 	vmul.f32	s21, s2, s6
 8006c88:	ee21 8a86 	vmul.f32	s16, s3, s12
 8006c8c:	ee20 aa23 	vmul.f32	s20, s0, s7
 8006c90:	ee20 5aa6 	vmul.f32	s10, s1, s13
 8006c94:	ee62 9a07 	vmul.f32	s19, s4, s14
 8006c98:	ee62 5aa7 	vmul.f32	s11, s5, s15
 8006c9c:	ee21 3a83 	vmul.f32	s6, s3, s6
 8006ca0:	ee21 6a06 	vmul.f32	s12, s2, s12
 8006ca4:	ee60 3aa3 	vmul.f32	s7, s1, s7
 8006ca8:	ee60 6a26 	vmul.f32	s13, s0, s13
 8006cac:	ee22 7a87 	vmul.f32	s14, s5, s14
 8006cb0:	ee62 7a27 	vmul.f32	s15, s4, s15
 8006cb4:	ee34 4a09 	vadd.f32	s8, s8, s18
 8006cb8:	ee74 4aa8 	vadd.f32	s9, s9, s17
 8006cbc:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8006cc0:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006cc4:	ee35 5a0a 	vadd.f32	s10, s10, s20
 8006cc8:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8006ccc:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8006cd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cd4:	445d      	add	r5, fp
 8006cd6:	45aa      	cmp	sl, r5
 8006cd8:	ed04 4a01 	vstr	s8, [r4, #-4]
 8006cdc:	edc0 4a01 	vstr	s9, [r0, #4]
 8006ce0:	444c      	add	r4, r9
 8006ce2:	ed81 8a00 	vstr	s16, [r1]
 8006ce6:	ed81 6a01 	vstr	s12, [r1, #4]
 8006cea:	4448      	add	r0, r9
 8006cec:	ed83 5a00 	vstr	s10, [r3]
 8006cf0:	edc3 6a01 	vstr	s13, [r3, #4]
 8006cf4:	4449      	add	r1, r9
 8006cf6:	edc2 5a00 	vstr	s11, [r2]
 8006cfa:	edc2 7a01 	vstr	s15, [r2, #4]
 8006cfe:	444b      	add	r3, r9
 8006d00:	444a      	add	r2, r9
 8006d02:	d893      	bhi.n	8006c2c <arm_radix4_butterfly_f32+0x1a4>
 8006d04:	9a05      	ldr	r2, [sp, #20]
 8006d06:	9b01      	ldr	r3, [sp, #4]
 8006d08:	4417      	add	r7, r2
 8006d0a:	9a04      	ldr	r2, [sp, #16]
 8006d0c:	4494      	add	ip, r2
 8006d0e:	9a06      	ldr	r2, [sp, #24]
 8006d10:	4496      	add	lr, r2
 8006d12:	9a02      	ldr	r2, [sp, #8]
 8006d14:	3301      	adds	r3, #1
 8006d16:	429a      	cmp	r2, r3
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	f106 0608 	add.w	r6, r6, #8
 8006d1e:	f108 0808 	add.w	r8, r8, #8
 8006d22:	f47f af6f 	bne.w	8006c04 <arm_radix4_butterfly_f32+0x17c>
 8006d26:	9b07      	ldr	r3, [sp, #28]
 8006d28:	4693      	mov	fp, r2
 8006d2a:	9a08      	ldr	r2, [sp, #32]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	0892      	lsrs	r2, r2, #2
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2a04      	cmp	r2, #4
 8006d34:	9208      	str	r2, [sp, #32]
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	d903      	bls.n	8006d42 <arm_radix4_butterfly_f32+0x2ba>
 8006d3a:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8006d3e:	4618      	mov	r0, r3
 8006d40:	e74b      	b.n	8006bda <arm_radix4_butterfly_f32+0x152>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d46:	3320      	adds	r3, #32
 8006d48:	ed13 4a04 	vldr	s8, [r3, #-16]
 8006d4c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8006d50:	ed53 5a01 	vldr	s11, [r3, #-4]
 8006d54:	ed53 3a03 	vldr	s7, [r3, #-12]
 8006d58:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8006d5c:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8006d60:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8006d64:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 8006d68:	ee37 5a04 	vadd.f32	s10, s14, s8
 8006d6c:	ee37 7a44 	vsub.f32	s14, s14, s8
 8006d70:	ee36 4aa4 	vadd.f32	s8, s13, s9
 8006d74:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8006d78:	ee76 4a65 	vsub.f32	s9, s12, s11
 8006d7c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8006d80:	ee77 5aa3 	vadd.f32	s11, s15, s7
 8006d84:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8006d88:	ee75 3a04 	vadd.f32	s7, s10, s8
 8006d8c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006d90:	ee37 4a24 	vadd.f32	s8, s14, s9
 8006d94:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006d98:	ee75 4a86 	vadd.f32	s9, s11, s12
 8006d9c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006da0:	ee77 5ae6 	vsub.f32	s11, s15, s13
 8006da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da8:	3a01      	subs	r2, #1
 8006daa:	ed43 3a08 	vstr	s7, [r3, #-32]	; 0xffffffe0
 8006dae:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8006db2:	ed03 4a04 	vstr	s8, [r3, #-16]
 8006db6:	ed03 7a02 	vstr	s14, [r3, #-8]
 8006dba:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8006dbe:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 8006dc2:	ed43 5a03 	vstr	s11, [r3, #-12]
 8006dc6:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006dca:	f103 0320 	add.w	r3, r3, #32
 8006dce:	d1bb      	bne.n	8006d48 <arm_radix4_butterfly_f32+0x2c0>
 8006dd0:	b00d      	add	sp, #52	; 0x34
 8006dd2:	ecbd 8b06 	vpop	{d8-d10}
 8006dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dda:	bf00      	nop

08006ddc <arm_radix4_butterfly_inverse_f32>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	ed2d 8b08 	vpush	{d8-d11}
 8006de4:	088d      	lsrs	r5, r1, #2
 8006de6:	b08d      	sub	sp, #52	; 0x34
 8006de8:	012c      	lsls	r4, r5, #4
 8006dea:	461e      	mov	r6, r3
 8006dec:	3204      	adds	r2, #4
 8006dee:	468a      	mov	sl, r1
 8006df0:	900a      	str	r0, [sp, #40]	; 0x28
 8006df2:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	4603      	mov	r3, r0
 8006dfa:	4420      	add	r0, r4
 8006dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dfe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006e02:	190a      	adds	r2, r1, r4
 8006e04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006e06:	9502      	str	r5, [sp, #8]
 8006e08:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8006e0c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8006e10:	46ab      	mov	fp, r5
 8006e12:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 8006e16:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8006e1a:	eb03 0809 	add.w	r8, r3, r9
 8006e1e:	00ff      	lsls	r7, r7, #3
 8006e20:	4626      	mov	r6, r4
 8006e22:	4625      	mov	r5, r4
 8006e24:	edd3 7a00 	vldr	s15, [r3]
 8006e28:	edd2 1a00 	vldr	s3, [r2]
 8006e2c:	ed90 2a01 	vldr	s4, [r0, #4]
 8006e30:	edd2 2a01 	vldr	s5, [r2, #4]
 8006e34:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e38:	ed90 1a00 	vldr	s2, [r0]
 8006e3c:	edd1 4a00 	vldr	s9, [r1]
 8006e40:	ed91 4a01 	vldr	s8, [r1, #4]
 8006e44:	ed14 3a01 	vldr	s6, [r4, #-4]
 8006e48:	edd4 5a00 	vldr	s11, [r4]
 8006e4c:	ee74 3aa1 	vadd.f32	s7, s9, s3
 8006e50:	ee34 6a22 	vadd.f32	s12, s8, s5
 8006e54:	ee77 6a02 	vadd.f32	s13, s14, s4
 8006e58:	ee37 5a81 	vadd.f32	s10, s15, s2
 8006e5c:	ee76 0a86 	vadd.f32	s1, s13, s12
 8006e60:	ee35 8a23 	vadd.f32	s16, s10, s7
 8006e64:	ee74 4ae1 	vsub.f32	s9, s9, s3
 8006e68:	ee34 4a62 	vsub.f32	s8, s8, s5
 8006e6c:	ee37 7a42 	vsub.f32	s14, s14, s4
 8006e70:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8006e74:	ed83 8a00 	vstr	s16, [r3]
 8006e78:	edc3 0a01 	vstr	s1, [r3, #4]
 8006e7c:	ed15 2a01 	vldr	s4, [r5, #-4]
 8006e80:	edd5 2a00 	vldr	s5, [r5]
 8006e84:	edd6 1a00 	vldr	s3, [r6]
 8006e88:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006e8c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006e90:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006e94:	ee37 6ac4 	vsub.f32	s12, s15, s8
 8006e98:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006e9c:	ee34 4a87 	vadd.f32	s8, s9, s14
 8006ea0:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006ea4:	ee66 4a02 	vmul.f32	s9, s12, s4
 8006ea8:	ee26 6a22 	vmul.f32	s12, s12, s5
 8006eac:	ee64 2a22 	vmul.f32	s5, s8, s5
 8006eb0:	ee24 4a02 	vmul.f32	s8, s8, s4
 8006eb4:	ee23 2a05 	vmul.f32	s4, s6, s10
 8006eb8:	ee23 3a26 	vmul.f32	s6, s6, s13
 8006ebc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8006ec0:	ee65 5a85 	vmul.f32	s11, s11, s10
 8006ec4:	ee27 5aa3 	vmul.f32	s10, s15, s7
 8006ec8:	ee67 3a23 	vmul.f32	s7, s14, s7
 8006ecc:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8006ed0:	ee27 7a21 	vmul.f32	s14, s14, s3
 8006ed4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006ed8:	ee36 6a04 	vadd.f32	s12, s12, s8
 8006edc:	ee72 4a66 	vsub.f32	s9, s4, s13
 8006ee0:	ee35 7a47 	vsub.f32	s14, s10, s14
 8006ee4:	ee75 6a83 	vadd.f32	s13, s11, s6
 8006ee8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006eec:	3308      	adds	r3, #8
 8006eee:	4598      	cmp	r8, r3
 8006ef0:	edc1 4a00 	vstr	s9, [r1]
 8006ef4:	edc1 6a01 	vstr	s13, [r1, #4]
 8006ef8:	4474      	add	r4, lr
 8006efa:	edc0 2a00 	vstr	s5, [r0]
 8006efe:	ed80 6a01 	vstr	s12, [r0, #4]
 8006f02:	4465      	add	r5, ip
 8006f04:	ed82 7a00 	vstr	s14, [r2]
 8006f08:	edc2 7a01 	vstr	s15, [r2, #4]
 8006f0c:	443e      	add	r6, r7
 8006f0e:	f101 0108 	add.w	r1, r1, #8
 8006f12:	f100 0008 	add.w	r0, r0, #8
 8006f16:	f102 0208 	add.w	r2, r2, #8
 8006f1a:	d183      	bne.n	8006e24 <arm_radix4_butterfly_inverse_f32+0x48>
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8006f22:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2a04      	cmp	r2, #4
 8006f2a:	9307      	str	r3, [sp, #28]
 8006f2c:	f240 80b6 	bls.w	800709c <arm_radix4_butterfly_inverse_f32+0x2c0>
 8006f30:	9807      	ldr	r0, [sp, #28]
 8006f32:	9208      	str	r2, [sp, #32]
 8006f34:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006f3c:	9306      	str	r3, [sp, #24]
 8006f3e:	00c3      	lsls	r3, r0, #3
 8006f40:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8006f44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	0103      	lsls	r3, r0, #4
 8006f4a:	9202      	str	r2, [sp, #8]
 8006f4c:	eb06 1802 	add.w	r8, r6, r2, lsl #4
 8006f50:	9304      	str	r3, [sp, #16]
 8006f52:	00d2      	lsls	r2, r2, #3
 8006f54:	2300      	movs	r3, #0
 8006f56:	9203      	str	r2, [sp, #12]
 8006f58:	46be      	mov	lr, r7
 8006f5a:	46bc      	mov	ip, r7
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	ed17 1a01 	vldr	s2, [r7, #-4]
 8006f64:	edd7 1a00 	vldr	s3, [r7]
 8006f68:	ed1c 2a01 	vldr	s4, [ip, #-4]
 8006f6c:	eddc 2a00 	vldr	s5, [ip]
 8006f70:	ed1e 3a01 	vldr	s6, [lr, #-4]
 8006f74:	edde 3a00 	vldr	s7, [lr]
 8006f78:	9d01      	ldr	r5, [sp, #4]
 8006f7a:	1999      	adds	r1, r3, r6
 8006f7c:	eb03 0208 	add.w	r2, r3, r8
 8006f80:	1d34      	adds	r4, r6, #4
 8006f82:	4643      	mov	r3, r8
 8006f84:	4630      	mov	r0, r6
 8006f86:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006f8a:	edd3 0a00 	vldr	s1, [r3]
 8006f8e:	edd2 4a00 	vldr	s9, [r2]
 8006f92:	ed90 7a01 	vldr	s14, [r0, #4]
 8006f96:	ed93 6a01 	vldr	s12, [r3, #4]
 8006f9a:	edd2 6a01 	vldr	s13, [r2, #4]
 8006f9e:	edd1 5a00 	vldr	s11, [r1]
 8006fa2:	ed91 5a01 	vldr	s10, [r1, #4]
 8006fa6:	ee37 4aa0 	vadd.f32	s8, s15, s1
 8006faa:	ee35 9aa4 	vadd.f32	s18, s11, s9
 8006fae:	ee75 9a26 	vadd.f32	s19, s10, s13
 8006fb2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8006fb6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006fba:	ee77 4a06 	vadd.f32	s9, s14, s12
 8006fbe:	ee35 5a66 	vsub.f32	s10, s10, s13
 8006fc2:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006fc6:	ee77 6ac5 	vsub.f32	s13, s15, s10
 8006fca:	ee34 6a49 	vsub.f32	s12, s8, s18
 8006fce:	ee74 0ae9 	vsub.f32	s1, s9, s19
 8006fd2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8006fd6:	ee35 5a87 	vadd.f32	s10, s11, s14
 8006fda:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006fde:	ee62 8a06 	vmul.f32	s17, s4, s12
 8006fe2:	ee22 baa0 	vmul.f32	s22, s5, s1
 8006fe6:	ee21 8a26 	vmul.f32	s16, s2, s13
 8006fea:	ee62 0a20 	vmul.f32	s1, s4, s1
 8006fee:	ee61 aa85 	vmul.f32	s21, s3, s10
 8006ff2:	ee63 5a27 	vmul.f32	s11, s6, s15
 8006ff6:	ee23 aa87 	vmul.f32	s20, s7, s14
 8006ffa:	ee22 6a86 	vmul.f32	s12, s5, s12
 8006ffe:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8007002:	ee21 5a05 	vmul.f32	s10, s2, s10
 8007006:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800700a:	ee23 7a07 	vmul.f32	s14, s6, s14
 800700e:	ee36 6a20 	vadd.f32	s12, s12, s1
 8007012:	ee34 4a09 	vadd.f32	s8, s8, s18
 8007016:	ee74 4aa9 	vadd.f32	s9, s9, s19
 800701a:	ee78 8acb 	vsub.f32	s17, s17, s22
 800701e:	ee78 0a6a 	vsub.f32	s1, s16, s21
 8007022:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007026:	ee75 5aca 	vsub.f32	s11, s11, s20
 800702a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800702e:	445d      	add	r5, fp
 8007030:	45aa      	cmp	sl, r5
 8007032:	ed04 4a01 	vstr	s8, [r4, #-4]
 8007036:	edc0 4a01 	vstr	s9, [r0, #4]
 800703a:	444c      	add	r4, r9
 800703c:	edc1 8a00 	vstr	s17, [r1]
 8007040:	ed81 6a01 	vstr	s12, [r1, #4]
 8007044:	4448      	add	r0, r9
 8007046:	edc3 0a00 	vstr	s1, [r3]
 800704a:	edc3 6a01 	vstr	s13, [r3, #4]
 800704e:	4449      	add	r1, r9
 8007050:	edc2 5a00 	vstr	s11, [r2]
 8007054:	edc2 7a01 	vstr	s15, [r2, #4]
 8007058:	444b      	add	r3, r9
 800705a:	444a      	add	r2, r9
 800705c:	d893      	bhi.n	8006f86 <arm_radix4_butterfly_inverse_f32+0x1aa>
 800705e:	9a05      	ldr	r2, [sp, #20]
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	4417      	add	r7, r2
 8007064:	9a04      	ldr	r2, [sp, #16]
 8007066:	4494      	add	ip, r2
 8007068:	9a06      	ldr	r2, [sp, #24]
 800706a:	4496      	add	lr, r2
 800706c:	9a02      	ldr	r2, [sp, #8]
 800706e:	3301      	adds	r3, #1
 8007070:	429a      	cmp	r2, r3
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	f106 0608 	add.w	r6, r6, #8
 8007078:	f108 0808 	add.w	r8, r8, #8
 800707c:	f47f af6f 	bne.w	8006f5e <arm_radix4_butterfly_inverse_f32+0x182>
 8007080:	9b07      	ldr	r3, [sp, #28]
 8007082:	4693      	mov	fp, r2
 8007084:	9a08      	ldr	r2, [sp, #32]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	0892      	lsrs	r2, r2, #2
 800708a:	b29b      	uxth	r3, r3
 800708c:	2a04      	cmp	r2, #4
 800708e:	9208      	str	r2, [sp, #32]
 8007090:	9307      	str	r3, [sp, #28]
 8007092:	d903      	bls.n	800709c <arm_radix4_butterfly_inverse_f32+0x2c0>
 8007094:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8007098:	4618      	mov	r0, r3
 800709a:	e74b      	b.n	8006f34 <arm_radix4_butterfly_inverse_f32+0x158>
 800709c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070a0:	3320      	adds	r3, #32
 80070a2:	ed13 4a04 	vldr	s8, [r3, #-16]
 80070a6:	ed53 4a02 	vldr	s9, [r3, #-8]
 80070aa:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80070ae:	ed53 3a03 	vldr	s7, [r3, #-12]
 80070b2:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 80070b6:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 80070ba:	ed13 5a01 	vldr	s10, [r3, #-4]
 80070be:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 80070c2:	ee37 6a04 	vadd.f32	s12, s14, s8
 80070c6:	ee37 7a44 	vsub.f32	s14, s14, s8
 80070ca:	ee35 4aa4 	vadd.f32	s8, s11, s9
 80070ce:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80070d2:	ee76 4ac5 	vsub.f32	s9, s13, s10
 80070d6:	ee36 5a85 	vadd.f32	s10, s13, s10
 80070da:	ee77 6aa3 	vadd.f32	s13, s15, s7
 80070de:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80070e2:	ee76 3a04 	vadd.f32	s7, s12, s8
 80070e6:	ee36 6a44 	vsub.f32	s12, s12, s8
 80070ea:	ee37 4a64 	vsub.f32	s8, s14, s9
 80070ee:	ee37 7a24 	vadd.f32	s14, s14, s9
 80070f2:	ee76 4a85 	vadd.f32	s9, s13, s10
 80070f6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80070fa:	ee37 5aa5 	vadd.f32	s10, s15, s11
 80070fe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007102:	ee63 3a80 	vmul.f32	s7, s7, s0
 8007106:	ee26 6a00 	vmul.f32	s12, s12, s0
 800710a:	ee24 4a00 	vmul.f32	s8, s8, s0
 800710e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8007112:	ee64 4a80 	vmul.f32	s9, s9, s0
 8007116:	ee66 6a80 	vmul.f32	s13, s13, s0
 800711a:	ee65 5a00 	vmul.f32	s11, s10, s0
 800711e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007122:	3a01      	subs	r2, #1
 8007124:	ed43 3a08 	vstr	s7, [r3, #-32]	; 0xffffffe0
 8007128:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800712c:	ed03 4a04 	vstr	s8, [r3, #-16]
 8007130:	ed03 7a02 	vstr	s14, [r3, #-8]
 8007134:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8007138:	ed43 6a05 	vstr	s13, [r3, #-20]	; 0xffffffec
 800713c:	ed43 5a03 	vstr	s11, [r3, #-12]
 8007140:	ed43 7a01 	vstr	s15, [r3, #-4]
 8007144:	f103 0320 	add.w	r3, r3, #32
 8007148:	d1ab      	bne.n	80070a2 <arm_radix4_butterfly_inverse_f32+0x2c6>
 800714a:	b00d      	add	sp, #52	; 0x34
 800714c:	ecbd 8b08 	vpop	{d8-d11}
 8007150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007154 <arm_cfft_radix4_f32>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	4604      	mov	r4, r0
 8007158:	7880      	ldrb	r0, [r0, #2]
 800715a:	6862      	ldr	r2, [r4, #4]
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	2801      	cmp	r0, #1
 8007160:	460d      	mov	r5, r1
 8007162:	8821      	ldrh	r1, [r4, #0]
 8007164:	d006      	beq.n	8007174 <arm_cfft_radix4_f32+0x20>
 8007166:	4628      	mov	r0, r5
 8007168:	f7ff fc8e 	bl	8006a88 <arm_radix4_butterfly_f32>
 800716c:	78e3      	ldrb	r3, [r4, #3]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d008      	beq.n	8007184 <arm_cfft_radix4_f32+0x30>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	ed94 0a04 	vldr	s0, [r4, #16]
 8007178:	4628      	mov	r0, r5
 800717a:	f7ff fe2f 	bl	8006ddc <arm_radix4_butterfly_inverse_f32>
 800717e:	78e3      	ldrb	r3, [r4, #3]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d1f6      	bne.n	8007172 <arm_cfft_radix4_f32+0x1e>
 8007184:	4628      	mov	r0, r5
 8007186:	68a3      	ldr	r3, [r4, #8]
 8007188:	89e2      	ldrh	r2, [r4, #14]
 800718a:	8821      	ldrh	r1, [r4, #0]
 800718c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007190:	f000 b800 	b.w	8007194 <arm_bitreversal_f32>

08007194 <arm_bitreversal_f32>:
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	b085      	sub	sp, #20
 800719a:	084c      	lsrs	r4, r1, #1
 800719c:	0052      	lsls	r2, r2, #1
 800719e:	2100      	movs	r1, #0
 80071a0:	9201      	str	r2, [sp, #4]
 80071a2:	1ea2      	subs	r2, r4, #2
 80071a4:	9402      	str	r4, [sp, #8]
 80071a6:	f104 0e01 	add.w	lr, r4, #1
 80071aa:	9203      	str	r2, [sp, #12]
 80071ac:	460c      	mov	r4, r1
 80071ae:	460a      	mov	r2, r1
 80071b0:	9d02      	ldr	r5, [sp, #8]
 80071b2:	3101      	adds	r1, #1
 80071b4:	442a      	add	r2, r5
 80071b6:	00c9      	lsls	r1, r1, #3
 80071b8:	00d2      	lsls	r2, r2, #3
 80071ba:	1846      	adds	r6, r0, r1
 80071bc:	1885      	adds	r5, r0, r2
 80071be:	3104      	adds	r1, #4
 80071c0:	3204      	adds	r2, #4
 80071c2:	6837      	ldr	r7, [r6, #0]
 80071c4:	f8d5 c000 	ldr.w	ip, [r5]
 80071c8:	f8c6 c000 	str.w	ip, [r6]
 80071cc:	4401      	add	r1, r0
 80071ce:	4402      	add	r2, r0
 80071d0:	602f      	str	r7, [r5, #0]
 80071d2:	3402      	adds	r4, #2
 80071d4:	680e      	ldr	r6, [r1, #0]
 80071d6:	f8d2 9000 	ldr.w	r9, [r2]
 80071da:	f8c1 9000 	str.w	r9, [r1]
 80071de:	b2a4      	uxth	r4, r4
 80071e0:	6016      	str	r6, [r2, #0]
 80071e2:	eb04 050e 	add.w	r5, r4, lr
 80071e6:	881a      	ldrh	r2, [r3, #0]
 80071e8:	00ed      	lsls	r5, r5, #3
 80071ea:	eb00 0c05 	add.w	ip, r0, r5
 80071ee:	3504      	adds	r5, #4
 80071f0:	9500      	str	r5, [sp, #0]
 80071f2:	eb02 010e 	add.w	r1, r2, lr
 80071f6:	9d03      	ldr	r5, [sp, #12]
 80071f8:	00c9      	lsls	r1, r1, #3
 80071fa:	00e7      	lsls	r7, r4, #3
 80071fc:	00d6      	lsls	r6, r2, #3
 80071fe:	f101 0b04 	add.w	fp, r1, #4
 8007202:	eb00 0901 	add.w	r9, r0, r1
 8007206:	42ac      	cmp	r4, r5
 8007208:	9901      	ldr	r1, [sp, #4]
 800720a:	9d00      	ldr	r5, [sp, #0]
 800720c:	eb00 0807 	add.w	r8, r0, r7
 8007210:	eb00 0a06 	add.w	sl, r0, r6
 8007214:	f107 0704 	add.w	r7, r7, #4
 8007218:	f106 0604 	add.w	r6, r6, #4
 800721c:	440b      	add	r3, r1
 800721e:	4407      	add	r7, r0
 8007220:	4406      	add	r6, r0
 8007222:	4621      	mov	r1, r4
 8007224:	4405      	add	r5, r0
 8007226:	4483      	add	fp, r0
 8007228:	d820      	bhi.n	800726c <arm_bitreversal_f32+0xd8>
 800722a:	42a2      	cmp	r2, r4
 800722c:	d9c0      	bls.n	80071b0 <arm_bitreversal_f32+0x1c>
 800722e:	edd8 7a00 	vldr	s15, [r8]
 8007232:	ed9a 7a00 	vldr	s14, [sl]
 8007236:	ed88 7a00 	vstr	s14, [r8]
 800723a:	edca 7a00 	vstr	s15, [sl]
 800723e:	f8d7 8000 	ldr.w	r8, [r7]
 8007242:	f8d6 a000 	ldr.w	sl, [r6]
 8007246:	f8c7 a000 	str.w	sl, [r7]
 800724a:	f8c6 8000 	str.w	r8, [r6]
 800724e:	f8dc 6000 	ldr.w	r6, [ip]
 8007252:	f8d9 7000 	ldr.w	r7, [r9]
 8007256:	f8cc 7000 	str.w	r7, [ip]
 800725a:	f8c9 6000 	str.w	r6, [r9]
 800725e:	682e      	ldr	r6, [r5, #0]
 8007260:	f8db 7000 	ldr.w	r7, [fp]
 8007264:	602f      	str	r7, [r5, #0]
 8007266:	f8cb 6000 	str.w	r6, [fp]
 800726a:	e7a1      	b.n	80071b0 <arm_bitreversal_f32+0x1c>
 800726c:	b005      	add	sp, #20
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	bf00      	nop

08007274 <arm_cmplx_mag_f32>:
 8007274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007278:	ed2d 8b02 	vpush	{d8}
 800727c:	0897      	lsrs	r7, r2, #2
 800727e:	b084      	sub	sp, #16
 8007280:	d077      	beq.n	8007372 <arm_cmplx_mag_f32+0xfe>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	f100 0420 	add.w	r4, r0, #32
 800728a:	f101 0510 	add.w	r5, r1, #16
 800728e:	463e      	mov	r6, r7
 8007290:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8007294:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8007298:	ee20 0a00 	vmul.f32	s0, s0, s0
 800729c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80072a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80072a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80072a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ac:	f2c0 80c5 	blt.w	800743a <arm_cmplx_mag_f32+0x1c6>
 80072b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80072b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80072bc:	f100 80cb 	bmi.w	8007456 <arm_cmplx_mag_f32+0x1e2>
 80072c0:	ed05 8a04 	vstr	s16, [r5, #-16]
 80072c4:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80072c8:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80072cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80072d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80072d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80072d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80072dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e0:	f2c0 80a8 	blt.w	8007434 <arm_cmplx_mag_f32+0x1c0>
 80072e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80072e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80072f0:	f100 80a8 	bmi.w	8007444 <arm_cmplx_mag_f32+0x1d0>
 80072f4:	ed05 8a03 	vstr	s16, [r5, #-12]
 80072f8:	ed14 0a04 	vldr	s0, [r4, #-16]
 80072fc:	ed54 7a03 	vldr	s15, [r4, #-12]
 8007300:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007304:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007308:	ee30 0a27 	vadd.f32	s0, s0, s15
 800730c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	f2c0 808b 	blt.w	800742e <arm_cmplx_mag_f32+0x1ba>
 8007318:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800731c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007320:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007324:	f100 80a9 	bmi.w	800747a <arm_cmplx_mag_f32+0x206>
 8007328:	ed05 8a02 	vstr	s16, [r5, #-8]
 800732c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007330:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007334:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800733c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007340:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007348:	db6e      	blt.n	8007428 <arm_cmplx_mag_f32+0x1b4>
 800734a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800734e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007352:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007356:	f100 8087 	bmi.w	8007468 <arm_cmplx_mag_f32+0x1f4>
 800735a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800735e:	3e01      	subs	r6, #1
 8007360:	f104 0420 	add.w	r4, r4, #32
 8007364:	f105 0510 	add.w	r5, r5, #16
 8007368:	d192      	bne.n	8007290 <arm_cmplx_mag_f32+0x1c>
 800736a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800736e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8007372:	f012 0203 	ands.w	r2, r2, #3
 8007376:	d052      	beq.n	800741e <arm_cmplx_mag_f32+0x1aa>
 8007378:	ed90 0a00 	vldr	s0, [r0]
 800737c:	edd0 7a01 	vldr	s15, [r0, #4]
 8007380:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007384:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007388:	2300      	movs	r3, #0
 800738a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800738e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007396:	bfb8      	it	lt
 8007398:	600b      	strlt	r3, [r1, #0]
 800739a:	db08      	blt.n	80073ae <arm_cmplx_mag_f32+0x13a>
 800739c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80073a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80073a8:	d479      	bmi.n	800749e <arm_cmplx_mag_f32+0x22a>
 80073aa:	ed81 8a00 	vstr	s16, [r1]
 80073ae:	3a01      	subs	r2, #1
 80073b0:	d035      	beq.n	800741e <arm_cmplx_mag_f32+0x1aa>
 80073b2:	ed90 0a02 	vldr	s0, [r0, #8]
 80073b6:	edd0 7a03 	vldr	s15, [r0, #12]
 80073ba:	ee20 0a00 	vmul.f32	s0, s0, s0
 80073be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073c2:	2300      	movs	r3, #0
 80073c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80073c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80073cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d0:	bfb8      	it	lt
 80073d2:	604b      	strlt	r3, [r1, #4]
 80073d4:	db08      	blt.n	80073e8 <arm_cmplx_mag_f32+0x174>
 80073d6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80073da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073de:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80073e2:	d453      	bmi.n	800748c <arm_cmplx_mag_f32+0x218>
 80073e4:	ed81 8a01 	vstr	s16, [r1, #4]
 80073e8:	2a01      	cmp	r2, #1
 80073ea:	d018      	beq.n	800741e <arm_cmplx_mag_f32+0x1aa>
 80073ec:	ed90 0a04 	vldr	s0, [r0, #16]
 80073f0:	edd0 7a05 	vldr	s15, [r0, #20]
 80073f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80073f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073fc:	2300      	movs	r3, #0
 80073fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007402:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740a:	db19      	blt.n	8007440 <arm_cmplx_mag_f32+0x1cc>
 800740c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007414:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007418:	d44a      	bmi.n	80074b0 <arm_cmplx_mag_f32+0x23c>
 800741a:	ed81 8a02 	vstr	s16, [r1, #8]
 800741e:	b004      	add	sp, #16
 8007420:	ecbd 8b02 	vpop	{d8}
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007428:	f845 8c04 	str.w	r8, [r5, #-4]
 800742c:	e797      	b.n	800735e <arm_cmplx_mag_f32+0xea>
 800742e:	f845 8c08 	str.w	r8, [r5, #-8]
 8007432:	e77b      	b.n	800732c <arm_cmplx_mag_f32+0xb8>
 8007434:	f845 8c0c 	str.w	r8, [r5, #-12]
 8007438:	e75e      	b.n	80072f8 <arm_cmplx_mag_f32+0x84>
 800743a:	f845 8c10 	str.w	r8, [r5, #-16]
 800743e:	e741      	b.n	80072c4 <arm_cmplx_mag_f32+0x50>
 8007440:	608b      	str	r3, [r1, #8]
 8007442:	e7ec      	b.n	800741e <arm_cmplx_mag_f32+0x1aa>
 8007444:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007448:	9001      	str	r0, [sp, #4]
 800744a:	f004 f96f 	bl	800b72c <sqrtf>
 800744e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007452:	9801      	ldr	r0, [sp, #4]
 8007454:	e74e      	b.n	80072f4 <arm_cmplx_mag_f32+0x80>
 8007456:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800745a:	9001      	str	r0, [sp, #4]
 800745c:	f004 f966 	bl	800b72c <sqrtf>
 8007460:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007464:	9801      	ldr	r0, [sp, #4]
 8007466:	e72b      	b.n	80072c0 <arm_cmplx_mag_f32+0x4c>
 8007468:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800746c:	9001      	str	r0, [sp, #4]
 800746e:	f004 f95d 	bl	800b72c <sqrtf>
 8007472:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007476:	9801      	ldr	r0, [sp, #4]
 8007478:	e76f      	b.n	800735a <arm_cmplx_mag_f32+0xe6>
 800747a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800747e:	9001      	str	r0, [sp, #4]
 8007480:	f004 f954 	bl	800b72c <sqrtf>
 8007484:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007488:	9801      	ldr	r0, [sp, #4]
 800748a:	e74d      	b.n	8007328 <arm_cmplx_mag_f32+0xb4>
 800748c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007490:	9201      	str	r2, [sp, #4]
 8007492:	f004 f94b 	bl	800b72c <sqrtf>
 8007496:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800749a:	9903      	ldr	r1, [sp, #12]
 800749c:	e7a2      	b.n	80073e4 <arm_cmplx_mag_f32+0x170>
 800749e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a2:	9201      	str	r2, [sp, #4]
 80074a4:	f004 f942 	bl	800b72c <sqrtf>
 80074a8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80074ac:	9903      	ldr	r1, [sp, #12]
 80074ae:	e77c      	b.n	80073aa <arm_cmplx_mag_f32+0x136>
 80074b0:	9101      	str	r1, [sp, #4]
 80074b2:	f004 f93b 	bl	800b72c <sqrtf>
 80074b6:	9901      	ldr	r1, [sp, #4]
 80074b8:	e7af      	b.n	800741a <arm_cmplx_mag_f32+0x1a6>
 80074ba:	bf00      	nop

080074bc <_platform_network_state_setup.isra.1>:
 80074bc:	b430      	push	{r4, r5}
 80074be:	68dd      	ldr	r5, [r3, #12]
 80074c0:	695c      	ldr	r4, [r3, #20]
 80074c2:	68ed      	ldr	r5, [r5, #12]
 80074c4:	68e4      	ldr	r4, [r4, #12]
 80074c6:	fb04 f405 	mul.w	r4, r4, r5
 80074ca:	6084      	str	r4, [r0, #8]
 80074cc:	8809      	ldrh	r1, [r1, #0]
 80074ce:	fb04 f401 	mul.w	r4, r4, r1
 80074d2:	60c4      	str	r4, [r0, #12]
 80074d4:	6811      	ldr	r1, [r2, #0]
 80074d6:	6041      	str	r1, [r0, #4]
 80074d8:	6812      	ldr	r2, [r2, #0]
 80074da:	4414      	add	r4, r2
 80074dc:	6004      	str	r4, [r0, #0]
 80074de:	699a      	ldr	r2, [r3, #24]
 80074e0:	6814      	ldr	r4, [r2, #0]
 80074e2:	00a4      	lsls	r4, r4, #2
 80074e4:	d407      	bmi.n	80074f6 <_platform_network_state_setup.isra.1+0x3a>
 80074e6:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	4421      	add	r1, r4
 80074ee:	6091      	str	r1, [r2, #8]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	6842      	ldr	r2, [r0, #4]
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	bc30      	pop	{r4, r5}
 80074f8:	4770      	bx	lr
	...

080074fc <ai_platform_network_create>:
 80074fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007500:	4f30      	ldr	r7, [pc, #192]	; (80075c4 <ai_platform_network_create+0xc8>)
 8007502:	4e31      	ldr	r6, [pc, #196]	; (80075c8 <ai_platform_network_create+0xcc>)
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	b083      	sub	sp, #12
 8007508:	f021 0101 	bic.w	r1, r1, #1
 800750c:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8007510:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	2101      	movs	r1, #1
 8007518:	6031      	str	r1, [r6, #0]
 800751a:	6831      	ldr	r1, [r6, #0]
 800751c:	2900      	cmp	r1, #0
 800751e:	d1fc      	bne.n	800751a <ai_platform_network_create+0x1e>
 8007520:	492a      	ldr	r1, [pc, #168]	; (80075cc <ai_platform_network_create+0xd0>)
 8007522:	4d2b      	ldr	r5, [pc, #172]	; (80075d0 <ai_platform_network_create+0xd4>)
 8007524:	600d      	str	r5, [r1, #0]
 8007526:	680d      	ldr	r5, [r1, #0]
 8007528:	492a      	ldr	r1, [pc, #168]	; (80075d4 <ai_platform_network_create+0xd8>)
 800752a:	428d      	cmp	r5, r1
 800752c:	d000      	beq.n	8007530 <ai_platform_network_create+0x34>
 800752e:	e7fe      	b.n	800752e <ai_platform_network_create+0x32>
 8007530:	b1e0      	cbz	r0, 800756c <ai_platform_network_create+0x70>
 8007532:	4680      	mov	r8, r0
 8007534:	461d      	mov	r5, r3
 8007536:	4b28      	ldr	r3, [pc, #160]	; (80075d8 <ai_platform_network_create+0xdc>)
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	f8c8 2000 	str.w	r2, [r8]
 800753e:	4617      	mov	r7, r2
 8007540:	f000 fb16 	bl	8007b70 <core_init>
 8007544:	b1b8      	cbz	r0, 8007576 <ai_platform_network_create+0x7a>
 8007546:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <ai_platform_network_create+0xc8>)
 8007548:	491f      	ldr	r1, [pc, #124]	; (80075c8 <ai_platform_network_create+0xcc>)
 800754a:	6813      	ldr	r3, [r2, #0]
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	2301      	movs	r3, #1
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	680e      	ldr	r6, [r1, #0]
 8007558:	2e00      	cmp	r6, #0
 800755a:	d1fc      	bne.n	8007556 <ai_platform_network_create+0x5a>
 800755c:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <ai_platform_network_create+0xd0>)
 800755e:	4a1c      	ldr	r2, [pc, #112]	; (80075d0 <ai_platform_network_create+0xd4>)
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	4b1b      	ldr	r3, [pc, #108]	; (80075d4 <ai_platform_network_create+0xd8>)
 8007566:	429a      	cmp	r2, r3
 8007568:	d016      	beq.n	8007598 <ai_platform_network_create+0x9c>
 800756a:	e7fe      	b.n	800756a <ai_platform_network_create+0x6e>
 800756c:	f241 0010 	movw	r0, #4112	; 0x1010
 8007570:	b003      	add	sp, #12
 8007572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007576:	062d      	lsls	r5, r5, #24
 8007578:	0424      	lsls	r4, r4, #16
 800757a:	2130      	movs	r1, #48	; 0x30
 800757c:	2300      	movs	r3, #0
 800757e:	f8c8 3000 	str.w	r3, [r8]
 8007582:	2210      	movs	r2, #16
 8007584:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8007588:	2000      	movs	r0, #0
 800758a:	432b      	orrs	r3, r5
 800758c:	f361 0007 	bfi	r0, r1, #0, #8
 8007590:	663b      	str	r3, [r7, #96]	; 0x60
 8007592:	f362 201f 	bfi	r0, r2, #8, #24
 8007596:	e7eb      	b.n	8007570 <ai_platform_network_create+0x74>
 8007598:	062d      	lsls	r5, r5, #24
 800759a:	0424      	lsls	r4, r4, #16
 800759c:	ea45 0304 	orr.w	r3, r5, r4
 80075a0:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80075a4:	d001      	beq.n	80075aa <ai_platform_network_create+0xae>
 80075a6:	2101      	movs	r1, #1
 80075a8:	e7e8      	b.n	800757c <ai_platform_network_create+0x80>
 80075aa:	a802      	add	r0, sp, #8
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <ai_platform_network_create+0xe0>)
 80075ae:	f840 3d04 	str.w	r3, [r0, #-4]!
 80075b2:	f001 f861 	bl	8008678 <ai_check_custom_types>
 80075b6:	b110      	cbz	r0, 80075be <ai_platform_network_create+0xc2>
 80075b8:	4632      	mov	r2, r6
 80075ba:	4631      	mov	r1, r6
 80075bc:	e7e2      	b.n	8007584 <ai_platform_network_create+0x88>
 80075be:	2102      	movs	r1, #2
 80075c0:	e7dc      	b.n	800757c <ai_platform_network_create+0x80>
 80075c2:	bf00      	nop
 80075c4:	e0002000 	.word	0xe0002000
 80075c8:	40023008 	.word	0x40023008
 80075cc:	40023000 	.word	0x40023000
 80075d0:	f407a5c2 	.word	0xf407a5c2
 80075d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80075d8:	a1c00100 	.word	0xa1c00100
 80075dc:	84048403 	.word	0x84048403

080075e0 <ai_platform_network_init>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	460c      	mov	r4, r1
 80075e4:	4605      	mov	r5, r0
 80075e6:	b120      	cbz	r0, 80075f2 <ai_platform_network_init+0x12>
 80075e8:	4b30      	ldr	r3, [pc, #192]	; (80076ac <ai_platform_network_init+0xcc>)
 80075ea:	6802      	ldr	r2, [r0, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	bf18      	it	ne
 80075f0:	2500      	movne	r5, #0
 80075f2:	492f      	ldr	r1, [pc, #188]	; (80076b0 <ai_platform_network_init+0xd0>)
 80075f4:	4a2f      	ldr	r2, [pc, #188]	; (80076b4 <ai_platform_network_init+0xd4>)
 80075f6:	680b      	ldr	r3, [r1, #0]
 80075f8:	2001      	movs	r0, #1
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	600b      	str	r3, [r1, #0]
 8007600:	4613      	mov	r3, r2
 8007602:	6010      	str	r0, [r2, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	2a00      	cmp	r2, #0
 8007608:	d1fc      	bne.n	8007604 <ai_platform_network_init+0x24>
 800760a:	4b2b      	ldr	r3, [pc, #172]	; (80076b8 <ai_platform_network_init+0xd8>)
 800760c:	4a2b      	ldr	r2, [pc, #172]	; (80076bc <ai_platform_network_init+0xdc>)
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b2b      	ldr	r3, [pc, #172]	; (80076c0 <ai_platform_network_init+0xe0>)
 8007614:	429a      	cmp	r2, r3
 8007616:	d000      	beq.n	800761a <ai_platform_network_init+0x3a>
 8007618:	e7fe      	b.n	8007618 <ai_platform_network_init+0x38>
 800761a:	b1dd      	cbz	r5, 8007654 <ai_platform_network_init+0x74>
 800761c:	b1e4      	cbz	r4, 8007658 <ai_platform_network_init+0x78>
 800761e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007620:	6926      	ldr	r6, [r4, #16]
 8007622:	b30f      	cbz	r7, 8007668 <ai_platform_network_init+0x88>
 8007624:	b38e      	cbz	r6, 800768a <ai_platform_network_init+0xaa>
 8007626:	4627      	mov	r7, r4
 8007628:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800762a:	f105 0618 	add.w	r6, r5, #24
 800762e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007630:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007634:	e886 0003 	stmia.w	r6, {r0, r1}
 8007638:	3418      	adds	r4, #24
 800763a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800763c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8007640:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007646:	2303      	movs	r3, #3
 8007648:	e886 0003 	stmia.w	r6, {r0, r1}
 800764c:	60eb      	str	r3, [r5, #12]
 800764e:	4628      	mov	r0, r5
 8007650:	f001 f83c 	bl	80086cc <ai_layers_init_all>
 8007654:	4628      	mov	r0, r5
 8007656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007658:	f105 0010 	add.w	r0, r5, #16
 800765c:	2211      	movs	r2, #17
 800765e:	2110      	movs	r1, #16
 8007660:	4625      	mov	r5, r4
 8007662:	f000 fa87 	bl	8007b74 <core_set_error>
 8007666:	e7f5      	b.n	8007654 <ai_platform_network_init+0x74>
 8007668:	8c21      	ldrh	r1, [r4, #32]
 800766a:	8be2      	ldrh	r2, [r4, #30]
 800766c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800766e:	fb02 f201 	mul.w	r2, r2, r1
 8007672:	fb03 f302 	mul.w	r3, r3, r2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0d4      	beq.n	8007624 <ai_platform_network_init+0x44>
 800767a:	f105 0010 	add.w	r0, r5, #16
 800767e:	2213      	movs	r2, #19
 8007680:	2110      	movs	r1, #16
 8007682:	463d      	mov	r5, r7
 8007684:	f000 fa76 	bl	8007b74 <core_set_error>
 8007688:	e7e4      	b.n	8007654 <ai_platform_network_init+0x74>
 800768a:	8921      	ldrh	r1, [r4, #8]
 800768c:	88e2      	ldrh	r2, [r4, #6]
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	fb02 f201 	mul.w	r2, r2, r1
 8007694:	fb03 f302 	mul.w	r3, r3, r2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0c4      	beq.n	8007626 <ai_platform_network_init+0x46>
 800769c:	f105 0010 	add.w	r0, r5, #16
 80076a0:	2212      	movs	r2, #18
 80076a2:	2110      	movs	r1, #16
 80076a4:	4635      	mov	r5, r6
 80076a6:	f000 fa65 	bl	8007b74 <core_set_error>
 80076aa:	e7d3      	b.n	8007654 <ai_platform_network_init+0x74>
 80076ac:	a1c00100 	.word	0xa1c00100
 80076b0:	e0002000 	.word	0xe0002000
 80076b4:	40023008 	.word	0x40023008
 80076b8:	40023000 	.word	0x40023000
 80076bc:	f407a5c2 	.word	0xf407a5c2
 80076c0:	b5e8b5cd 	.word	0xb5e8b5cd

080076c4 <ai_platform_network_post_init>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4604      	mov	r4, r0
 80076c8:	b120      	cbz	r0, 80076d4 <ai_platform_network_post_init+0x10>
 80076ca:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <ai_platform_network_post_init+0x80>)
 80076cc:	6802      	ldr	r2, [r0, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	bf18      	it	ne
 80076d2:	2400      	movne	r4, #0
 80076d4:	491c      	ldr	r1, [pc, #112]	; (8007748 <ai_platform_network_post_init+0x84>)
 80076d6:	4a1d      	ldr	r2, [pc, #116]	; (800774c <ai_platform_network_post_init+0x88>)
 80076d8:	680b      	ldr	r3, [r1, #0]
 80076da:	2001      	movs	r0, #1
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	600b      	str	r3, [r1, #0]
 80076e2:	4613      	mov	r3, r2
 80076e4:	6010      	str	r0, [r2, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	d1fc      	bne.n	80076e6 <ai_platform_network_post_init+0x22>
 80076ec:	4b18      	ldr	r3, [pc, #96]	; (8007750 <ai_platform_network_post_init+0x8c>)
 80076ee:	4a19      	ldr	r2, [pc, #100]	; (8007754 <ai_platform_network_post_init+0x90>)
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	4b18      	ldr	r3, [pc, #96]	; (8007758 <ai_platform_network_post_init+0x94>)
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d000      	beq.n	80076fc <ai_platform_network_post_init+0x38>
 80076fa:	e7fe      	b.n	80076fa <ai_platform_network_post_init+0x36>
 80076fc:	b1bc      	cbz	r4, 800772e <ai_platform_network_post_init+0x6a>
 80076fe:	68e3      	ldr	r3, [r4, #12]
 8007700:	f013 0502 	ands.w	r5, r3, #2
 8007704:	d015      	beq.n	8007732 <ai_platform_network_post_init+0x6e>
 8007706:	4620      	mov	r0, r4
 8007708:	f000 fff4 	bl	80086f4 <ai_layers_post_init_all>
 800770c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800770e:	b163      	cbz	r3, 800772a <ai_platform_network_post_init+0x66>
 8007710:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8007712:	b91d      	cbnz	r5, 800771c <ai_platform_network_post_init+0x58>
 8007714:	e009      	b.n	800772a <ai_platform_network_post_init+0x66>
 8007716:	461d      	mov	r5, r3
 8007718:	b13b      	cbz	r3, 800772a <ai_platform_network_post_init+0x66>
 800771a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800771c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800771e:	4629      	mov	r1, r5
 8007720:	2000      	movs	r0, #0
 8007722:	4798      	blx	r3
 8007724:	692b      	ldr	r3, [r5, #16]
 8007726:	42ab      	cmp	r3, r5
 8007728:	d1f5      	bne.n	8007716 <ai_platform_network_post_init+0x52>
 800772a:	2001      	movs	r0, #1
 800772c:	bd38      	pop	{r3, r4, r5, pc}
 800772e:	4620      	mov	r0, r4
 8007730:	bd38      	pop	{r3, r4, r5, pc}
 8007732:	f104 0010 	add.w	r0, r4, #16
 8007736:	2210      	movs	r2, #16
 8007738:	2111      	movs	r1, #17
 800773a:	f000 fa1b 	bl	8007b74 <core_set_error>
 800773e:	4628      	mov	r0, r5
 8007740:	bd38      	pop	{r3, r4, r5, pc}
 8007742:	bf00      	nop
 8007744:	a1c00100 	.word	0xa1c00100
 8007748:	e0002000 	.word	0xe0002000
 800774c:	40023008 	.word	0x40023008
 8007750:	40023000 	.word	0x40023000
 8007754:	f407a5c2 	.word	0xf407a5c2
 8007758:	b5e8b5cd 	.word	0xb5e8b5cd

0800775c <ai_platform_network_process>:
 800775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	b083      	sub	sp, #12
 8007762:	4604      	mov	r4, r0
 8007764:	9201      	str	r2, [sp, #4]
 8007766:	b120      	cbz	r0, 8007772 <ai_platform_network_process+0x16>
 8007768:	4ba5      	ldr	r3, [pc, #660]	; (8007a00 <ai_platform_network_process+0x2a4>)
 800776a:	6802      	ldr	r2, [r0, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	bf18      	it	ne
 8007770:	2400      	movne	r4, #0
 8007772:	48a4      	ldr	r0, [pc, #656]	; (8007a04 <ai_platform_network_process+0x2a8>)
 8007774:	4ba4      	ldr	r3, [pc, #656]	; (8007a08 <ai_platform_network_process+0x2ac>)
 8007776:	6802      	ldr	r2, [r0, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	6002      	str	r2, [r0, #0]
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	2a00      	cmp	r2, #0
 8007786:	d1fc      	bne.n	8007782 <ai_platform_network_process+0x26>
 8007788:	4ba0      	ldr	r3, [pc, #640]	; (8007a0c <ai_platform_network_process+0x2b0>)
 800778a:	4aa1      	ldr	r2, [pc, #644]	; (8007a10 <ai_platform_network_process+0x2b4>)
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	4ba0      	ldr	r3, [pc, #640]	; (8007a14 <ai_platform_network_process+0x2b8>)
 8007792:	429a      	cmp	r2, r3
 8007794:	d000      	beq.n	8007798 <ai_platform_network_process+0x3c>
 8007796:	e7fe      	b.n	8007796 <ai_platform_network_process+0x3a>
 8007798:	2c00      	cmp	r4, #0
 800779a:	d066      	beq.n	800786a <ai_platform_network_process+0x10e>
 800779c:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80077a0:	b107      	cbz	r7, 80077a4 <ai_platform_network_process+0x48>
 80077a2:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80077a4:	68e3      	ldr	r3, [r4, #12]
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	2600      	movs	r6, #0
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	6166      	str	r6, [r4, #20]
 80077b0:	f040 80fe 	bne.w	80079b0 <ai_platform_network_process+0x254>
 80077b4:	2900      	cmp	r1, #0
 80077b6:	d07f      	beq.n	80078b8 <ai_platform_network_process+0x15c>
 80077b8:	2f00      	cmp	r7, #0
 80077ba:	d07d      	beq.n	80078b8 <ai_platform_network_process+0x15c>
 80077bc:	883b      	ldrh	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d07a      	beq.n	80078b8 <ai_platform_network_process+0x15c>
 80077c2:	460d      	mov	r5, r1
 80077c4:	46a0      	mov	r8, r4
 80077c6:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 80077ca:	429e      	cmp	r6, r3
 80077cc:	d27d      	bcs.n	80078ca <ai_platform_network_process+0x16e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d07a      	beq.n	80078ca <ai_platform_network_process+0x16e>
 80077d4:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80077d8:	2c00      	cmp	r4, #0
 80077da:	d076      	beq.n	80078ca <ai_platform_network_process+0x16e>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 80077e4:	d067      	beq.n	80078b6 <ai_platform_network_process+0x15a>
 80077e6:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80077ea:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80077ee:	69a0      	ldr	r0, [r4, #24]
 80077f0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80077f4:	6841      	ldr	r1, [r0, #4]
 80077f6:	fb0b f30e 	mul.w	r3, fp, lr
 80077fa:	fb0c f303 	mul.w	r3, ip, r3
 80077fe:	4299      	cmp	r1, r3
 8007800:	d350      	bcc.n	80078a4 <ai_platform_network_process+0x148>
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	455a      	cmp	r2, fp
 8007808:	d14c      	bne.n	80078a4 <ai_platform_network_process+0x148>
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	4572      	cmp	r2, lr
 800780e:	d149      	bne.n	80078a4 <ai_platform_network_process+0x148>
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	459c      	cmp	ip, r3
 8007814:	d146      	bne.n	80078a4 <ai_platform_network_process+0x148>
 8007816:	6800      	ldr	r0, [r0, #0]
 8007818:	f001 f81e 	bl	8008858 <ai_array_get_byte_size>
 800781c:	68e2      	ldr	r2, [r4, #12]
 800781e:	6963      	ldr	r3, [r4, #20]
 8007820:	68d2      	ldr	r2, [r2, #12]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	fb03 f302 	mul.w	r3, r3, r2
 8007828:	4298      	cmp	r0, r3
 800782a:	d33b      	bcc.n	80078a4 <ai_platform_network_process+0x148>
 800782c:	69a3      	ldr	r3, [r4, #24]
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	f000 ffc6 	bl	80087c0 <ai_array_to_buffer_fmt>
 8007834:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007838:	4043      	eors	r3, r0
 800783a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800783e:	d128      	bne.n	8007892 <ai_platform_network_process+0x136>
 8007840:	68eb      	ldr	r3, [r5, #12]
 8007842:	b1f3      	cbz	r3, 8007882 <ai_platform_network_process+0x126>
 8007844:	f8b5 b000 	ldrh.w	fp, [r5]
 8007848:	f1bb 0f00 	cmp.w	fp, #0
 800784c:	d012      	beq.n	8007874 <ai_platform_network_process+0x118>
 800784e:	4623      	mov	r3, r4
 8007850:	f105 020c 	add.w	r2, r5, #12
 8007854:	4629      	mov	r1, r5
 8007856:	4650      	mov	r0, sl
 8007858:	f7ff fe30 	bl	80074bc <_platform_network_state_setup.isra.1>
 800785c:	45d9      	cmp	r9, fp
 800785e:	883b      	ldrh	r3, [r7, #0]
 8007860:	bf38      	it	cc
 8007862:	46d9      	movcc	r9, fp
 8007864:	3601      	adds	r6, #1
 8007866:	3518      	adds	r5, #24
 8007868:	e7af      	b.n	80077ca <ai_platform_network_process+0x6e>
 800786a:	46a3      	mov	fp, r4
 800786c:	4658      	mov	r0, fp
 800786e:	b003      	add	sp, #12
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	f108 0010 	add.w	r0, r8, #16
 8007878:	2221      	movs	r2, #33	; 0x21
 800787a:	2112      	movs	r1, #18
 800787c:	f000 f97a 	bl	8007b74 <core_set_error>
 8007880:	e7f4      	b.n	800786c <ai_platform_network_process+0x110>
 8007882:	f108 0010 	add.w	r0, r8, #16
 8007886:	2217      	movs	r2, #23
 8007888:	2112      	movs	r1, #18
 800788a:	469b      	mov	fp, r3
 800788c:	f000 f972 	bl	8007b74 <core_set_error>
 8007890:	e7ec      	b.n	800786c <ai_platform_network_process+0x110>
 8007892:	f108 0010 	add.w	r0, r8, #16
 8007896:	2219      	movs	r2, #25
 8007898:	2112      	movs	r1, #18
 800789a:	f000 f96b 	bl	8007b74 <core_set_error>
 800789e:	f04f 0b00 	mov.w	fp, #0
 80078a2:	e7e3      	b.n	800786c <ai_platform_network_process+0x110>
 80078a4:	f108 0010 	add.w	r0, r8, #16
 80078a8:	2218      	movs	r2, #24
 80078aa:	2112      	movs	r1, #18
 80078ac:	f000 f962 	bl	8007b74 <core_set_error>
 80078b0:	f04f 0b00 	mov.w	fp, #0
 80078b4:	e7da      	b.n	800786c <ai_platform_network_process+0x110>
 80078b6:	4644      	mov	r4, r8
 80078b8:	f104 0010 	add.w	r0, r4, #16
 80078bc:	2217      	movs	r2, #23
 80078be:	2112      	movs	r1, #18
 80078c0:	f000 f958 	bl	8007b74 <core_set_error>
 80078c4:	f04f 0b00 	mov.w	fp, #0
 80078c8:	e7d0      	b.n	800786c <ai_platform_network_process+0x110>
 80078ca:	9a01      	ldr	r2, [sp, #4]
 80078cc:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 80078d0:	4644      	mov	r4, r8
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	f000 80a2 	beq.w	8007a1c <ai_platform_network_process+0x2c0>
 80078d8:	2b01      	cmp	r3, #1
 80078da:	f240 8140 	bls.w	8007b5e <ai_platform_network_process+0x402>
 80078de:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80078e2:	f118 0f0c 	cmn.w	r8, #12
 80078e6:	f000 813a 	beq.w	8007b5e <ai_platform_network_process+0x402>
 80078ea:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8135 	beq.w	8007b5e <ai_platform_network_process+0x402>
 80078f4:	9d01      	ldr	r5, [sp, #4]
 80078f6:	2700      	movs	r7, #0
 80078f8:	3504      	adds	r5, #4
 80078fa:	429f      	cmp	r7, r3
 80078fc:	f080 808c 	bcs.w	8007a18 <ai_platform_network_process+0x2bc>
 8007900:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8087 	beq.w	8007a18 <ai_platform_network_process+0x2bc>
 800790a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800790e:	2e00      	cmp	r6, #0
 8007910:	f000 8082 	beq.w	8007a18 <ai_platform_network_process+0x2bc>
 8007914:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800791e:	d067      	beq.n	80079f0 <ai_platform_network_process+0x294>
 8007920:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8007924:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8007928:	69b0      	ldr	r0, [r6, #24]
 800792a:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800792e:	6841      	ldr	r1, [r0, #4]
 8007930:	fb0b f30e 	mul.w	r3, fp, lr
 8007934:	fb0c f303 	mul.w	r3, ip, r3
 8007938:	4299      	cmp	r1, r3
 800793a:	f0c0 8110 	bcc.w	8007b5e <ai_platform_network_process+0x402>
 800793e:	68f3      	ldr	r3, [r6, #12]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	455a      	cmp	r2, fp
 8007944:	f040 810b 	bne.w	8007b5e <ai_platform_network_process+0x402>
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	4572      	cmp	r2, lr
 800794c:	f040 8107 	bne.w	8007b5e <ai_platform_network_process+0x402>
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	459c      	cmp	ip, r3
 8007954:	f040 8103 	bne.w	8007b5e <ai_platform_network_process+0x402>
 8007958:	6800      	ldr	r0, [r0, #0]
 800795a:	f000 ff7d 	bl	8008858 <ai_array_get_byte_size>
 800795e:	68f2      	ldr	r2, [r6, #12]
 8007960:	6973      	ldr	r3, [r6, #20]
 8007962:	68d2      	ldr	r2, [r2, #12]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	fb03 f302 	mul.w	r3, r3, r2
 800796a:	4298      	cmp	r0, r3
 800796c:	f0c0 80f7 	bcc.w	8007b5e <ai_platform_network_process+0x402>
 8007970:	69b3      	ldr	r3, [r6, #24]
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	f000 ff24 	bl	80087c0 <ai_array_to_buffer_fmt>
 8007978:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800797c:	4043      	eors	r3, r0
 800797e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007982:	d12c      	bne.n	80079de <ai_platform_network_process+0x282>
 8007984:	68eb      	ldr	r3, [r5, #12]
 8007986:	b313      	cbz	r3, 80079ce <ai_platform_network_process+0x272>
 8007988:	f8b5 b000 	ldrh.w	fp, [r5]
 800798c:	f1bb 0f00 	cmp.w	fp, #0
 8007990:	d016      	beq.n	80079c0 <ai_platform_network_process+0x264>
 8007992:	4633      	mov	r3, r6
 8007994:	f105 020c 	add.w	r2, r5, #12
 8007998:	4629      	mov	r1, r5
 800799a:	4650      	mov	r0, sl
 800799c:	f7ff fd8e 	bl	80074bc <_platform_network_state_setup.isra.1>
 80079a0:	45d9      	cmp	r9, fp
 80079a2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80079a6:	bf38      	it	cc
 80079a8:	46d9      	movcc	r9, fp
 80079aa:	3701      	adds	r7, #1
 80079ac:	3518      	adds	r5, #24
 80079ae:	e7a4      	b.n	80078fa <ai_platform_network_process+0x19e>
 80079b0:	f104 0010 	add.w	r0, r4, #16
 80079b4:	2230      	movs	r2, #48	; 0x30
 80079b6:	2111      	movs	r1, #17
 80079b8:	f000 f8dc 	bl	8007b74 <core_set_error>
 80079bc:	46b3      	mov	fp, r6
 80079be:	e755      	b.n	800786c <ai_platform_network_process+0x110>
 80079c0:	f104 0010 	add.w	r0, r4, #16
 80079c4:	2221      	movs	r2, #33	; 0x21
 80079c6:	2113      	movs	r1, #19
 80079c8:	f000 f8d4 	bl	8007b74 <core_set_error>
 80079cc:	e74e      	b.n	800786c <ai_platform_network_process+0x110>
 80079ce:	f104 0010 	add.w	r0, r4, #16
 80079d2:	2217      	movs	r2, #23
 80079d4:	2113      	movs	r1, #19
 80079d6:	469b      	mov	fp, r3
 80079d8:	f000 f8cc 	bl	8007b74 <core_set_error>
 80079dc:	e746      	b.n	800786c <ai_platform_network_process+0x110>
 80079de:	f104 0010 	add.w	r0, r4, #16
 80079e2:	2219      	movs	r2, #25
 80079e4:	2113      	movs	r1, #19
 80079e6:	f000 f8c5 	bl	8007b74 <core_set_error>
 80079ea:	f04f 0b00 	mov.w	fp, #0
 80079ee:	e73d      	b.n	800786c <ai_platform_network_process+0x110>
 80079f0:	f104 0010 	add.w	r0, r4, #16
 80079f4:	2217      	movs	r2, #23
 80079f6:	2113      	movs	r1, #19
 80079f8:	f000 f8bc 	bl	8007b74 <core_set_error>
 80079fc:	46d3      	mov	fp, sl
 80079fe:	e735      	b.n	800786c <ai_platform_network_process+0x110>
 8007a00:	a1c00100 	.word	0xa1c00100
 8007a04:	e0002000 	.word	0xe0002000
 8007a08:	40023008 	.word	0x40023008
 8007a0c:	40023000 	.word	0x40023000
 8007a10:	f407a5c2 	.word	0xf407a5c2
 8007a14:	b5e8b5cd 	.word	0xb5e8b5cd
 8007a18:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007a1c:	f8a4 9014 	strh.w	r9, [r4, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8099 	beq.w	8007b58 <ai_platform_network_process+0x3fc>
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007a2a:	f240 8093 	bls.w	8007b54 <ai_platform_network_process+0x3f8>
 8007a2e:	f105 070c 	add.w	r7, r5, #12
 8007a32:	8ae0      	ldrh	r0, [r4, #22]
 8007a34:	8aa3      	ldrh	r3, [r4, #20]
 8007a36:	4283      	cmp	r3, r0
 8007a38:	d977      	bls.n	8007b2a <ai_platform_network_process+0x3ce>
 8007a3a:	46a3      	mov	fp, r4
 8007a3c:	2d00      	cmp	r5, #0
 8007a3e:	d032      	beq.n	8007aa6 <ai_platform_network_process+0x34a>
 8007a40:	882b      	ldrh	r3, [r5, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02f      	beq.n	8007aa6 <ai_platform_network_process+0x34a>
 8007a46:	686b      	ldr	r3, [r5, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d02c      	beq.n	8007aa6 <ai_platform_network_process+0x34a>
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f04f 0800 	mov.w	r8, #0
 8007a52:	b343      	cbz	r3, 8007aa6 <ai_platform_network_process+0x34a>
 8007a54:	68a9      	ldr	r1, [r5, #8]
 8007a56:	699a      	ldr	r2, [r3, #24]
 8007a58:	f8d1 a000 	ldr.w	sl, [r1]
 8007a5c:	6814      	ldr	r4, [r2, #0]
 8007a5e:	6890      	ldr	r0, [r2, #8]
 8007a60:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007a64:	eb0a 0609 	add.w	r6, sl, r9
 8007a68:	00a4      	lsls	r4, r4, #2
 8007a6a:	6871      	ldr	r1, [r6, #4]
 8007a6c:	d45f      	bmi.n	8007b2e <ai_platform_network_process+0x3d2>
 8007a6e:	68d4      	ldr	r4, [r2, #12]
 8007a70:	1b00      	subs	r0, r0, r4
 8007a72:	4401      	add	r1, r0
 8007a74:	6091      	str	r1, [r2, #8]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	6872      	ldr	r2, [r6, #4]
 8007a7a:	60da      	str	r2, [r3, #12]
 8007a7c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007a80:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007a84:	440b      	add	r3, r1
 8007a86:	4293      	cmp	r3, r2
 8007a88:	bf24      	itt	cs
 8007a8a:	68f3      	ldrcs	r3, [r6, #12]
 8007a8c:	1ad3      	subcs	r3, r2, r3
 8007a8e:	6073      	str	r3, [r6, #4]
 8007a90:	882b      	ldrh	r3, [r5, #0]
 8007a92:	f108 0801 	add.w	r8, r8, #1
 8007a96:	4598      	cmp	r8, r3
 8007a98:	d205      	bcs.n	8007aa6 <ai_platform_network_process+0x34a>
 8007a9a:	686b      	ldr	r3, [r5, #4]
 8007a9c:	b11b      	cbz	r3, 8007aa6 <ai_platform_network_process+0x34a>
 8007a9e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1d6      	bne.n	8007a54 <ai_platform_network_process+0x2f8>
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	f000 fe3c 	bl	8008724 <ai_layers_forward_all>
 8007aac:	2f00      	cmp	r7, #0
 8007aae:	d032      	beq.n	8007b16 <ai_platform_network_process+0x3ba>
 8007ab0:	883b      	ldrh	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d02f      	beq.n	8007b16 <ai_platform_network_process+0x3ba>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	b36b      	cbz	r3, 8007b16 <ai_platform_network_process+0x3ba>
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	b358      	cbz	r0, 8007b16 <ai_platform_network_process+0x3ba>
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6981      	ldr	r1, [r0, #24]
 8007ac6:	f8d3 a000 	ldr.w	sl, [r3]
 8007aca:	680c      	ldr	r4, [r1, #0]
 8007acc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007ad0:	eb0a 0609 	add.w	r6, sl, r9
 8007ad4:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007ad8:	00a4      	lsls	r4, r4, #2
 8007ada:	eb0c 0302 	add.w	r3, ip, r2
 8007ade:	d42a      	bmi.n	8007b36 <ai_platform_network_process+0x3da>
 8007ae0:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bf24      	itt	cs
 8007ae8:	68f3      	ldrcs	r3, [r6, #12]
 8007aea:	1ad3      	subcs	r3, r2, r3
 8007aec:	6073      	str	r3, [r6, #4]
 8007aee:	6981      	ldr	r1, [r0, #24]
 8007af0:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8007af4:	1b12      	subs	r2, r2, r4
 8007af6:	4413      	add	r3, r2
 8007af8:	608b      	str	r3, [r1, #8]
 8007afa:	6983      	ldr	r3, [r0, #24]
 8007afc:	6872      	ldr	r2, [r6, #4]
 8007afe:	60da      	str	r2, [r3, #12]
 8007b00:	883b      	ldrh	r3, [r7, #0]
 8007b02:	f108 0801 	add.w	r8, r8, #1
 8007b06:	4598      	cmp	r8, r3
 8007b08:	d205      	bcs.n	8007b16 <ai_platform_network_process+0x3ba>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	b11b      	cbz	r3, 8007b16 <ai_platform_network_process+0x3ba>
 8007b0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d1d5      	bne.n	8007ac2 <ai_platform_network_process+0x366>
 8007b16:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8007b1a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007b1e:	3001      	adds	r0, #1
 8007b20:	b280      	uxth	r0, r0
 8007b22:	4283      	cmp	r3, r0
 8007b24:	f8ab 0016 	strh.w	r0, [fp, #22]
 8007b28:	d888      	bhi.n	8007a3c <ai_platform_network_process+0x2e0>
 8007b2a:	4683      	mov	fp, r0
 8007b2c:	e69e      	b.n	800786c <ai_platform_network_process+0x110>
 8007b2e:	68b2      	ldr	r2, [r6, #8]
 8007b30:	f000 fee6 	bl	8008900 <memcpy>
 8007b34:	e7a2      	b.n	8007a7c <ai_platform_network_process+0x320>
 8007b36:	6889      	ldr	r1, [r1, #8]
 8007b38:	4660      	mov	r0, ip
 8007b3a:	f000 fee1 	bl	8008900 <memcpy>
 8007b3e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007b42:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007b46:	440b      	add	r3, r1
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	bf24      	itt	cs
 8007b4c:	68f3      	ldrcs	r3, [r6, #12]
 8007b4e:	1ad3      	subcs	r3, r2, r3
 8007b50:	6073      	str	r3, [r6, #4]
 8007b52:	e7d5      	b.n	8007b00 <ai_platform_network_process+0x3a4>
 8007b54:	2700      	movs	r7, #0
 8007b56:	e76c      	b.n	8007a32 <ai_platform_network_process+0x2d6>
 8007b58:	461d      	mov	r5, r3
 8007b5a:	461f      	mov	r7, r3
 8007b5c:	e769      	b.n	8007a32 <ai_platform_network_process+0x2d6>
 8007b5e:	f104 0010 	add.w	r0, r4, #16
 8007b62:	2218      	movs	r2, #24
 8007b64:	2113      	movs	r1, #19
 8007b66:	f000 f805 	bl	8007b74 <core_set_error>
 8007b6a:	f04f 0b00 	mov.w	fp, #0
 8007b6e:	e67d      	b.n	800786c <ai_platform_network_process+0x110>

08007b70 <core_init>:
 8007b70:	2001      	movs	r0, #1
 8007b72:	4770      	bx	lr

08007b74 <core_set_error>:
 8007b74:	7803      	ldrb	r3, [r0, #0]
 8007b76:	b933      	cbnz	r3, 8007b86 <core_set_error+0x12>
 8007b78:	7001      	strb	r1, [r0, #0]
 8007b7a:	6803      	ldr	r3, [r0, #0]
 8007b7c:	f362 231f 	bfi	r3, r2, #8, #24
 8007b80:	6003      	str	r3, [r0, #0]
 8007b82:	2001      	movs	r0, #1
 8007b84:	4770      	bx	lr
 8007b86:	2000      	movs	r0, #0
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop

08007b8c <ai_dict8_dot_array_f32>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007b94:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8007b98:	f000 80c0 	beq.w	8007d1c <ai_dict8_dot_array_f32+0x190>
 8007b9c:	f101 0408 	add.w	r4, r1, #8
 8007ba0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007ba4:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007d24 <ai_dict8_dot_array_f32+0x198>
 8007ba8:	eb04 0e09 	add.w	lr, r4, r9
 8007bac:	f103 0520 	add.w	r5, r3, #32
 8007bb0:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8007bb4:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8007bb8:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8007bbc:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007bc0:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8007bc4:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8007bc8:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007bcc:	ed55 3a04 	vldr	s7, [r5, #-16]
 8007bd0:	ed55 4a03 	vldr	s9, [r5, #-12]
 8007bd4:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007bd8:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007bdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007be0:	edd6 7a00 	vldr	s15, [r6]
 8007be4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8007be8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007bec:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007bf0:	ed9a 3a00 	vldr	s6, [sl]
 8007bf4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8007bf8:	eee3 7a05 	vfma.f32	s15, s6, s10
 8007bfc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007c00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c04:	ed97 3a00 	vldr	s6, [r7]
 8007c08:	ed96 5a00 	vldr	s10, [r6]
 8007c0c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8007c10:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8007c14:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007c18:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007c1c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c20:	ed9a 3a00 	vldr	s6, [sl]
 8007c24:	ed96 4a00 	vldr	s8, [r6]
 8007c28:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8007c2c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007c30:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007c34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c38:	ed97 5a00 	vldr	s10, [r7]
 8007c3c:	ed96 6a00 	vldr	s12, [r6]
 8007c40:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c44:	3408      	adds	r4, #8
 8007c46:	45a6      	cmp	lr, r4
 8007c48:	f105 0520 	add.w	r5, r5, #32
 8007c4c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c50:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c54:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c5c:	d1a8      	bne.n	8007bb0 <ai_dict8_dot_array_f32+0x24>
 8007c5e:	4449      	add	r1, r9
 8007c60:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007c64:	f01c 0c07 	ands.w	ip, ip, #7
 8007c68:	d050      	beq.n	8007d0c <ai_dict8_dot_array_f32+0x180>
 8007c6a:	780c      	ldrb	r4, [r1, #0]
 8007c6c:	edd3 6a00 	vldr	s13, [r3]
 8007c70:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007c74:	edd4 7a00 	vldr	s15, [r4]
 8007c78:	f1bc 0f01 	cmp.w	ip, #1
 8007c7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c80:	d044      	beq.n	8007d0c <ai_dict8_dot_array_f32+0x180>
 8007c82:	784c      	ldrb	r4, [r1, #1]
 8007c84:	edd3 6a01 	vldr	s13, [r3, #4]
 8007c88:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007c8c:	edd4 7a00 	vldr	s15, [r4]
 8007c90:	f1bc 0f02 	cmp.w	ip, #2
 8007c94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c98:	d038      	beq.n	8007d0c <ai_dict8_dot_array_f32+0x180>
 8007c9a:	788c      	ldrb	r4, [r1, #2]
 8007c9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8007ca0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007ca4:	edd4 7a00 	vldr	s15, [r4]
 8007ca8:	f1bc 0f03 	cmp.w	ip, #3
 8007cac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cb0:	d02c      	beq.n	8007d0c <ai_dict8_dot_array_f32+0x180>
 8007cb2:	78cc      	ldrb	r4, [r1, #3]
 8007cb4:	edd3 6a03 	vldr	s13, [r3, #12]
 8007cb8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007cbc:	edd4 7a00 	vldr	s15, [r4]
 8007cc0:	f1bc 0f04 	cmp.w	ip, #4
 8007cc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cc8:	d020      	beq.n	8007d0c <ai_dict8_dot_array_f32+0x180>
 8007cca:	790c      	ldrb	r4, [r1, #4]
 8007ccc:	edd3 6a04 	vldr	s13, [r3, #16]
 8007cd0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007cd4:	edd4 7a00 	vldr	s15, [r4]
 8007cd8:	f1bc 0f05 	cmp.w	ip, #5
 8007cdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ce0:	d014      	beq.n	8007d0c <ai_dict8_dot_array_f32+0x180>
 8007ce2:	794c      	ldrb	r4, [r1, #5]
 8007ce4:	edd3 6a05 	vldr	s13, [r3, #20]
 8007ce8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007cec:	edd4 7a00 	vldr	s15, [r4]
 8007cf0:	f1bc 0f06 	cmp.w	ip, #6
 8007cf4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cf8:	d008      	beq.n	8007d0c <ai_dict8_dot_array_f32+0x180>
 8007cfa:	7989      	ldrb	r1, [r1, #6]
 8007cfc:	edd3 7a06 	vldr	s15, [r3, #24]
 8007d00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007d04:	edd2 6a00 	vldr	s13, [r2]
 8007d08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d0c:	edd0 7a00 	vldr	s15, [r0]
 8007d10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d14:	ed80 7a00 	vstr	s14, [r0]
 8007d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007d24 <ai_dict8_dot_array_f32+0x198>
 8007d20:	e7a0      	b.n	8007c64 <ai_dict8_dot_array_f32+0xd8>
 8007d22:	bf00      	nop
 8007d24:	00000000 	.word	0x00000000

08007d28 <ai_dict4_dot_array_f32>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d2e:	f027 0c01 	bic.w	ip, r7, #1
 8007d32:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8007d36:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007d3a:	f000 80ae 	beq.w	8007e9a <ai_dict4_dot_array_f32+0x172>
 8007d3e:	1d0d      	adds	r5, r1, #4
 8007d40:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007d44:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007ea0 <ai_dict4_dot_array_f32+0x178>
 8007d48:	eb05 0e09 	add.w	lr, r5, r9
 8007d4c:	f103 0420 	add.w	r4, r3, #32
 8007d50:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007d54:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8007d58:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8007d5c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8007d60:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8007d64:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8007d68:	ed14 5a04 	vldr	s10, [r4, #-16]
 8007d6c:	ed54 5a03 	vldr	s11, [r4, #-12]
 8007d70:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007d74:	ed54 6a01 	vldr	s13, [r4, #-4]
 8007d78:	f006 0a0f 	and.w	sl, r6, #15
 8007d7c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007d80:	edda 7a00 	vldr	s15, [sl]
 8007d84:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8007d88:	0936      	lsrs	r6, r6, #4
 8007d8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d8e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007d92:	ed96 3a00 	vldr	s6, [r6]
 8007d96:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8007d9a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007d9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007da2:	f00b 0b0f 	and.w	fp, fp, #15
 8007da6:	edd6 3a00 	vldr	s7, [r6]
 8007daa:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8007dae:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007db2:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8007db6:	3504      	adds	r5, #4
 8007db8:	ed9b 4a00 	vldr	s8, [fp]
 8007dbc:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8007dc0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007dc4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8007dc8:	f00a 0a0f 	and.w	sl, sl, #15
 8007dcc:	eddb 4a00 	vldr	s9, [fp]
 8007dd0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007dd4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007dd8:	45ae      	cmp	lr, r5
 8007dda:	ed9a 5a00 	vldr	s10, [sl]
 8007dde:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8007de2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007de6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007dea:	f006 060f 	and.w	r6, r6, #15
 8007dee:	edda 5a00 	vldr	s11, [sl]
 8007df2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007df6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007dfa:	f104 0420 	add.w	r4, r4, #32
 8007dfe:	ed96 6a00 	vldr	s12, [r6]
 8007e02:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007e06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e0a:	d1a1      	bne.n	8007d50 <ai_dict4_dot_array_f32+0x28>
 8007e0c:	4449      	add	r1, r9
 8007e0e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007e12:	459c      	cmp	ip, r3
 8007e14:	d92d      	bls.n	8007e72 <ai_dict4_dot_array_f32+0x14a>
 8007e16:	f10c 0c07 	add.w	ip, ip, #7
 8007e1a:	f103 0508 	add.w	r5, r3, #8
 8007e1e:	ebac 0c05 	sub.w	ip, ip, r5
 8007e22:	f02c 0407 	bic.w	r4, ip, #7
 8007e26:	f103 0810 	add.w	r8, r3, #16
 8007e2a:	44a0      	add	r8, r4
 8007e2c:	f101 3eff 	add.w	lr, r1, #4294967295
 8007e30:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8007e34:	ed15 6a01 	vldr	s12, [r5, #-4]
 8007e38:	ed55 6a02 	vldr	s13, [r5, #-8]
 8007e3c:	f004 060f 	and.w	r6, r4, #15
 8007e40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e44:	0924      	lsrs	r4, r4, #4
 8007e46:	edd6 7a00 	vldr	s15, [r6]
 8007e4a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007e4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007e52:	ed94 6a00 	vldr	s12, [r4]
 8007e56:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007e5a:	3508      	adds	r5, #8
 8007e5c:	45a8      	cmp	r8, r5
 8007e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e62:	d1e5      	bne.n	8007e30 <ai_dict4_dot_array_f32+0x108>
 8007e64:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007e68:	f10c 0c01 	add.w	ip, ip, #1
 8007e6c:	4461      	add	r1, ip
 8007e6e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8007e72:	07fc      	lsls	r4, r7, #31
 8007e74:	d509      	bpl.n	8007e8a <ai_dict4_dot_array_f32+0x162>
 8007e76:	7809      	ldrb	r1, [r1, #0]
 8007e78:	edd3 7a00 	vldr	s15, [r3]
 8007e7c:	090b      	lsrs	r3, r1, #4
 8007e7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007e82:	edd2 6a00 	vldr	s13, [r2]
 8007e86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e8a:	edd0 7a00 	vldr	s15, [r0]
 8007e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e92:	ed80 7a00 	vstr	s14, [r0]
 8007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007ea0 <ai_dict4_dot_array_f32+0x178>
 8007e9e:	e7b8      	b.n	8007e12 <ai_dict4_dot_array_f32+0xea>
 8007ea0:	00000000 	.word	0x00000000

08007ea4 <forward_dense>:
 8007ea4:	6982      	ldr	r2, [r0, #24]
 8007ea6:	8813      	ldrh	r3, [r2, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 81ca 	beq.w	8008242 <forward_dense+0x39e>
 8007eae:	6852      	ldr	r2, [r2, #4]
 8007eb0:	6850      	ldr	r0, [r2, #4]
 8007eb2:	b100      	cbz	r0, 8007eb6 <forward_dense+0x12>
 8007eb4:	6800      	ldr	r0, [r0, #0]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	f240 81c0 	bls.w	800823c <forward_dense+0x398>
 8007ebc:	6911      	ldr	r1, [r2, #16]
 8007ebe:	b101      	cbz	r1, 8007ec2 <forward_dense+0x1e>
 8007ec0:	6809      	ldr	r1, [r1, #0]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	f000 81bf 	beq.w	8008246 <forward_dense+0x3a2>
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	ed2d 8b10 	vpush	{d8-d15}
 8007ed0:	69d3      	ldr	r3, [r2, #28]
 8007ed2:	b091      	sub	sp, #68	; 0x44
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 820b 	beq.w	80082f0 <forward_dense+0x44c>
 8007eda:	681c      	ldr	r4, [r3, #0]
 8007edc:	9408      	str	r4, [sp, #32]
 8007ede:	f112 0418 	adds.w	r4, r2, #24
 8007ee2:	f000 81df 	beq.w	80082a4 <forward_dense+0x400>
 8007ee6:	8b12      	ldrh	r2, [r2, #24]
 8007ee8:	2a01      	cmp	r2, #1
 8007eea:	f240 81fe 	bls.w	80082ea <forward_dense+0x446>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 81da 	beq.w	80082a8 <forward_dense+0x404>
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	9306      	str	r3, [sp, #24]
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	68cc      	ldr	r4, [r1, #12]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	68c5      	ldr	r5, [r0, #12]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007f06:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007f0a:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8007f0e:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8007f12:	fa4c f505 	asr.w	r5, ip, r5
 8007f16:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8007f1a:	950b      	str	r5, [sp, #44]	; 0x2c
 8007f1c:	2a04      	cmp	r2, #4
 8007f1e:	fb07 f506 	mul.w	r5, r7, r6
 8007f22:	6864      	ldr	r4, [r4, #4]
 8007f24:	9507      	str	r5, [sp, #28]
 8007f26:	f000 81dd 	beq.w	80082e4 <forward_dense+0x440>
 8007f2a:	2a08      	cmp	r2, #8
 8007f2c:	f000 81da 	beq.w	80082e4 <forward_dense+0x440>
 8007f30:	f04f 0a00 	mov.w	sl, #0
 8007f34:	698a      	ldr	r2, [r1, #24]
 8007f36:	6981      	ldr	r1, [r0, #24]
 8007f38:	6890      	ldr	r0, [r2, #8]
 8007f3a:	9a08      	ldr	r2, [sp, #32]
 8007f3c:	9004      	str	r0, [sp, #16]
 8007f3e:	6952      	ldr	r2, [r2, #20]
 8007f40:	688f      	ldr	r7, [r1, #8]
 8007f42:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007f46:	00a2      	lsls	r2, r4, #2
 8007f48:	9209      	str	r2, [sp, #36]	; 0x24
 8007f4a:	1886      	adds	r6, r0, r2
 8007f4c:	9a07      	ldr	r2, [sp, #28]
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	f000 81c3 	beq.w	80082da <forward_dense+0x436>
 8007f54:	f1a8 0210 	sub.w	r2, r8, #16
 8007f58:	0912      	lsrs	r2, r2, #4
 8007f5a:	3201      	adds	r2, #1
 8007f5c:	0192      	lsls	r2, r2, #6
 8007f5e:	920c      	str	r2, [sp, #48]	; 0x30
 8007f60:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8007f64:	920a      	str	r2, [sp, #40]	; 0x28
 8007f66:	689d      	ldr	r5, [r3, #8]
 8007f68:	9b06      	ldr	r3, [sp, #24]
 8007f6a:	eddf aad0 	vldr	s21, [pc, #832]	; 80082ac <forward_dense+0x408>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	9205      	str	r2, [sp, #20]
 8007f72:	f008 020f 	and.w	r2, r8, #15
 8007f76:	920d      	str	r2, [sp, #52]	; 0x34
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d043      	beq.n	8008004 <forward_dense+0x160>
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	689c      	ldr	r4, [r3, #8]
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	f1ba 0f00 	cmp.w	sl, #0
 8007f86:	d042      	beq.n	800800e <forward_dense+0x16a>
 8007f88:	42b3      	cmp	r3, r6
 8007f8a:	d22a      	bcs.n	8007fe2 <forward_dense+0x13e>
 8007f8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f8e:	469b      	mov	fp, r3
 8007f90:	ab0f      	add	r3, sp, #60	; 0x3c
 8007f92:	9303      	str	r3, [sp, #12]
 8007f94:	2a04      	cmp	r2, #4
 8007f96:	4633      	mov	r3, r6
 8007f98:	4646      	mov	r6, r8
 8007f9a:	4698      	mov	r8, r3
 8007f9c:	f000 8156 	beq.w	800824c <forward_dense+0x3a8>
 8007fa0:	2c00      	cmp	r4, #0
 8007fa2:	f000 8185 	beq.w	80082b0 <forward_dense+0x40c>
 8007fa6:	f8d4 c000 	ldr.w	ip, [r4]
 8007faa:	9803      	ldr	r0, [sp, #12]
 8007fac:	9600      	str	r6, [sp, #0]
 8007fae:	463b      	mov	r3, r7
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8007fb8:	f7ff fde8 	bl	8007b8c <ai_dict8_dot_array_f32>
 8007fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fbe:	f84b 3b04 	str.w	r3, [fp], #4
 8007fc2:	45c3      	cmp	fp, r8
 8007fc4:	f104 0404 	add.w	r4, r4, #4
 8007fc8:	444d      	add	r5, r9
 8007fca:	d3e9      	bcc.n	8007fa0 <forward_dense+0xfc>
 8007fcc:	4643      	mov	r3, r8
 8007fce:	46b0      	mov	r8, r6
 8007fd0:	461e      	mov	r6, r3
 8007fd2:	9a04      	ldr	r2, [sp, #16]
 8007fd4:	43d3      	mvns	r3, r2
 8007fd6:	4433      	add	r3, r6
 8007fd8:	f023 0303 	bic.w	r3, r3, #3
 8007fdc:	3304      	adds	r3, #4
 8007fde:	18d3      	adds	r3, r2, r3
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fe4:	9b05      	ldr	r3, [sp, #20]
 8007fe6:	4417      	add	r7, r2
 8007fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fea:	4416      	add	r6, r2
 8007fec:	9a07      	ldr	r2, [sp, #28]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	f000 8171 	beq.w	80082da <forward_dense+0x436>
 8007ff8:	9b08      	ldr	r3, [sp, #32]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	689d      	ldr	r5, [r3, #8]
 8007ffe:	9b06      	ldr	r3, [sp, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1bb      	bne.n	8007f7c <forward_dense+0xd8>
 8008004:	461c      	mov	r4, r3
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	f1ba 0f00 	cmp.w	sl, #0
 800800c:	d1bc      	bne.n	8007f88 <forward_dense+0xe4>
 800800e:	42b3      	cmp	r3, r6
 8008010:	d2e7      	bcs.n	8007fe2 <forward_dense+0x13e>
 8008012:	4618      	mov	r0, r3
 8008014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008016:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800801a:	eb07 0c03 	add.w	ip, r7, r3
 800801e:	469e      	mov	lr, r3
 8008020:	2c00      	cmp	r4, #0
 8008022:	f000 80ff 	beq.w	8008224 <forward_dense+0x380>
 8008026:	f1b8 0f0f 	cmp.w	r8, #15
 800802a:	edd4 fa00 	vldr	s31, [r4]
 800802e:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80082ac <forward_dense+0x408>
 8008032:	f104 0404 	add.w	r4, r4, #4
 8008036:	f240 80fd 	bls.w	8008234 <forward_dense+0x390>
 800803a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800803e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008042:	4641      	mov	r1, r8
 8008044:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8008048:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800804c:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8008050:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8008054:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8008058:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800805c:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8008060:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8008064:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8008068:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800806c:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8008070:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8008074:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8008078:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800807c:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8008080:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8008084:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8008088:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800808c:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8008090:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8008094:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8008098:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800809c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80080a0:	ed13 4a04 	vldr	s8, [r3, #-16]
 80080a4:	ed52 4a04 	vldr	s9, [r2, #-16]
 80080a8:	ed12 5a03 	vldr	s10, [r2, #-12]
 80080ac:	ed53 5a03 	vldr	s11, [r3, #-12]
 80080b0:	ed12 6a02 	vldr	s12, [r2, #-8]
 80080b4:	ed13 7a02 	vldr	s14, [r3, #-8]
 80080b8:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80080bc:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80080c0:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80080c4:	3910      	subs	r1, #16
 80080c6:	290f      	cmp	r1, #15
 80080c8:	ed53 ea01 	vldr	s29, [r3, #-4]
 80080cc:	ed12 ea01 	vldr	s28, [r2, #-4]
 80080d0:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80080d4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80080d8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80080dc:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80080e0:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80080e4:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80080e8:	eee9 7a89 	vfma.f32	s15, s19, s18
 80080ec:	eee8 7a88 	vfma.f32	s15, s17, s16
 80080f0:	eee0 7a20 	vfma.f32	s15, s0, s1
 80080f4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80080f8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80080fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008100:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008104:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008108:	eee6 7a07 	vfma.f32	s15, s12, s14
 800810c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008110:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008114:	d896      	bhi.n	8008044 <forward_dense+0x1a0>
 8008116:	eb05 010e 	add.w	r1, r5, lr
 800811a:	465b      	mov	r3, fp
 800811c:	4662      	mov	r2, ip
 800811e:	2b00      	cmp	r3, #0
 8008120:	d075      	beq.n	800820e <forward_dense+0x36a>
 8008122:	ed91 7a00 	vldr	s14, [r1]
 8008126:	edd2 7a00 	vldr	s15, [r2]
 800812a:	2b01      	cmp	r3, #1
 800812c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008130:	d06d      	beq.n	800820e <forward_dense+0x36a>
 8008132:	ed91 7a01 	vldr	s14, [r1, #4]
 8008136:	edd2 7a01 	vldr	s15, [r2, #4]
 800813a:	2b02      	cmp	r3, #2
 800813c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008140:	d065      	beq.n	800820e <forward_dense+0x36a>
 8008142:	ed91 7a02 	vldr	s14, [r1, #8]
 8008146:	edd2 7a02 	vldr	s15, [r2, #8]
 800814a:	2b03      	cmp	r3, #3
 800814c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008150:	d05d      	beq.n	800820e <forward_dense+0x36a>
 8008152:	ed91 7a03 	vldr	s14, [r1, #12]
 8008156:	edd2 7a03 	vldr	s15, [r2, #12]
 800815a:	2b04      	cmp	r3, #4
 800815c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008160:	d055      	beq.n	800820e <forward_dense+0x36a>
 8008162:	ed91 7a04 	vldr	s14, [r1, #16]
 8008166:	edd2 7a04 	vldr	s15, [r2, #16]
 800816a:	2b05      	cmp	r3, #5
 800816c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008170:	d04d      	beq.n	800820e <forward_dense+0x36a>
 8008172:	ed91 7a05 	vldr	s14, [r1, #20]
 8008176:	edd2 7a05 	vldr	s15, [r2, #20]
 800817a:	2b06      	cmp	r3, #6
 800817c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008180:	d045      	beq.n	800820e <forward_dense+0x36a>
 8008182:	ed91 7a06 	vldr	s14, [r1, #24]
 8008186:	edd2 7a06 	vldr	s15, [r2, #24]
 800818a:	2b07      	cmp	r3, #7
 800818c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008190:	d03d      	beq.n	800820e <forward_dense+0x36a>
 8008192:	ed91 7a07 	vldr	s14, [r1, #28]
 8008196:	edd2 7a07 	vldr	s15, [r2, #28]
 800819a:	2b08      	cmp	r3, #8
 800819c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80081a0:	d035      	beq.n	800820e <forward_dense+0x36a>
 80081a2:	ed91 7a08 	vldr	s14, [r1, #32]
 80081a6:	edd2 7a08 	vldr	s15, [r2, #32]
 80081aa:	2b09      	cmp	r3, #9
 80081ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80081b0:	d02d      	beq.n	800820e <forward_dense+0x36a>
 80081b2:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80081b6:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80081ba:	2b0a      	cmp	r3, #10
 80081bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80081c0:	d025      	beq.n	800820e <forward_dense+0x36a>
 80081c2:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80081c6:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80081ca:	2b0b      	cmp	r3, #11
 80081cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80081d0:	d01d      	beq.n	800820e <forward_dense+0x36a>
 80081d2:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80081d6:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80081da:	2b0c      	cmp	r3, #12
 80081dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80081e0:	d015      	beq.n	800820e <forward_dense+0x36a>
 80081e2:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80081e6:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80081ea:	2b0d      	cmp	r3, #13
 80081ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80081f0:	d00d      	beq.n	800820e <forward_dense+0x36a>
 80081f2:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80081f6:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80081fa:	2b0e      	cmp	r3, #14
 80081fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008200:	d005      	beq.n	800820e <forward_dense+0x36a>
 8008202:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8008206:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800820a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800820e:	444d      	add	r5, r9
 8008210:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8008214:	ece0 6a01 	vstmia	r0!, {s13}
 8008218:	42b0      	cmp	r0, r6
 800821a:	f4bf aeda 	bcs.w	8007fd2 <forward_dense+0x12e>
 800821e:	2c00      	cmp	r4, #0
 8008220:	f47f af01 	bne.w	8008026 <forward_dense+0x182>
 8008224:	f1b8 0f0f 	cmp.w	r8, #15
 8008228:	eef0 fa6a 	vmov.f32	s31, s21
 800822c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80082ac <forward_dense+0x408>
 8008230:	f63f af03 	bhi.w	800803a <forward_dense+0x196>
 8008234:	4643      	mov	r3, r8
 8008236:	4629      	mov	r1, r5
 8008238:	463a      	mov	r2, r7
 800823a:	e770      	b.n	800811e <forward_dense+0x27a>
 800823c:	2300      	movs	r3, #0
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	deff      	udf	#255	; 0xff
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	deff      	udf	#255	; 0xff
 8008246:	2300      	movs	r3, #0
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	deff      	udf	#255	; 0xff
 800824c:	b1ac      	cbz	r4, 800827a <forward_dense+0x3d6>
 800824e:	f8d4 c000 	ldr.w	ip, [r4]
 8008252:	9803      	ldr	r0, [sp, #12]
 8008254:	9600      	str	r6, [sp, #0]
 8008256:	463b      	mov	r3, r7
 8008258:	4629      	mov	r1, r5
 800825a:	4652      	mov	r2, sl
 800825c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8008260:	f7ff fd62 	bl	8007d28 <ai_dict4_dot_array_f32>
 8008264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008266:	f84b 3b04 	str.w	r3, [fp], #4
 800826a:	45c3      	cmp	fp, r8
 800826c:	f104 0404 	add.w	r4, r4, #4
 8008270:	444d      	add	r5, r9
 8008272:	f4bf aeab 	bcs.w	8007fcc <forward_dense+0x128>
 8008276:	2c00      	cmp	r4, #0
 8008278:	d1e9      	bne.n	800824e <forward_dense+0x3aa>
 800827a:	4634      	mov	r4, r6
 800827c:	4646      	mov	r6, r8
 800827e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008282:	9400      	str	r4, [sp, #0]
 8008284:	463b      	mov	r3, r7
 8008286:	4629      	mov	r1, r5
 8008288:	4652      	mov	r2, sl
 800828a:	4640      	mov	r0, r8
 800828c:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008290:	f7ff fd4a 	bl	8007d28 <ai_dict4_dot_array_f32>
 8008294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008296:	f84b 3b04 	str.w	r3, [fp], #4
 800829a:	45b3      	cmp	fp, r6
 800829c:	444d      	add	r5, r9
 800829e:	d3f0      	bcc.n	8008282 <forward_dense+0x3de>
 80082a0:	46a0      	mov	r8, r4
 80082a2:	e696      	b.n	8007fd2 <forward_dense+0x12e>
 80082a4:	9406      	str	r4, [sp, #24]
 80082a6:	e627      	b.n	8007ef8 <forward_dense+0x54>
 80082a8:	9306      	str	r3, [sp, #24]
 80082aa:	e625      	b.n	8007ef8 <forward_dense+0x54>
 80082ac:	00000000 	.word	0x00000000
 80082b0:	4634      	mov	r4, r6
 80082b2:	4646      	mov	r6, r8
 80082b4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80082b8:	9400      	str	r4, [sp, #0]
 80082ba:	463b      	mov	r3, r7
 80082bc:	4629      	mov	r1, r5
 80082be:	4652      	mov	r2, sl
 80082c0:	4640      	mov	r0, r8
 80082c2:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80082c6:	f7ff fc61 	bl	8007b8c <ai_dict8_dot_array_f32>
 80082ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082cc:	f84b 3b04 	str.w	r3, [fp], #4
 80082d0:	45b3      	cmp	fp, r6
 80082d2:	444d      	add	r5, r9
 80082d4:	d3f0      	bcc.n	80082b8 <forward_dense+0x414>
 80082d6:	46a0      	mov	r8, r4
 80082d8:	e67b      	b.n	8007fd2 <forward_dense+0x12e>
 80082da:	b011      	add	sp, #68	; 0x44
 80082dc:	ecbd 8b10 	vpop	{d8-d15}
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80082e8:	e624      	b.n	8007f34 <forward_dense+0x90>
 80082ea:	2300      	movs	r3, #0
 80082ec:	9306      	str	r3, [sp, #24]
 80082ee:	e603      	b.n	8007ef8 <forward_dense+0x54>
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	e5f4      	b.n	8007ede <forward_dense+0x3a>

080082f4 <nl_func_sm_array_f32>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	ed2d 8b04 	vpush	{d8-d9}
 80082fc:	b089      	sub	sp, #36	; 0x24
 80082fe:	698f      	ldr	r7, [r1, #24]
 8008300:	6984      	ldr	r4, [r0, #24]
 8008302:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8008306:	68bd      	ldr	r5, [r7, #8]
 8008308:	9402      	str	r4, [sp, #8]
 800830a:	4626      	mov	r6, r4
 800830c:	4696      	mov	lr, r2
 800830e:	eba2 020c 	sub.w	r2, r2, ip
 8008312:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8008316:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	68b6      	ldr	r6, [r6, #8]
 800831c:	ebae 0e04 	sub.w	lr, lr, r4
 8008320:	4295      	cmp	r5, r2
 8008322:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8008326:	d354      	bcc.n	80083d2 <nl_func_sm_array_f32+0xde>
 8008328:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800832c:	f1cc 0200 	rsb	r2, ip, #0
 8008330:	00a4      	lsls	r4, r4, #2
 8008332:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8008336:	9303      	str	r3, [sp, #12]
 8008338:	9204      	str	r2, [sp, #16]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4262      	negs	r2, r4
 800833e:	9205      	str	r2, [sp, #20]
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008346:	9b02      	ldr	r3, [sp, #8]
 8008348:	9a07      	ldr	r2, [sp, #28]
 800834a:	60bd      	str	r5, [r7, #8]
 800834c:	609e      	str	r6, [r3, #8]
 800834e:	9b06      	ldr	r3, [sp, #24]
 8008350:	6992      	ldr	r2, [r2, #24]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	6894      	ldr	r4, [r2, #8]
 8008356:	9a03      	ldr	r2, [sp, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	2a01      	cmp	r2, #1
 800835c:	ed93 8a00 	vldr	s16, [r3]
 8008360:	d940      	bls.n	80083e4 <nl_func_sm_array_f32+0xf0>
 8008362:	9901      	ldr	r1, [sp, #4]
 8008364:	1d1a      	adds	r2, r3, #4
 8008366:	eb03 0b01 	add.w	fp, r3, r1
 800836a:	ecf2 7a01 	vldmia	r2!, {s15}
 800836e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008376:	bfb8      	it	lt
 8008378:	eeb0 8a67 	vmovlt.f32	s16, s15
 800837c:	4593      	cmp	fp, r2
 800837e:	d1f4      	bne.n	800836a <nl_func_sm_array_f32+0x76>
 8008380:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80083f0 <nl_func_sm_array_f32+0xfc>
 8008384:	469a      	mov	sl, r3
 8008386:	46a1      	mov	r9, r4
 8008388:	46a0      	mov	r8, r4
 800838a:	ecba 0a01 	vldmia	sl!, {s0}
 800838e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008392:	f003 f995 	bl	800b6c0 <expf>
 8008396:	45d3      	cmp	fp, sl
 8008398:	eca8 0a01 	vstmia	r8!, {s0}
 800839c:	ee78 8a80 	vadd.f32	s17, s17, s0
 80083a0:	d1f3      	bne.n	800838a <nl_func_sm_array_f32+0x96>
 80083a2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80083a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083aa:	d00b      	beq.n	80083c4 <nl_func_sm_array_f32+0xd0>
 80083ac:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80083b0:	9b01      	ldr	r3, [sp, #4]
 80083b2:	441c      	add	r4, r3
 80083b4:	edd9 7a00 	vldr	s15, [r9]
 80083b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083bc:	ece9 7a01 	vstmia	r9!, {s15}
 80083c0:	454c      	cmp	r4, r9
 80083c2:	d1f7      	bne.n	80083b4 <nl_func_sm_array_f32+0xc0>
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	441d      	add	r5, r3
 80083ca:	9b05      	ldr	r3, [sp, #20]
 80083cc:	42aa      	cmp	r2, r5
 80083ce:	441e      	add	r6, r3
 80083d0:	d9b9      	bls.n	8008346 <nl_func_sm_array_f32+0x52>
 80083d2:	60ba      	str	r2, [r7, #8]
 80083d4:	9a02      	ldr	r2, [sp, #8]
 80083d6:	68d3      	ldr	r3, [r2, #12]
 80083d8:	6093      	str	r3, [r2, #8]
 80083da:	b009      	add	sp, #36	; 0x24
 80083dc:	ecbd 8b04 	vpop	{d8-d9}
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	2a00      	cmp	r2, #0
 80083e6:	d0ed      	beq.n	80083c4 <nl_func_sm_array_f32+0xd0>
 80083e8:	9a01      	ldr	r2, [sp, #4]
 80083ea:	eb03 0b02 	add.w	fp, r3, r2
 80083ee:	e7c7      	b.n	8008380 <nl_func_sm_array_f32+0x8c>
 80083f0:	00000000 	.word	0x00000000

080083f4 <nl_func_relu_generic_array_f32>:
 80083f4:	b430      	push	{r4, r5}
 80083f6:	6989      	ldr	r1, [r1, #24]
 80083f8:	6980      	ldr	r0, [r0, #24]
 80083fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80083fe:	688c      	ldr	r4, [r1, #8]
 8008400:	6880      	ldr	r0, [r0, #8]
 8008402:	ed93 7a00 	vldr	s14, [r3]
 8008406:	ed93 6a01 	vldr	s12, [r3, #4]
 800840a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800840e:	3a01      	subs	r2, #1
 8008410:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008414:	0092      	lsls	r2, r2, #2
 8008416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841a:	4410      	add	r0, r2
 800841c:	4422      	add	r2, r4
 800841e:	d421      	bmi.n	8008464 <nl_func_relu_generic_array_f32+0x70>
 8008420:	4294      	cmp	r4, r2
 8008422:	d83d      	bhi.n	80084a0 <nl_func_relu_generic_array_f32+0xac>
 8008424:	1d13      	adds	r3, r2, #4
 8008426:	1d02      	adds	r2, r0, #4
 8008428:	e010      	b.n	800844c <nl_func_relu_generic_array_f32+0x58>
 800842a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800842e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008432:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008436:	d501      	bpl.n	800843c <nl_func_relu_generic_array_f32+0x48>
 8008438:	ee65 7a86 	vmul.f32	s15, s11, s12
 800843c:	ed62 7a01 	vstmdb	r2!, {s15}
 8008440:	6888      	ldr	r0, [r1, #8]
 8008442:	f1a3 0408 	sub.w	r4, r3, #8
 8008446:	4284      	cmp	r4, r0
 8008448:	462b      	mov	r3, r5
 800844a:	d329      	bcc.n	80084a0 <nl_func_relu_generic_array_f32+0xac>
 800844c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008450:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	f1a3 0504 	sub.w	r5, r3, #4
 800845c:	d4e5      	bmi.n	800842a <nl_func_relu_generic_array_f32+0x36>
 800845e:	eef0 7a66 	vmov.f32	s15, s13
 8008462:	e7eb      	b.n	800843c <nl_func_relu_generic_array_f32+0x48>
 8008464:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	d01a      	beq.n	80084a4 <nl_func_relu_generic_array_f32+0xb0>
 800846e:	4294      	cmp	r4, r2
 8008470:	d816      	bhi.n	80084a0 <nl_func_relu_generic_array_f32+0xac>
 8008472:	1d13      	adds	r3, r2, #4
 8008474:	1d02      	adds	r2, r0, #4
 8008476:	ed53 7a01 	vldr	s15, [r3, #-4]
 800847a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800847e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008482:	f1a3 0408 	sub.w	r4, r3, #8
 8008486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848a:	f1a3 0004 	sub.w	r0, r3, #4
 800848e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008492:	4623      	mov	r3, r4
 8008494:	d51e      	bpl.n	80084d4 <nl_func_relu_generic_array_f32+0xe0>
 8008496:	ed62 6a01 	vstmdb	r2!, {s13}
 800849a:	688b      	ldr	r3, [r1, #8]
 800849c:	42a3      	cmp	r3, r4
 800849e:	d91e      	bls.n	80084de <nl_func_relu_generic_array_f32+0xea>
 80084a0:	bc30      	pop	{r4, r5}
 80084a2:	4770      	bx	lr
 80084a4:	4294      	cmp	r4, r2
 80084a6:	d8fb      	bhi.n	80084a0 <nl_func_relu_generic_array_f32+0xac>
 80084a8:	1d13      	adds	r3, r2, #4
 80084aa:	2500      	movs	r5, #0
 80084ac:	1d02      	adds	r2, r0, #4
 80084ae:	ed53 7a01 	vldr	s15, [r3, #-4]
 80084b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084b6:	f1a3 0408 	sub.w	r4, r3, #8
 80084ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084be:	f1a3 0004 	sub.w	r0, r3, #4
 80084c2:	4623      	mov	r3, r4
 80084c4:	db0d      	blt.n	80084e2 <nl_func_relu_generic_array_f32+0xee>
 80084c6:	ed62 7a01 	vstmdb	r2!, {s15}
 80084ca:	688b      	ldr	r3, [r1, #8]
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d8e7      	bhi.n	80084a0 <nl_func_relu_generic_array_f32+0xac>
 80084d0:	4603      	mov	r3, r0
 80084d2:	e7ec      	b.n	80084ae <nl_func_relu_generic_array_f32+0xba>
 80084d4:	ed62 7a01 	vstmdb	r2!, {s15}
 80084d8:	688c      	ldr	r4, [r1, #8]
 80084da:	429c      	cmp	r4, r3
 80084dc:	d8e0      	bhi.n	80084a0 <nl_func_relu_generic_array_f32+0xac>
 80084de:	4603      	mov	r3, r0
 80084e0:	e7c9      	b.n	8008476 <nl_func_relu_generic_array_f32+0x82>
 80084e2:	f842 5d04 	str.w	r5, [r2, #-4]!
 80084e6:	688c      	ldr	r4, [r1, #8]
 80084e8:	429c      	cmp	r4, r3
 80084ea:	d8d9      	bhi.n	80084a0 <nl_func_relu_generic_array_f32+0xac>
 80084ec:	4603      	mov	r3, r0
 80084ee:	e7de      	b.n	80084ae <nl_func_relu_generic_array_f32+0xba>

080084f0 <forward_relu>:
 80084f0:	6982      	ldr	r2, [r0, #24]
 80084f2:	8813      	ldrh	r3, [r2, #0]
 80084f4:	b333      	cbz	r3, 8008544 <forward_relu+0x54>
 80084f6:	6852      	ldr	r2, [r2, #4]
 80084f8:	6851      	ldr	r1, [r2, #4]
 80084fa:	b101      	cbz	r1, 80084fe <forward_relu+0xe>
 80084fc:	6809      	ldr	r1, [r1, #0]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d91d      	bls.n	800853e <forward_relu+0x4e>
 8008502:	b4f0      	push	{r4, r5, r6, r7}
 8008504:	6917      	ldr	r7, [r2, #16]
 8008506:	b107      	cbz	r7, 800850a <forward_relu+0x1a>
 8008508:	683f      	ldr	r7, [r7, #0]
 800850a:	688c      	ldr	r4, [r1, #8]
 800850c:	69c3      	ldr	r3, [r0, #28]
 800850e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008512:	2b00      	cmp	r3, #0
 8008514:	d044      	beq.n	80085a0 <forward_relu+0xb0>
 8008516:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800851a:	2d01      	cmp	r5, #1
 800851c:	d014      	beq.n	8008548 <forward_relu+0x58>
 800851e:	2c00      	cmp	r4, #0
 8008520:	d074      	beq.n	800860c <forward_relu+0x11c>
 8008522:	68ce      	ldr	r6, [r1, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800852a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800852e:	42a6      	cmp	r6, r4
 8008530:	fb05 f202 	mul.w	r2, r5, r2
 8008534:	d1f9      	bne.n	800852a <forward_relu+0x3a>
 8008536:	4638      	mov	r0, r7
 8008538:	bcf0      	pop	{r4, r5, r6, r7}
 800853a:	f7ff bf5b 	b.w	80083f4 <nl_func_relu_generic_array_f32>
 800853e:	2300      	movs	r3, #0
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	deff      	udf	#255	; 0xff
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	deff      	udf	#255	; 0xff
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	6988      	ldr	r0, [r1, #24]
 800854c:	6896      	ldr	r6, [r2, #8]
 800854e:	ed93 7a00 	vldr	s14, [r3]
 8008552:	6882      	ldr	r2, [r0, #8]
 8008554:	b184      	cbz	r4, 8008578 <forward_relu+0x88>
 8008556:	68cf      	ldr	r7, [r1, #12]
 8008558:	462b      	mov	r3, r5
 800855a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800855e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8008562:	42a7      	cmp	r7, r4
 8008564:	fb01 f303 	mul.w	r3, r1, r3
 8008568:	d1f9      	bne.n	800855e <forward_relu+0x6e>
 800856a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800856e:	3b01      	subs	r3, #1
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	18d2      	adds	r2, r2, r3
 8008574:	441e      	add	r6, r3
 8008576:	d23f      	bcs.n	80085f8 <forward_relu+0x108>
 8008578:	1d13      	adds	r3, r2, #4
 800857a:	2500      	movs	r5, #0
 800857c:	1d32      	adds	r2, r6, #4
 800857e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858a:	f1a3 0104 	sub.w	r1, r3, #4
 800858e:	d835      	bhi.n	80085fc <forward_relu+0x10c>
 8008590:	ed62 7a01 	vstmdb	r2!, {s15}
 8008594:	6884      	ldr	r4, [r0, #8]
 8008596:	3b08      	subs	r3, #8
 8008598:	429c      	cmp	r4, r3
 800859a:	d82d      	bhi.n	80085f8 <forward_relu+0x108>
 800859c:	460b      	mov	r3, r1
 800859e:	e7ee      	b.n	800857e <forward_relu+0x8e>
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	698d      	ldr	r5, [r1, #24]
 80085a4:	6898      	ldr	r0, [r3, #8]
 80085a6:	68ab      	ldr	r3, [r5, #8]
 80085a8:	b184      	cbz	r4, 80085cc <forward_relu+0xdc>
 80085aa:	68ce      	ldr	r6, [r1, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80085b2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80085b6:	42a6      	cmp	r6, r4
 80085b8:	fb01 f202 	mul.w	r2, r1, r2
 80085bc:	d1f9      	bne.n	80085b2 <forward_relu+0xc2>
 80085be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80085c2:	3a01      	subs	r2, #1
 80085c4:	0092      	lsls	r2, r2, #2
 80085c6:	189b      	adds	r3, r3, r2
 80085c8:	4410      	add	r0, r2
 80085ca:	d215      	bcs.n	80085f8 <forward_relu+0x108>
 80085cc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008610 <forward_relu+0x120>
 80085d0:	3304      	adds	r3, #4
 80085d2:	1d01      	adds	r1, r0, #4
 80085d4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80085d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e0:	bfb8      	it	lt
 80085e2:	eef0 7a47 	vmovlt.f32	s15, s14
 80085e6:	ed61 7a01 	vstmdb	r1!, {s15}
 80085ea:	68a8      	ldr	r0, [r5, #8]
 80085ec:	f1a3 0208 	sub.w	r2, r3, #8
 80085f0:	4290      	cmp	r0, r2
 80085f2:	f1a3 0304 	sub.w	r3, r3, #4
 80085f6:	d9ed      	bls.n	80085d4 <forward_relu+0xe4>
 80085f8:	bcf0      	pop	{r4, r5, r6, r7}
 80085fa:	4770      	bx	lr
 80085fc:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008600:	6884      	ldr	r4, [r0, #8]
 8008602:	3b08      	subs	r3, #8
 8008604:	429c      	cmp	r4, r3
 8008606:	d8f7      	bhi.n	80085f8 <forward_relu+0x108>
 8008608:	460b      	mov	r3, r1
 800860a:	e7b8      	b.n	800857e <forward_relu+0x8e>
 800860c:	2201      	movs	r2, #1
 800860e:	e792      	b.n	8008536 <forward_relu+0x46>
 8008610:	00000000 	.word	0x00000000

08008614 <forward_sm>:
 8008614:	6982      	ldr	r2, [r0, #24]
 8008616:	8813      	ldrh	r3, [r2, #0]
 8008618:	b32b      	cbz	r3, 8008666 <forward_sm+0x52>
 800861a:	6852      	ldr	r2, [r2, #4]
 800861c:	6851      	ldr	r1, [r2, #4]
 800861e:	b101      	cbz	r1, 8008622 <forward_sm+0xe>
 8008620:	6809      	ldr	r1, [r1, #0]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d91c      	bls.n	8008660 <forward_sm+0x4c>
 8008626:	6913      	ldr	r3, [r2, #16]
 8008628:	b1c3      	cbz	r3, 800865c <forward_sm+0x48>
 800862a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	688c      	ldr	r4, [r1, #8]
 8008630:	68c3      	ldr	r3, [r0, #12]
 8008632:	68ce      	ldr	r6, [r1, #12]
 8008634:	685f      	ldr	r7, [r3, #4]
 8008636:	6873      	ldr	r3, [r6, #4]
 8008638:	0a24      	lsrs	r4, r4, #8
 800863a:	b083      	sub	sp, #12
 800863c:	d015      	beq.n	800866a <forward_sm+0x56>
 800863e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008642:	2201      	movs	r2, #1
 8008644:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008648:	42a6      	cmp	r6, r4
 800864a:	fb05 f202 	mul.w	r2, r5, r2
 800864e:	d1f9      	bne.n	8008644 <forward_sm+0x30>
 8008650:	e9cd 3700 	strd	r3, r7, [sp]
 8008654:	f7ff fe4e 	bl	80082f4 <nl_func_sm_array_f32>
 8008658:	b003      	add	sp, #12
 800865a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	deff      	udf	#255	; 0xff
 8008660:	2300      	movs	r3, #0
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	deff      	udf	#255	; 0xff
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	deff      	udf	#255	; 0xff
 800866a:	2201      	movs	r2, #1
 800866c:	e9cd 3700 	strd	r3, r7, [sp]
 8008670:	f7ff fe40 	bl	80082f4 <nl_func_sm_array_f32>
 8008674:	b003      	add	sp, #12
 8008676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008678 <ai_check_custom_types>:
 8008678:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <ai_check_custom_types+0x50>)
 800867a:	b082      	sub	sp, #8
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	b118      	cbz	r0, 800868a <ai_check_custom_types+0x12>
 8008682:	7803      	ldrb	r3, [r0, #0]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d002      	beq.n	800868e <ai_check_custom_types+0x16>
 8008688:	2000      	movs	r0, #0
 800868a:	b002      	add	sp, #8
 800868c:	4770      	bx	lr
 800868e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008692:	4293      	cmp	r3, r2
 8008694:	d004      	beq.n	80086a0 <ai_check_custom_types+0x28>
 8008696:	2001      	movs	r0, #1
 8008698:	f080 0001 	eor.w	r0, r0, #1
 800869c:	b002      	add	sp, #8
 800869e:	4770      	bx	lr
 80086a0:	7842      	ldrb	r2, [r0, #1]
 80086a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	f100 0001 	add.w	r0, r0, #1
 80086ac:	d1f3      	bne.n	8008696 <ai_check_custom_types+0x1e>
 80086ae:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80086b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d1ed      	bne.n	8008696 <ai_check_custom_types+0x1e>
 80086ba:	7842      	ldrb	r2, [r0, #1]
 80086bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d1e8      	bne.n	8008696 <ai_check_custom_types+0x1e>
 80086c4:	2000      	movs	r0, #0
 80086c6:	e7e7      	b.n	8008698 <ai_check_custom_types+0x20>
 80086c8:	0800ba74 	.word	0x0800ba74

080086cc <ai_layers_init_all>:
 80086cc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80086ce:	b17a      	cbz	r2, 80086f0 <ai_layers_init_all+0x24>
 80086d0:	6913      	ldr	r3, [r2, #16]
 80086d2:	60d0      	str	r0, [r2, #12]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	f04f 0201 	mov.w	r2, #1
 80086da:	d009      	beq.n	80086f0 <ai_layers_init_all+0x24>
 80086dc:	b143      	cbz	r3, 80086f0 <ai_layers_init_all+0x24>
 80086de:	6919      	ldr	r1, [r3, #16]
 80086e0:	60d8      	str	r0, [r3, #12]
 80086e2:	4299      	cmp	r1, r3
 80086e4:	f102 0201 	add.w	r2, r2, #1
 80086e8:	d002      	beq.n	80086f0 <ai_layers_init_all+0x24>
 80086ea:	460b      	mov	r3, r1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1f6      	bne.n	80086de <ai_layers_init_all+0x12>
 80086f0:	4610      	mov	r0, r2
 80086f2:	4770      	bx	lr

080086f4 <ai_layers_post_init_all>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80086f8:	b18c      	cbz	r4, 800871e <ai_layers_post_init_all+0x2a>
 80086fa:	2500      	movs	r5, #0
 80086fc:	6863      	ldr	r3, [r4, #4]
 80086fe:	f013 0f01 	tst.w	r3, #1
 8008702:	4620      	mov	r0, r4
 8008704:	d003      	beq.n	800870e <ai_layers_post_init_all+0x1a>
 8008706:	6a23      	ldr	r3, [r4, #32]
 8008708:	b10b      	cbz	r3, 800870e <ai_layers_post_init_all+0x1a>
 800870a:	4798      	blx	r3
 800870c:	3501      	adds	r5, #1
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	42a3      	cmp	r3, r4
 8008712:	d002      	beq.n	800871a <ai_layers_post_init_all+0x26>
 8008714:	461c      	mov	r4, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1f0      	bne.n	80086fc <ai_layers_post_init_all+0x8>
 800871a:	4628      	mov	r0, r5
 800871c:	bd38      	pop	{r3, r4, r5, pc}
 800871e:	4625      	mov	r5, r4
 8008720:	e7fb      	b.n	800871a <ai_layers_post_init_all+0x26>
 8008722:	bf00      	nop

08008724 <ai_layers_forward_all>:
 8008724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008728:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800872a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800872c:	4604      	mov	r4, r0
 800872e:	2f00      	cmp	r7, #0
 8008730:	d02c      	beq.n	800878c <ai_layers_forward_all+0x68>
 8008732:	2d00      	cmp	r5, #0
 8008734:	d03f      	beq.n	80087b6 <ai_layers_forward_all+0x92>
 8008736:	6545      	str	r5, [r0, #84]	; 0x54
 8008738:	4629      	mov	r1, r5
 800873a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800873c:	2001      	movs	r0, #1
 800873e:	47b8      	blx	r7
 8008740:	2600      	movs	r6, #0
 8008742:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008744:	46b0      	mov	r8, r6
 8008746:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008748:	2002      	movs	r0, #2
 800874a:	47b8      	blx	r7
 800874c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800874e:	696b      	ldr	r3, [r5, #20]
 8008750:	4628      	mov	r0, r5
 8008752:	4798      	blx	r3
 8008754:	692b      	ldr	r3, [r5, #16]
 8008756:	429d      	cmp	r5, r3
 8008758:	f04f 0003 	mov.w	r0, #3
 800875c:	4619      	mov	r1, r3
 800875e:	d009      	beq.n	8008774 <ai_layers_forward_all+0x50>
 8008760:	6563      	str	r3, [r4, #84]	; 0x54
 8008762:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008764:	47b8      	blx	r7
 8008766:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008768:	3601      	adds	r6, #1
 800876a:	2900      	cmp	r1, #0
 800876c:	d1eb      	bne.n	8008746 <ai_layers_forward_all+0x22>
 800876e:	4630      	mov	r0, r6
 8008770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008774:	2100      	movs	r1, #0
 8008776:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 800877a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800877c:	47b8      	blx	r7
 800877e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008780:	3601      	adds	r6, #1
 8008782:	2900      	cmp	r1, #0
 8008784:	d1df      	bne.n	8008746 <ai_layers_forward_all+0x22>
 8008786:	4630      	mov	r0, r6
 8008788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800878c:	b19d      	cbz	r5, 80087b6 <ai_layers_forward_all+0x92>
 800878e:	6545      	str	r5, [r0, #84]	; 0x54
 8008790:	463e      	mov	r6, r7
 8008792:	696b      	ldr	r3, [r5, #20]
 8008794:	4628      	mov	r0, r5
 8008796:	4798      	blx	r3
 8008798:	692b      	ldr	r3, [r5, #16]
 800879a:	42ab      	cmp	r3, r5
 800879c:	f106 0601 	add.w	r6, r6, #1
 80087a0:	d004      	beq.n	80087ac <ai_layers_forward_all+0x88>
 80087a2:	6563      	str	r3, [r4, #84]	; 0x54
 80087a4:	461d      	mov	r5, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1f3      	bne.n	8008792 <ai_layers_forward_all+0x6e>
 80087aa:	e7e0      	b.n	800876e <ai_layers_forward_all+0x4a>
 80087ac:	2300      	movs	r3, #0
 80087ae:	6563      	str	r3, [r4, #84]	; 0x54
 80087b0:	4630      	mov	r0, r6
 80087b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b6:	462e      	mov	r6, r5
 80087b8:	4630      	mov	r0, r6
 80087ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087be:	bf00      	nop

080087c0 <ai_array_to_buffer_fmt>:
 80087c0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d02e      	beq.n	8008826 <ai_array_to_buffer_fmt+0x66>
 80087c8:	4a1b      	ldr	r2, [pc, #108]	; (8008838 <ai_array_to_buffer_fmt+0x78>)
 80087ca:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00e      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 80087d2:	dd11      	ble.n	80087f8 <ai_array_to_buffer_fmt+0x38>
 80087d4:	4a19      	ldr	r2, [pc, #100]	; (800883c <ai_array_to_buffer_fmt+0x7c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00a      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 80087da:	dd18      	ble.n	800880e <ai_array_to_buffer_fmt+0x4e>
 80087dc:	4a18      	ldr	r2, [pc, #96]	; (8008840 <ai_array_to_buffer_fmt+0x80>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d006      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 80087e2:	4a18      	ldr	r2, [pc, #96]	; (8008844 <ai_array_to_buffer_fmt+0x84>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 80087e8:	4a17      	ldr	r2, [pc, #92]	; (8008848 <ai_array_to_buffer_fmt+0x88>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d000      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 80087ee:	2340      	movs	r3, #64	; 0x40
 80087f0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80087f4:	4318      	orrs	r0, r3
 80087f6:	4770      	bx	lr
 80087f8:	4a14      	ldr	r2, [pc, #80]	; (800884c <ai_array_to_buffer_fmt+0x8c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d0f8      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 80087fe:	dd06      	ble.n	800880e <ai_array_to_buffer_fmt+0x4e>
 8008800:	4a13      	ldr	r2, [pc, #76]	; (8008850 <ai_array_to_buffer_fmt+0x90>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d0f4      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 8008806:	320f      	adds	r2, #15
 8008808:	4293      	cmp	r3, r2
 800880a:	d0f1      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 800880c:	e7ef      	b.n	80087ee <ai_array_to_buffer_fmt+0x2e>
 800880e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008812:	4293      	cmp	r3, r2
 8008814:	d0ec      	beq.n	80087f0 <ai_array_to_buffer_fmt+0x30>
 8008816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800881a:	4293      	cmp	r3, r2
 800881c:	d1e7      	bne.n	80087ee <ai_array_to_buffer_fmt+0x2e>
 800881e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008822:	4318      	orrs	r0, r3
 8008824:	4770      	bx	lr
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <ai_array_to_buffer_fmt+0x94>)
 8008828:	4003      	ands	r3, r0
 800882a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800882e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008832:	4318      	orrs	r0, r3
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	00060440 	.word	0x00060440
 800883c:	00840447 	.word	0x00840447
 8008840:	0084084f 	.word	0x0084084f
 8008844:	01821040 	.word	0x01821040
 8008848:	00840840 	.word	0x00840840
 800884c:	00040447 	.word	0x00040447
 8008850:	00040840 	.word	0x00040840
 8008854:	00803fff 	.word	0x00803fff

08008858 <ai_array_get_byte_size>:
 8008858:	b1c1      	cbz	r1, 800888c <ai_array_get_byte_size+0x34>
 800885a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800885e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008862:	4413      	add	r3, r2
 8008864:	fb01 f103 	mul.w	r1, r1, r3
 8008868:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800886c:	3107      	adds	r1, #7
 800886e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8008872:	f021 0107 	bic.w	r1, r1, #7
 8008876:	2804      	cmp	r0, #4
 8008878:	fa21 f102 	lsr.w	r1, r1, r2
 800887c:	d008      	beq.n	8008890 <ai_array_get_byte_size+0x38>
 800887e:	2808      	cmp	r0, #8
 8008880:	d101      	bne.n	8008886 <ai_array_get_byte_size+0x2e>
 8008882:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8008886:	3107      	adds	r1, #7
 8008888:	08c8      	lsrs	r0, r1, #3
 800888a:	4770      	bx	lr
 800888c:	4608      	mov	r0, r1
 800888e:	4770      	bx	lr
 8008890:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8008894:	3107      	adds	r1, #7
 8008896:	08c8      	lsrs	r0, r1, #3
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop

0800889c <__errno>:
 800889c:	4b01      	ldr	r3, [pc, #4]	; (80088a4 <__errno+0x8>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	200006a0 	.word	0x200006a0

080088a8 <__libc_init_array>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4d0d      	ldr	r5, [pc, #52]	; (80088e0 <__libc_init_array+0x38>)
 80088ac:	4c0d      	ldr	r4, [pc, #52]	; (80088e4 <__libc_init_array+0x3c>)
 80088ae:	1b64      	subs	r4, r4, r5
 80088b0:	10a4      	asrs	r4, r4, #2
 80088b2:	2600      	movs	r6, #0
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	d109      	bne.n	80088cc <__libc_init_array+0x24>
 80088b8:	4d0b      	ldr	r5, [pc, #44]	; (80088e8 <__libc_init_array+0x40>)
 80088ba:	4c0c      	ldr	r4, [pc, #48]	; (80088ec <__libc_init_array+0x44>)
 80088bc:	f003 f856 	bl	800b96c <_init>
 80088c0:	1b64      	subs	r4, r4, r5
 80088c2:	10a4      	asrs	r4, r4, #2
 80088c4:	2600      	movs	r6, #0
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	d105      	bne.n	80088d6 <__libc_init_array+0x2e>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d0:	4798      	blx	r3
 80088d2:	3601      	adds	r6, #1
 80088d4:	e7ee      	b.n	80088b4 <__libc_init_array+0xc>
 80088d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088da:	4798      	blx	r3
 80088dc:	3601      	adds	r6, #1
 80088de:	e7f2      	b.n	80088c6 <__libc_init_array+0x1e>
 80088e0:	080154f4 	.word	0x080154f4
 80088e4:	080154f4 	.word	0x080154f4
 80088e8:	080154f4 	.word	0x080154f4
 80088ec:	080154f8 	.word	0x080154f8

080088f0 <malloc>:
 80088f0:	4b02      	ldr	r3, [pc, #8]	; (80088fc <malloc+0xc>)
 80088f2:	4601      	mov	r1, r0
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	f000 b885 	b.w	8008a04 <_malloc_r>
 80088fa:	bf00      	nop
 80088fc:	200006a0 	.word	0x200006a0

08008900 <memcpy>:
 8008900:	440a      	add	r2, r1
 8008902:	4291      	cmp	r1, r2
 8008904:	f100 33ff 	add.w	r3, r0, #4294967295
 8008908:	d100      	bne.n	800890c <memcpy+0xc>
 800890a:	4770      	bx	lr
 800890c:	b510      	push	{r4, lr}
 800890e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008916:	4291      	cmp	r1, r2
 8008918:	d1f9      	bne.n	800890e <memcpy+0xe>
 800891a:	bd10      	pop	{r4, pc}

0800891c <memset>:
 800891c:	4402      	add	r2, r0
 800891e:	4603      	mov	r3, r0
 8008920:	4293      	cmp	r3, r2
 8008922:	d100      	bne.n	8008926 <memset+0xa>
 8008924:	4770      	bx	lr
 8008926:	f803 1b01 	strb.w	r1, [r3], #1
 800892a:	e7f9      	b.n	8008920 <memset+0x4>

0800892c <_free_r>:
 800892c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800892e:	2900      	cmp	r1, #0
 8008930:	d044      	beq.n	80089bc <_free_r+0x90>
 8008932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008936:	9001      	str	r0, [sp, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f1a1 0404 	sub.w	r4, r1, #4
 800893e:	bfb8      	it	lt
 8008940:	18e4      	addlt	r4, r4, r3
 8008942:	f001 fbeb 	bl	800a11c <__malloc_lock>
 8008946:	4a1e      	ldr	r2, [pc, #120]	; (80089c0 <_free_r+0x94>)
 8008948:	9801      	ldr	r0, [sp, #4]
 800894a:	6813      	ldr	r3, [r2, #0]
 800894c:	b933      	cbnz	r3, 800895c <_free_r+0x30>
 800894e:	6063      	str	r3, [r4, #4]
 8008950:	6014      	str	r4, [r2, #0]
 8008952:	b003      	add	sp, #12
 8008954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008958:	f001 bbe6 	b.w	800a128 <__malloc_unlock>
 800895c:	42a3      	cmp	r3, r4
 800895e:	d908      	bls.n	8008972 <_free_r+0x46>
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	1961      	adds	r1, r4, r5
 8008964:	428b      	cmp	r3, r1
 8008966:	bf01      	itttt	eq
 8008968:	6819      	ldreq	r1, [r3, #0]
 800896a:	685b      	ldreq	r3, [r3, #4]
 800896c:	1949      	addeq	r1, r1, r5
 800896e:	6021      	streq	r1, [r4, #0]
 8008970:	e7ed      	b.n	800894e <_free_r+0x22>
 8008972:	461a      	mov	r2, r3
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	b10b      	cbz	r3, 800897c <_free_r+0x50>
 8008978:	42a3      	cmp	r3, r4
 800897a:	d9fa      	bls.n	8008972 <_free_r+0x46>
 800897c:	6811      	ldr	r1, [r2, #0]
 800897e:	1855      	adds	r5, r2, r1
 8008980:	42a5      	cmp	r5, r4
 8008982:	d10b      	bne.n	800899c <_free_r+0x70>
 8008984:	6824      	ldr	r4, [r4, #0]
 8008986:	4421      	add	r1, r4
 8008988:	1854      	adds	r4, r2, r1
 800898a:	42a3      	cmp	r3, r4
 800898c:	6011      	str	r1, [r2, #0]
 800898e:	d1e0      	bne.n	8008952 <_free_r+0x26>
 8008990:	681c      	ldr	r4, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	6053      	str	r3, [r2, #4]
 8008996:	4421      	add	r1, r4
 8008998:	6011      	str	r1, [r2, #0]
 800899a:	e7da      	b.n	8008952 <_free_r+0x26>
 800899c:	d902      	bls.n	80089a4 <_free_r+0x78>
 800899e:	230c      	movs	r3, #12
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	e7d6      	b.n	8008952 <_free_r+0x26>
 80089a4:	6825      	ldr	r5, [r4, #0]
 80089a6:	1961      	adds	r1, r4, r5
 80089a8:	428b      	cmp	r3, r1
 80089aa:	bf04      	itt	eq
 80089ac:	6819      	ldreq	r1, [r3, #0]
 80089ae:	685b      	ldreq	r3, [r3, #4]
 80089b0:	6063      	str	r3, [r4, #4]
 80089b2:	bf04      	itt	eq
 80089b4:	1949      	addeq	r1, r1, r5
 80089b6:	6021      	streq	r1, [r4, #0]
 80089b8:	6054      	str	r4, [r2, #4]
 80089ba:	e7ca      	b.n	8008952 <_free_r+0x26>
 80089bc:	b003      	add	sp, #12
 80089be:	bd30      	pop	{r4, r5, pc}
 80089c0:	20024774 	.word	0x20024774

080089c4 <sbrk_aligned>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	4e0e      	ldr	r6, [pc, #56]	; (8008a00 <sbrk_aligned+0x3c>)
 80089c8:	460c      	mov	r4, r1
 80089ca:	6831      	ldr	r1, [r6, #0]
 80089cc:	4605      	mov	r5, r0
 80089ce:	b911      	cbnz	r1, 80089d6 <sbrk_aligned+0x12>
 80089d0:	f000 fcf6 	bl	80093c0 <_sbrk_r>
 80089d4:	6030      	str	r0, [r6, #0]
 80089d6:	4621      	mov	r1, r4
 80089d8:	4628      	mov	r0, r5
 80089da:	f000 fcf1 	bl	80093c0 <_sbrk_r>
 80089de:	1c43      	adds	r3, r0, #1
 80089e0:	d00a      	beq.n	80089f8 <sbrk_aligned+0x34>
 80089e2:	1cc4      	adds	r4, r0, #3
 80089e4:	f024 0403 	bic.w	r4, r4, #3
 80089e8:	42a0      	cmp	r0, r4
 80089ea:	d007      	beq.n	80089fc <sbrk_aligned+0x38>
 80089ec:	1a21      	subs	r1, r4, r0
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 fce6 	bl	80093c0 <_sbrk_r>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d101      	bne.n	80089fc <sbrk_aligned+0x38>
 80089f8:	f04f 34ff 	mov.w	r4, #4294967295
 80089fc:	4620      	mov	r0, r4
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	20024778 	.word	0x20024778

08008a04 <_malloc_r>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	1ccd      	adds	r5, r1, #3
 8008a0a:	f025 0503 	bic.w	r5, r5, #3
 8008a0e:	3508      	adds	r5, #8
 8008a10:	2d0c      	cmp	r5, #12
 8008a12:	bf38      	it	cc
 8008a14:	250c      	movcc	r5, #12
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	4607      	mov	r7, r0
 8008a1a:	db01      	blt.n	8008a20 <_malloc_r+0x1c>
 8008a1c:	42a9      	cmp	r1, r5
 8008a1e:	d905      	bls.n	8008a2c <_malloc_r+0x28>
 8008a20:	230c      	movs	r3, #12
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	2600      	movs	r6, #0
 8008a26:	4630      	mov	r0, r6
 8008a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a2c:	4e2e      	ldr	r6, [pc, #184]	; (8008ae8 <_malloc_r+0xe4>)
 8008a2e:	f001 fb75 	bl	800a11c <__malloc_lock>
 8008a32:	6833      	ldr	r3, [r6, #0]
 8008a34:	461c      	mov	r4, r3
 8008a36:	bb34      	cbnz	r4, 8008a86 <_malloc_r+0x82>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f7ff ffc2 	bl	80089c4 <sbrk_aligned>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	4604      	mov	r4, r0
 8008a44:	d14d      	bne.n	8008ae2 <_malloc_r+0xde>
 8008a46:	6834      	ldr	r4, [r6, #0]
 8008a48:	4626      	mov	r6, r4
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	d140      	bne.n	8008ad0 <_malloc_r+0xcc>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	4631      	mov	r1, r6
 8008a52:	4638      	mov	r0, r7
 8008a54:	eb04 0803 	add.w	r8, r4, r3
 8008a58:	f000 fcb2 	bl	80093c0 <_sbrk_r>
 8008a5c:	4580      	cmp	r8, r0
 8008a5e:	d13a      	bne.n	8008ad6 <_malloc_r+0xd2>
 8008a60:	6821      	ldr	r1, [r4, #0]
 8008a62:	3503      	adds	r5, #3
 8008a64:	1a6d      	subs	r5, r5, r1
 8008a66:	f025 0503 	bic.w	r5, r5, #3
 8008a6a:	3508      	adds	r5, #8
 8008a6c:	2d0c      	cmp	r5, #12
 8008a6e:	bf38      	it	cc
 8008a70:	250c      	movcc	r5, #12
 8008a72:	4629      	mov	r1, r5
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff ffa5 	bl	80089c4 <sbrk_aligned>
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d02b      	beq.n	8008ad6 <_malloc_r+0xd2>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	442b      	add	r3, r5
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	e00e      	b.n	8008aa4 <_malloc_r+0xa0>
 8008a86:	6822      	ldr	r2, [r4, #0]
 8008a88:	1b52      	subs	r2, r2, r5
 8008a8a:	d41e      	bmi.n	8008aca <_malloc_r+0xc6>
 8008a8c:	2a0b      	cmp	r2, #11
 8008a8e:	d916      	bls.n	8008abe <_malloc_r+0xba>
 8008a90:	1961      	adds	r1, r4, r5
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	6025      	str	r5, [r4, #0]
 8008a96:	bf18      	it	ne
 8008a98:	6059      	strne	r1, [r3, #4]
 8008a9a:	6863      	ldr	r3, [r4, #4]
 8008a9c:	bf08      	it	eq
 8008a9e:	6031      	streq	r1, [r6, #0]
 8008aa0:	5162      	str	r2, [r4, r5]
 8008aa2:	604b      	str	r3, [r1, #4]
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f104 060b 	add.w	r6, r4, #11
 8008aaa:	f001 fb3d 	bl	800a128 <__malloc_unlock>
 8008aae:	f026 0607 	bic.w	r6, r6, #7
 8008ab2:	1d23      	adds	r3, r4, #4
 8008ab4:	1af2      	subs	r2, r6, r3
 8008ab6:	d0b6      	beq.n	8008a26 <_malloc_r+0x22>
 8008ab8:	1b9b      	subs	r3, r3, r6
 8008aba:	50a3      	str	r3, [r4, r2]
 8008abc:	e7b3      	b.n	8008a26 <_malloc_r+0x22>
 8008abe:	6862      	ldr	r2, [r4, #4]
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	bf0c      	ite	eq
 8008ac4:	6032      	streq	r2, [r6, #0]
 8008ac6:	605a      	strne	r2, [r3, #4]
 8008ac8:	e7ec      	b.n	8008aa4 <_malloc_r+0xa0>
 8008aca:	4623      	mov	r3, r4
 8008acc:	6864      	ldr	r4, [r4, #4]
 8008ace:	e7b2      	b.n	8008a36 <_malloc_r+0x32>
 8008ad0:	4634      	mov	r4, r6
 8008ad2:	6876      	ldr	r6, [r6, #4]
 8008ad4:	e7b9      	b.n	8008a4a <_malloc_r+0x46>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	603b      	str	r3, [r7, #0]
 8008ada:	4638      	mov	r0, r7
 8008adc:	f001 fb24 	bl	800a128 <__malloc_unlock>
 8008ae0:	e7a1      	b.n	8008a26 <_malloc_r+0x22>
 8008ae2:	6025      	str	r5, [r4, #0]
 8008ae4:	e7de      	b.n	8008aa4 <_malloc_r+0xa0>
 8008ae6:	bf00      	nop
 8008ae8:	20024774 	.word	0x20024774

08008aec <__cvt>:
 8008aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	ec55 4b10 	vmov	r4, r5, d0
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	460e      	mov	r6, r1
 8008af8:	4619      	mov	r1, r3
 8008afa:	462b      	mov	r3, r5
 8008afc:	bfbb      	ittet	lt
 8008afe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b02:	461d      	movlt	r5, r3
 8008b04:	2300      	movge	r3, #0
 8008b06:	232d      	movlt	r3, #45	; 0x2d
 8008b08:	700b      	strb	r3, [r1, #0]
 8008b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b10:	4691      	mov	r9, r2
 8008b12:	f023 0820 	bic.w	r8, r3, #32
 8008b16:	bfbc      	itt	lt
 8008b18:	4622      	movlt	r2, r4
 8008b1a:	4614      	movlt	r4, r2
 8008b1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b20:	d005      	beq.n	8008b2e <__cvt+0x42>
 8008b22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b26:	d100      	bne.n	8008b2a <__cvt+0x3e>
 8008b28:	3601      	adds	r6, #1
 8008b2a:	2102      	movs	r1, #2
 8008b2c:	e000      	b.n	8008b30 <__cvt+0x44>
 8008b2e:	2103      	movs	r1, #3
 8008b30:	ab03      	add	r3, sp, #12
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	ab02      	add	r3, sp, #8
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	ec45 4b10 	vmov	d0, r4, r5
 8008b3c:	4653      	mov	r3, sl
 8008b3e:	4632      	mov	r2, r6
 8008b40:	f000 fcfa 	bl	8009538 <_dtoa_r>
 8008b44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b48:	4607      	mov	r7, r0
 8008b4a:	d102      	bne.n	8008b52 <__cvt+0x66>
 8008b4c:	f019 0f01 	tst.w	r9, #1
 8008b50:	d022      	beq.n	8008b98 <__cvt+0xac>
 8008b52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b56:	eb07 0906 	add.w	r9, r7, r6
 8008b5a:	d110      	bne.n	8008b7e <__cvt+0x92>
 8008b5c:	783b      	ldrb	r3, [r7, #0]
 8008b5e:	2b30      	cmp	r3, #48	; 0x30
 8008b60:	d10a      	bne.n	8008b78 <__cvt+0x8c>
 8008b62:	2200      	movs	r2, #0
 8008b64:	2300      	movs	r3, #0
 8008b66:	4620      	mov	r0, r4
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7f7 ffc5 	bl	8000af8 <__aeabi_dcmpeq>
 8008b6e:	b918      	cbnz	r0, 8008b78 <__cvt+0x8c>
 8008b70:	f1c6 0601 	rsb	r6, r6, #1
 8008b74:	f8ca 6000 	str.w	r6, [sl]
 8008b78:	f8da 3000 	ldr.w	r3, [sl]
 8008b7c:	4499      	add	r9, r3
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2300      	movs	r3, #0
 8008b82:	4620      	mov	r0, r4
 8008b84:	4629      	mov	r1, r5
 8008b86:	f7f7 ffb7 	bl	8000af8 <__aeabi_dcmpeq>
 8008b8a:	b108      	cbz	r0, 8008b90 <__cvt+0xa4>
 8008b8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b90:	2230      	movs	r2, #48	; 0x30
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	454b      	cmp	r3, r9
 8008b96:	d307      	bcc.n	8008ba8 <__cvt+0xbc>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b9c:	1bdb      	subs	r3, r3, r7
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	b004      	add	sp, #16
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	1c59      	adds	r1, r3, #1
 8008baa:	9103      	str	r1, [sp, #12]
 8008bac:	701a      	strb	r2, [r3, #0]
 8008bae:	e7f0      	b.n	8008b92 <__cvt+0xa6>

08008bb0 <__exponent>:
 8008bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	bfb8      	it	lt
 8008bb8:	4249      	neglt	r1, r1
 8008bba:	f803 2b02 	strb.w	r2, [r3], #2
 8008bbe:	bfb4      	ite	lt
 8008bc0:	222d      	movlt	r2, #45	; 0x2d
 8008bc2:	222b      	movge	r2, #43	; 0x2b
 8008bc4:	2909      	cmp	r1, #9
 8008bc6:	7042      	strb	r2, [r0, #1]
 8008bc8:	dd2a      	ble.n	8008c20 <__exponent+0x70>
 8008bca:	f10d 0407 	add.w	r4, sp, #7
 8008bce:	46a4      	mov	ip, r4
 8008bd0:	270a      	movs	r7, #10
 8008bd2:	46a6      	mov	lr, r4
 8008bd4:	460a      	mov	r2, r1
 8008bd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008bda:	fb07 1516 	mls	r5, r7, r6, r1
 8008bde:	3530      	adds	r5, #48	; 0x30
 8008be0:	2a63      	cmp	r2, #99	; 0x63
 8008be2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008be6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008bea:	4631      	mov	r1, r6
 8008bec:	dcf1      	bgt.n	8008bd2 <__exponent+0x22>
 8008bee:	3130      	adds	r1, #48	; 0x30
 8008bf0:	f1ae 0502 	sub.w	r5, lr, #2
 8008bf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008bf8:	1c44      	adds	r4, r0, #1
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4561      	cmp	r1, ip
 8008bfe:	d30a      	bcc.n	8008c16 <__exponent+0x66>
 8008c00:	f10d 0209 	add.w	r2, sp, #9
 8008c04:	eba2 020e 	sub.w	r2, r2, lr
 8008c08:	4565      	cmp	r5, ip
 8008c0a:	bf88      	it	hi
 8008c0c:	2200      	movhi	r2, #0
 8008c0e:	4413      	add	r3, r2
 8008c10:	1a18      	subs	r0, r3, r0
 8008c12:	b003      	add	sp, #12
 8008c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c1e:	e7ed      	b.n	8008bfc <__exponent+0x4c>
 8008c20:	2330      	movs	r3, #48	; 0x30
 8008c22:	3130      	adds	r1, #48	; 0x30
 8008c24:	7083      	strb	r3, [r0, #2]
 8008c26:	70c1      	strb	r1, [r0, #3]
 8008c28:	1d03      	adds	r3, r0, #4
 8008c2a:	e7f1      	b.n	8008c10 <__exponent+0x60>

08008c2c <_printf_float>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	ed2d 8b02 	vpush	{d8}
 8008c34:	b08d      	sub	sp, #52	; 0x34
 8008c36:	460c      	mov	r4, r1
 8008c38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c3c:	4616      	mov	r6, r2
 8008c3e:	461f      	mov	r7, r3
 8008c40:	4605      	mov	r5, r0
 8008c42:	f001 fa67 	bl	800a114 <_localeconv_r>
 8008c46:	f8d0 a000 	ldr.w	sl, [r0]
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	f7f7 fad8 	bl	8000200 <strlen>
 8008c50:	2300      	movs	r3, #0
 8008c52:	930a      	str	r3, [sp, #40]	; 0x28
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	f8d8 3000 	ldr.w	r3, [r8]
 8008c5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c60:	3307      	adds	r3, #7
 8008c62:	f023 0307 	bic.w	r3, r3, #7
 8008c66:	f103 0208 	add.w	r2, r3, #8
 8008c6a:	f8c8 2000 	str.w	r2, [r8]
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c84:	ee08 0a10 	vmov	s16, r0
 8008c88:	4b9f      	ldr	r3, [pc, #636]	; (8008f08 <_printf_float+0x2dc>)
 8008c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c92:	f7f7 ff63 	bl	8000b5c <__aeabi_dcmpun>
 8008c96:	bb88      	cbnz	r0, 8008cfc <_printf_float+0xd0>
 8008c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c9c:	4b9a      	ldr	r3, [pc, #616]	; (8008f08 <_printf_float+0x2dc>)
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca2:	f7f7 ff3d 	bl	8000b20 <__aeabi_dcmple>
 8008ca6:	bb48      	cbnz	r0, 8008cfc <_printf_float+0xd0>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2300      	movs	r3, #0
 8008cac:	4640      	mov	r0, r8
 8008cae:	4649      	mov	r1, r9
 8008cb0:	f7f7 ff2c 	bl	8000b0c <__aeabi_dcmplt>
 8008cb4:	b110      	cbz	r0, 8008cbc <_printf_float+0x90>
 8008cb6:	232d      	movs	r3, #45	; 0x2d
 8008cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cbc:	4b93      	ldr	r3, [pc, #588]	; (8008f0c <_printf_float+0x2e0>)
 8008cbe:	4894      	ldr	r0, [pc, #592]	; (8008f10 <_printf_float+0x2e4>)
 8008cc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008cc4:	bf94      	ite	ls
 8008cc6:	4698      	movls	r8, r3
 8008cc8:	4680      	movhi	r8, r0
 8008cca:	2303      	movs	r3, #3
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	f023 0204 	bic.w	r2, r3, #4
 8008cd4:	6022      	str	r2, [r4, #0]
 8008cd6:	f04f 0900 	mov.w	r9, #0
 8008cda:	9700      	str	r7, [sp, #0]
 8008cdc:	4633      	mov	r3, r6
 8008cde:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 f9d8 	bl	8009098 <_printf_common>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f040 8090 	bne.w	8008e0e <_printf_float+0x1e2>
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf2:	b00d      	add	sp, #52	; 0x34
 8008cf4:	ecbd 8b02 	vpop	{d8}
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	464b      	mov	r3, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	4649      	mov	r1, r9
 8008d04:	f7f7 ff2a 	bl	8000b5c <__aeabi_dcmpun>
 8008d08:	b140      	cbz	r0, 8008d1c <_printf_float+0xf0>
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bfbc      	itt	lt
 8008d10:	232d      	movlt	r3, #45	; 0x2d
 8008d12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d16:	487f      	ldr	r0, [pc, #508]	; (8008f14 <_printf_float+0x2e8>)
 8008d18:	4b7f      	ldr	r3, [pc, #508]	; (8008f18 <_printf_float+0x2ec>)
 8008d1a:	e7d1      	b.n	8008cc0 <_printf_float+0x94>
 8008d1c:	6863      	ldr	r3, [r4, #4]
 8008d1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d22:	9206      	str	r2, [sp, #24]
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	d13f      	bne.n	8008da8 <_printf_float+0x17c>
 8008d28:	2306      	movs	r3, #6
 8008d2a:	6063      	str	r3, [r4, #4]
 8008d2c:	9b05      	ldr	r3, [sp, #20]
 8008d2e:	6861      	ldr	r1, [r4, #4]
 8008d30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d34:	2300      	movs	r3, #0
 8008d36:	9303      	str	r3, [sp, #12]
 8008d38:	ab0a      	add	r3, sp, #40	; 0x28
 8008d3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d3e:	ab09      	add	r3, sp, #36	; 0x24
 8008d40:	ec49 8b10 	vmov	d0, r8, r9
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	6022      	str	r2, [r4, #0]
 8008d48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f7ff fecd 	bl	8008aec <__cvt>
 8008d52:	9b06      	ldr	r3, [sp, #24]
 8008d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d56:	2b47      	cmp	r3, #71	; 0x47
 8008d58:	4680      	mov	r8, r0
 8008d5a:	d108      	bne.n	8008d6e <_printf_float+0x142>
 8008d5c:	1cc8      	adds	r0, r1, #3
 8008d5e:	db02      	blt.n	8008d66 <_printf_float+0x13a>
 8008d60:	6863      	ldr	r3, [r4, #4]
 8008d62:	4299      	cmp	r1, r3
 8008d64:	dd41      	ble.n	8008dea <_printf_float+0x1be>
 8008d66:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d6a:	fa5f fb8b 	uxtb.w	fp, fp
 8008d6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d72:	d820      	bhi.n	8008db6 <_printf_float+0x18a>
 8008d74:	3901      	subs	r1, #1
 8008d76:	465a      	mov	r2, fp
 8008d78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d7c:	9109      	str	r1, [sp, #36]	; 0x24
 8008d7e:	f7ff ff17 	bl	8008bb0 <__exponent>
 8008d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d84:	1813      	adds	r3, r2, r0
 8008d86:	2a01      	cmp	r2, #1
 8008d88:	4681      	mov	r9, r0
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	dc02      	bgt.n	8008d94 <_printf_float+0x168>
 8008d8e:	6822      	ldr	r2, [r4, #0]
 8008d90:	07d2      	lsls	r2, r2, #31
 8008d92:	d501      	bpl.n	8008d98 <_printf_float+0x16c>
 8008d94:	3301      	adds	r3, #1
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d09c      	beq.n	8008cda <_printf_float+0xae>
 8008da0:	232d      	movs	r3, #45	; 0x2d
 8008da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008da6:	e798      	b.n	8008cda <_printf_float+0xae>
 8008da8:	9a06      	ldr	r2, [sp, #24]
 8008daa:	2a47      	cmp	r2, #71	; 0x47
 8008dac:	d1be      	bne.n	8008d2c <_printf_float+0x100>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1bc      	bne.n	8008d2c <_printf_float+0x100>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e7b9      	b.n	8008d2a <_printf_float+0xfe>
 8008db6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008dba:	d118      	bne.n	8008dee <_printf_float+0x1c2>
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	6863      	ldr	r3, [r4, #4]
 8008dc0:	dd0b      	ble.n	8008dda <_printf_float+0x1ae>
 8008dc2:	6121      	str	r1, [r4, #16]
 8008dc4:	b913      	cbnz	r3, 8008dcc <_printf_float+0x1a0>
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	07d0      	lsls	r0, r2, #31
 8008dca:	d502      	bpl.n	8008dd2 <_printf_float+0x1a6>
 8008dcc:	3301      	adds	r3, #1
 8008dce:	440b      	add	r3, r1
 8008dd0:	6123      	str	r3, [r4, #16]
 8008dd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008dd4:	f04f 0900 	mov.w	r9, #0
 8008dd8:	e7de      	b.n	8008d98 <_printf_float+0x16c>
 8008dda:	b913      	cbnz	r3, 8008de2 <_printf_float+0x1b6>
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	07d2      	lsls	r2, r2, #31
 8008de0:	d501      	bpl.n	8008de6 <_printf_float+0x1ba>
 8008de2:	3302      	adds	r3, #2
 8008de4:	e7f4      	b.n	8008dd0 <_printf_float+0x1a4>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e7f2      	b.n	8008dd0 <_printf_float+0x1a4>
 8008dea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df0:	4299      	cmp	r1, r3
 8008df2:	db05      	blt.n	8008e00 <_printf_float+0x1d4>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	6121      	str	r1, [r4, #16]
 8008df8:	07d8      	lsls	r0, r3, #31
 8008dfa:	d5ea      	bpl.n	8008dd2 <_printf_float+0x1a6>
 8008dfc:	1c4b      	adds	r3, r1, #1
 8008dfe:	e7e7      	b.n	8008dd0 <_printf_float+0x1a4>
 8008e00:	2900      	cmp	r1, #0
 8008e02:	bfd4      	ite	le
 8008e04:	f1c1 0202 	rsble	r2, r1, #2
 8008e08:	2201      	movgt	r2, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	e7e0      	b.n	8008dd0 <_printf_float+0x1a4>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	055a      	lsls	r2, r3, #21
 8008e12:	d407      	bmi.n	8008e24 <_printf_float+0x1f8>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	4642      	mov	r2, r8
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	47b8      	blx	r7
 8008e1e:	3001      	adds	r0, #1
 8008e20:	d12c      	bne.n	8008e7c <_printf_float+0x250>
 8008e22:	e764      	b.n	8008cee <_printf_float+0xc2>
 8008e24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e28:	f240 80e0 	bls.w	8008fec <_printf_float+0x3c0>
 8008e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e30:	2200      	movs	r2, #0
 8008e32:	2300      	movs	r3, #0
 8008e34:	f7f7 fe60 	bl	8000af8 <__aeabi_dcmpeq>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d034      	beq.n	8008ea6 <_printf_float+0x27a>
 8008e3c:	4a37      	ldr	r2, [pc, #220]	; (8008f1c <_printf_float+0x2f0>)
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4631      	mov	r1, r6
 8008e42:	4628      	mov	r0, r5
 8008e44:	47b8      	blx	r7
 8008e46:	3001      	adds	r0, #1
 8008e48:	f43f af51 	beq.w	8008cee <_printf_float+0xc2>
 8008e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e50:	429a      	cmp	r2, r3
 8008e52:	db02      	blt.n	8008e5a <_printf_float+0x22e>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	07d8      	lsls	r0, r3, #31
 8008e58:	d510      	bpl.n	8008e7c <_printf_float+0x250>
 8008e5a:	ee18 3a10 	vmov	r3, s16
 8008e5e:	4652      	mov	r2, sl
 8008e60:	4631      	mov	r1, r6
 8008e62:	4628      	mov	r0, r5
 8008e64:	47b8      	blx	r7
 8008e66:	3001      	adds	r0, #1
 8008e68:	f43f af41 	beq.w	8008cee <_printf_float+0xc2>
 8008e6c:	f04f 0800 	mov.w	r8, #0
 8008e70:	f104 091a 	add.w	r9, r4, #26
 8008e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e76:	3b01      	subs	r3, #1
 8008e78:	4543      	cmp	r3, r8
 8008e7a:	dc09      	bgt.n	8008e90 <_printf_float+0x264>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	079b      	lsls	r3, r3, #30
 8008e80:	f100 8105 	bmi.w	800908e <_printf_float+0x462>
 8008e84:	68e0      	ldr	r0, [r4, #12]
 8008e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e88:	4298      	cmp	r0, r3
 8008e8a:	bfb8      	it	lt
 8008e8c:	4618      	movlt	r0, r3
 8008e8e:	e730      	b.n	8008cf2 <_printf_float+0xc6>
 8008e90:	2301      	movs	r3, #1
 8008e92:	464a      	mov	r2, r9
 8008e94:	4631      	mov	r1, r6
 8008e96:	4628      	mov	r0, r5
 8008e98:	47b8      	blx	r7
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	f43f af27 	beq.w	8008cee <_printf_float+0xc2>
 8008ea0:	f108 0801 	add.w	r8, r8, #1
 8008ea4:	e7e6      	b.n	8008e74 <_printf_float+0x248>
 8008ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dc39      	bgt.n	8008f20 <_printf_float+0x2f4>
 8008eac:	4a1b      	ldr	r2, [pc, #108]	; (8008f1c <_printf_float+0x2f0>)
 8008eae:	2301      	movs	r3, #1
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	f43f af19 	beq.w	8008cee <_printf_float+0xc2>
 8008ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	d102      	bne.n	8008eca <_printf_float+0x29e>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	07d9      	lsls	r1, r3, #31
 8008ec8:	d5d8      	bpl.n	8008e7c <_printf_float+0x250>
 8008eca:	ee18 3a10 	vmov	r3, s16
 8008ece:	4652      	mov	r2, sl
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b8      	blx	r7
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f43f af09 	beq.w	8008cee <_printf_float+0xc2>
 8008edc:	f04f 0900 	mov.w	r9, #0
 8008ee0:	f104 0a1a 	add.w	sl, r4, #26
 8008ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee6:	425b      	negs	r3, r3
 8008ee8:	454b      	cmp	r3, r9
 8008eea:	dc01      	bgt.n	8008ef0 <_printf_float+0x2c4>
 8008eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eee:	e792      	b.n	8008e16 <_printf_float+0x1ea>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	f43f aef7 	beq.w	8008cee <_printf_float+0xc2>
 8008f00:	f109 0901 	add.w	r9, r9, #1
 8008f04:	e7ee      	b.n	8008ee4 <_printf_float+0x2b8>
 8008f06:	bf00      	nop
 8008f08:	7fefffff 	.word	0x7fefffff
 8008f0c:	08015100 	.word	0x08015100
 8008f10:	08015104 	.word	0x08015104
 8008f14:	0801510c 	.word	0x0801510c
 8008f18:	08015108 	.word	0x08015108
 8008f1c:	08015110 	.word	0x08015110
 8008f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f24:	429a      	cmp	r2, r3
 8008f26:	bfa8      	it	ge
 8008f28:	461a      	movge	r2, r3
 8008f2a:	2a00      	cmp	r2, #0
 8008f2c:	4691      	mov	r9, r2
 8008f2e:	dc37      	bgt.n	8008fa0 <_printf_float+0x374>
 8008f30:	f04f 0b00 	mov.w	fp, #0
 8008f34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f38:	f104 021a 	add.w	r2, r4, #26
 8008f3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f3e:	9305      	str	r3, [sp, #20]
 8008f40:	eba3 0309 	sub.w	r3, r3, r9
 8008f44:	455b      	cmp	r3, fp
 8008f46:	dc33      	bgt.n	8008fb0 <_printf_float+0x384>
 8008f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	db3b      	blt.n	8008fc8 <_printf_float+0x39c>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	07da      	lsls	r2, r3, #31
 8008f54:	d438      	bmi.n	8008fc8 <_printf_float+0x39c>
 8008f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f58:	9a05      	ldr	r2, [sp, #20]
 8008f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f5c:	1a9a      	subs	r2, r3, r2
 8008f5e:	eba3 0901 	sub.w	r9, r3, r1
 8008f62:	4591      	cmp	r9, r2
 8008f64:	bfa8      	it	ge
 8008f66:	4691      	movge	r9, r2
 8008f68:	f1b9 0f00 	cmp.w	r9, #0
 8008f6c:	dc35      	bgt.n	8008fda <_printf_float+0x3ae>
 8008f6e:	f04f 0800 	mov.w	r8, #0
 8008f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f76:	f104 0a1a 	add.w	sl, r4, #26
 8008f7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f7e:	1a9b      	subs	r3, r3, r2
 8008f80:	eba3 0309 	sub.w	r3, r3, r9
 8008f84:	4543      	cmp	r3, r8
 8008f86:	f77f af79 	ble.w	8008e7c <_printf_float+0x250>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4652      	mov	r2, sl
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	f43f aeaa 	beq.w	8008cee <_printf_float+0xc2>
 8008f9a:	f108 0801 	add.w	r8, r8, #1
 8008f9e:	e7ec      	b.n	8008f7a <_printf_float+0x34e>
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4642      	mov	r2, r8
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	d1c0      	bne.n	8008f30 <_printf_float+0x304>
 8008fae:	e69e      	b.n	8008cee <_printf_float+0xc2>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	9205      	str	r2, [sp, #20]
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f43f ae97 	beq.w	8008cee <_printf_float+0xc2>
 8008fc0:	9a05      	ldr	r2, [sp, #20]
 8008fc2:	f10b 0b01 	add.w	fp, fp, #1
 8008fc6:	e7b9      	b.n	8008f3c <_printf_float+0x310>
 8008fc8:	ee18 3a10 	vmov	r3, s16
 8008fcc:	4652      	mov	r2, sl
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d1be      	bne.n	8008f56 <_printf_float+0x32a>
 8008fd8:	e689      	b.n	8008cee <_printf_float+0xc2>
 8008fda:	9a05      	ldr	r2, [sp, #20]
 8008fdc:	464b      	mov	r3, r9
 8008fde:	4442      	add	r2, r8
 8008fe0:	4631      	mov	r1, r6
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	47b8      	blx	r7
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d1c1      	bne.n	8008f6e <_printf_float+0x342>
 8008fea:	e680      	b.n	8008cee <_printf_float+0xc2>
 8008fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fee:	2a01      	cmp	r2, #1
 8008ff0:	dc01      	bgt.n	8008ff6 <_printf_float+0x3ca>
 8008ff2:	07db      	lsls	r3, r3, #31
 8008ff4:	d538      	bpl.n	8009068 <_printf_float+0x43c>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	47b8      	blx	r7
 8009000:	3001      	adds	r0, #1
 8009002:	f43f ae74 	beq.w	8008cee <_printf_float+0xc2>
 8009006:	ee18 3a10 	vmov	r3, s16
 800900a:	4652      	mov	r2, sl
 800900c:	4631      	mov	r1, r6
 800900e:	4628      	mov	r0, r5
 8009010:	47b8      	blx	r7
 8009012:	3001      	adds	r0, #1
 8009014:	f43f ae6b 	beq.w	8008cee <_printf_float+0xc2>
 8009018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800901c:	2200      	movs	r2, #0
 800901e:	2300      	movs	r3, #0
 8009020:	f7f7 fd6a 	bl	8000af8 <__aeabi_dcmpeq>
 8009024:	b9d8      	cbnz	r0, 800905e <_printf_float+0x432>
 8009026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009028:	f108 0201 	add.w	r2, r8, #1
 800902c:	3b01      	subs	r3, #1
 800902e:	4631      	mov	r1, r6
 8009030:	4628      	mov	r0, r5
 8009032:	47b8      	blx	r7
 8009034:	3001      	adds	r0, #1
 8009036:	d10e      	bne.n	8009056 <_printf_float+0x42a>
 8009038:	e659      	b.n	8008cee <_printf_float+0xc2>
 800903a:	2301      	movs	r3, #1
 800903c:	4652      	mov	r2, sl
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	47b8      	blx	r7
 8009044:	3001      	adds	r0, #1
 8009046:	f43f ae52 	beq.w	8008cee <_printf_float+0xc2>
 800904a:	f108 0801 	add.w	r8, r8, #1
 800904e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009050:	3b01      	subs	r3, #1
 8009052:	4543      	cmp	r3, r8
 8009054:	dcf1      	bgt.n	800903a <_printf_float+0x40e>
 8009056:	464b      	mov	r3, r9
 8009058:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800905c:	e6dc      	b.n	8008e18 <_printf_float+0x1ec>
 800905e:	f04f 0800 	mov.w	r8, #0
 8009062:	f104 0a1a 	add.w	sl, r4, #26
 8009066:	e7f2      	b.n	800904e <_printf_float+0x422>
 8009068:	2301      	movs	r3, #1
 800906a:	4642      	mov	r2, r8
 800906c:	e7df      	b.n	800902e <_printf_float+0x402>
 800906e:	2301      	movs	r3, #1
 8009070:	464a      	mov	r2, r9
 8009072:	4631      	mov	r1, r6
 8009074:	4628      	mov	r0, r5
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	f43f ae38 	beq.w	8008cee <_printf_float+0xc2>
 800907e:	f108 0801 	add.w	r8, r8, #1
 8009082:	68e3      	ldr	r3, [r4, #12]
 8009084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009086:	1a5b      	subs	r3, r3, r1
 8009088:	4543      	cmp	r3, r8
 800908a:	dcf0      	bgt.n	800906e <_printf_float+0x442>
 800908c:	e6fa      	b.n	8008e84 <_printf_float+0x258>
 800908e:	f04f 0800 	mov.w	r8, #0
 8009092:	f104 0919 	add.w	r9, r4, #25
 8009096:	e7f4      	b.n	8009082 <_printf_float+0x456>

08009098 <_printf_common>:
 8009098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	4616      	mov	r6, r2
 800909e:	4699      	mov	r9, r3
 80090a0:	688a      	ldr	r2, [r1, #8]
 80090a2:	690b      	ldr	r3, [r1, #16]
 80090a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090a8:	4293      	cmp	r3, r2
 80090aa:	bfb8      	it	lt
 80090ac:	4613      	movlt	r3, r2
 80090ae:	6033      	str	r3, [r6, #0]
 80090b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090b4:	4607      	mov	r7, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	b10a      	cbz	r2, 80090be <_printf_common+0x26>
 80090ba:	3301      	adds	r3, #1
 80090bc:	6033      	str	r3, [r6, #0]
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	0699      	lsls	r1, r3, #26
 80090c2:	bf42      	ittt	mi
 80090c4:	6833      	ldrmi	r3, [r6, #0]
 80090c6:	3302      	addmi	r3, #2
 80090c8:	6033      	strmi	r3, [r6, #0]
 80090ca:	6825      	ldr	r5, [r4, #0]
 80090cc:	f015 0506 	ands.w	r5, r5, #6
 80090d0:	d106      	bne.n	80090e0 <_printf_common+0x48>
 80090d2:	f104 0a19 	add.w	sl, r4, #25
 80090d6:	68e3      	ldr	r3, [r4, #12]
 80090d8:	6832      	ldr	r2, [r6, #0]
 80090da:	1a9b      	subs	r3, r3, r2
 80090dc:	42ab      	cmp	r3, r5
 80090de:	dc26      	bgt.n	800912e <_printf_common+0x96>
 80090e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090e4:	1e13      	subs	r3, r2, #0
 80090e6:	6822      	ldr	r2, [r4, #0]
 80090e8:	bf18      	it	ne
 80090ea:	2301      	movne	r3, #1
 80090ec:	0692      	lsls	r2, r2, #26
 80090ee:	d42b      	bmi.n	8009148 <_printf_common+0xb0>
 80090f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090f4:	4649      	mov	r1, r9
 80090f6:	4638      	mov	r0, r7
 80090f8:	47c0      	blx	r8
 80090fa:	3001      	adds	r0, #1
 80090fc:	d01e      	beq.n	800913c <_printf_common+0xa4>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	68e5      	ldr	r5, [r4, #12]
 8009102:	6832      	ldr	r2, [r6, #0]
 8009104:	f003 0306 	and.w	r3, r3, #6
 8009108:	2b04      	cmp	r3, #4
 800910a:	bf08      	it	eq
 800910c:	1aad      	subeq	r5, r5, r2
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	bf0c      	ite	eq
 8009114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009118:	2500      	movne	r5, #0
 800911a:	4293      	cmp	r3, r2
 800911c:	bfc4      	itt	gt
 800911e:	1a9b      	subgt	r3, r3, r2
 8009120:	18ed      	addgt	r5, r5, r3
 8009122:	2600      	movs	r6, #0
 8009124:	341a      	adds	r4, #26
 8009126:	42b5      	cmp	r5, r6
 8009128:	d11a      	bne.n	8009160 <_printf_common+0xc8>
 800912a:	2000      	movs	r0, #0
 800912c:	e008      	b.n	8009140 <_printf_common+0xa8>
 800912e:	2301      	movs	r3, #1
 8009130:	4652      	mov	r2, sl
 8009132:	4649      	mov	r1, r9
 8009134:	4638      	mov	r0, r7
 8009136:	47c0      	blx	r8
 8009138:	3001      	adds	r0, #1
 800913a:	d103      	bne.n	8009144 <_printf_common+0xac>
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009144:	3501      	adds	r5, #1
 8009146:	e7c6      	b.n	80090d6 <_printf_common+0x3e>
 8009148:	18e1      	adds	r1, r4, r3
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	2030      	movs	r0, #48	; 0x30
 800914e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009152:	4422      	add	r2, r4
 8009154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800915c:	3302      	adds	r3, #2
 800915e:	e7c7      	b.n	80090f0 <_printf_common+0x58>
 8009160:	2301      	movs	r3, #1
 8009162:	4622      	mov	r2, r4
 8009164:	4649      	mov	r1, r9
 8009166:	4638      	mov	r0, r7
 8009168:	47c0      	blx	r8
 800916a:	3001      	adds	r0, #1
 800916c:	d0e6      	beq.n	800913c <_printf_common+0xa4>
 800916e:	3601      	adds	r6, #1
 8009170:	e7d9      	b.n	8009126 <_printf_common+0x8e>
	...

08009174 <_printf_i>:
 8009174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	7e0f      	ldrb	r7, [r1, #24]
 800917a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800917c:	2f78      	cmp	r7, #120	; 0x78
 800917e:	4691      	mov	r9, r2
 8009180:	4680      	mov	r8, r0
 8009182:	460c      	mov	r4, r1
 8009184:	469a      	mov	sl, r3
 8009186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800918a:	d807      	bhi.n	800919c <_printf_i+0x28>
 800918c:	2f62      	cmp	r7, #98	; 0x62
 800918e:	d80a      	bhi.n	80091a6 <_printf_i+0x32>
 8009190:	2f00      	cmp	r7, #0
 8009192:	f000 80d8 	beq.w	8009346 <_printf_i+0x1d2>
 8009196:	2f58      	cmp	r7, #88	; 0x58
 8009198:	f000 80a3 	beq.w	80092e2 <_printf_i+0x16e>
 800919c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091a4:	e03a      	b.n	800921c <_printf_i+0xa8>
 80091a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091aa:	2b15      	cmp	r3, #21
 80091ac:	d8f6      	bhi.n	800919c <_printf_i+0x28>
 80091ae:	a101      	add	r1, pc, #4	; (adr r1, 80091b4 <_printf_i+0x40>)
 80091b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091b4:	0800920d 	.word	0x0800920d
 80091b8:	08009221 	.word	0x08009221
 80091bc:	0800919d 	.word	0x0800919d
 80091c0:	0800919d 	.word	0x0800919d
 80091c4:	0800919d 	.word	0x0800919d
 80091c8:	0800919d 	.word	0x0800919d
 80091cc:	08009221 	.word	0x08009221
 80091d0:	0800919d 	.word	0x0800919d
 80091d4:	0800919d 	.word	0x0800919d
 80091d8:	0800919d 	.word	0x0800919d
 80091dc:	0800919d 	.word	0x0800919d
 80091e0:	0800932d 	.word	0x0800932d
 80091e4:	08009251 	.word	0x08009251
 80091e8:	0800930f 	.word	0x0800930f
 80091ec:	0800919d 	.word	0x0800919d
 80091f0:	0800919d 	.word	0x0800919d
 80091f4:	0800934f 	.word	0x0800934f
 80091f8:	0800919d 	.word	0x0800919d
 80091fc:	08009251 	.word	0x08009251
 8009200:	0800919d 	.word	0x0800919d
 8009204:	0800919d 	.word	0x0800919d
 8009208:	08009317 	.word	0x08009317
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	1d1a      	adds	r2, r3, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	602a      	str	r2, [r5, #0]
 8009214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800921c:	2301      	movs	r3, #1
 800921e:	e0a3      	b.n	8009368 <_printf_i+0x1f4>
 8009220:	6820      	ldr	r0, [r4, #0]
 8009222:	6829      	ldr	r1, [r5, #0]
 8009224:	0606      	lsls	r6, r0, #24
 8009226:	f101 0304 	add.w	r3, r1, #4
 800922a:	d50a      	bpl.n	8009242 <_printf_i+0xce>
 800922c:	680e      	ldr	r6, [r1, #0]
 800922e:	602b      	str	r3, [r5, #0]
 8009230:	2e00      	cmp	r6, #0
 8009232:	da03      	bge.n	800923c <_printf_i+0xc8>
 8009234:	232d      	movs	r3, #45	; 0x2d
 8009236:	4276      	negs	r6, r6
 8009238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800923c:	485e      	ldr	r0, [pc, #376]	; (80093b8 <_printf_i+0x244>)
 800923e:	230a      	movs	r3, #10
 8009240:	e019      	b.n	8009276 <_printf_i+0x102>
 8009242:	680e      	ldr	r6, [r1, #0]
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	f010 0f40 	tst.w	r0, #64	; 0x40
 800924a:	bf18      	it	ne
 800924c:	b236      	sxthne	r6, r6
 800924e:	e7ef      	b.n	8009230 <_printf_i+0xbc>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	6820      	ldr	r0, [r4, #0]
 8009254:	1d19      	adds	r1, r3, #4
 8009256:	6029      	str	r1, [r5, #0]
 8009258:	0601      	lsls	r1, r0, #24
 800925a:	d501      	bpl.n	8009260 <_printf_i+0xec>
 800925c:	681e      	ldr	r6, [r3, #0]
 800925e:	e002      	b.n	8009266 <_printf_i+0xf2>
 8009260:	0646      	lsls	r6, r0, #25
 8009262:	d5fb      	bpl.n	800925c <_printf_i+0xe8>
 8009264:	881e      	ldrh	r6, [r3, #0]
 8009266:	4854      	ldr	r0, [pc, #336]	; (80093b8 <_printf_i+0x244>)
 8009268:	2f6f      	cmp	r7, #111	; 0x6f
 800926a:	bf0c      	ite	eq
 800926c:	2308      	moveq	r3, #8
 800926e:	230a      	movne	r3, #10
 8009270:	2100      	movs	r1, #0
 8009272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009276:	6865      	ldr	r5, [r4, #4]
 8009278:	60a5      	str	r5, [r4, #8]
 800927a:	2d00      	cmp	r5, #0
 800927c:	bfa2      	ittt	ge
 800927e:	6821      	ldrge	r1, [r4, #0]
 8009280:	f021 0104 	bicge.w	r1, r1, #4
 8009284:	6021      	strge	r1, [r4, #0]
 8009286:	b90e      	cbnz	r6, 800928c <_printf_i+0x118>
 8009288:	2d00      	cmp	r5, #0
 800928a:	d04d      	beq.n	8009328 <_printf_i+0x1b4>
 800928c:	4615      	mov	r5, r2
 800928e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009292:	fb03 6711 	mls	r7, r3, r1, r6
 8009296:	5dc7      	ldrb	r7, [r0, r7]
 8009298:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800929c:	4637      	mov	r7, r6
 800929e:	42bb      	cmp	r3, r7
 80092a0:	460e      	mov	r6, r1
 80092a2:	d9f4      	bls.n	800928e <_printf_i+0x11a>
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	d10b      	bne.n	80092c0 <_printf_i+0x14c>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	07de      	lsls	r6, r3, #31
 80092ac:	d508      	bpl.n	80092c0 <_printf_i+0x14c>
 80092ae:	6923      	ldr	r3, [r4, #16]
 80092b0:	6861      	ldr	r1, [r4, #4]
 80092b2:	4299      	cmp	r1, r3
 80092b4:	bfde      	ittt	le
 80092b6:	2330      	movle	r3, #48	; 0x30
 80092b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092c0:	1b52      	subs	r2, r2, r5
 80092c2:	6122      	str	r2, [r4, #16]
 80092c4:	f8cd a000 	str.w	sl, [sp]
 80092c8:	464b      	mov	r3, r9
 80092ca:	aa03      	add	r2, sp, #12
 80092cc:	4621      	mov	r1, r4
 80092ce:	4640      	mov	r0, r8
 80092d0:	f7ff fee2 	bl	8009098 <_printf_common>
 80092d4:	3001      	adds	r0, #1
 80092d6:	d14c      	bne.n	8009372 <_printf_i+0x1fe>
 80092d8:	f04f 30ff 	mov.w	r0, #4294967295
 80092dc:	b004      	add	sp, #16
 80092de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e2:	4835      	ldr	r0, [pc, #212]	; (80093b8 <_printf_i+0x244>)
 80092e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092e8:	6829      	ldr	r1, [r5, #0]
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80092f0:	6029      	str	r1, [r5, #0]
 80092f2:	061d      	lsls	r5, r3, #24
 80092f4:	d514      	bpl.n	8009320 <_printf_i+0x1ac>
 80092f6:	07df      	lsls	r7, r3, #31
 80092f8:	bf44      	itt	mi
 80092fa:	f043 0320 	orrmi.w	r3, r3, #32
 80092fe:	6023      	strmi	r3, [r4, #0]
 8009300:	b91e      	cbnz	r6, 800930a <_printf_i+0x196>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	f023 0320 	bic.w	r3, r3, #32
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	2310      	movs	r3, #16
 800930c:	e7b0      	b.n	8009270 <_printf_i+0xfc>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	f043 0320 	orr.w	r3, r3, #32
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	2378      	movs	r3, #120	; 0x78
 8009318:	4828      	ldr	r0, [pc, #160]	; (80093bc <_printf_i+0x248>)
 800931a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800931e:	e7e3      	b.n	80092e8 <_printf_i+0x174>
 8009320:	0659      	lsls	r1, r3, #25
 8009322:	bf48      	it	mi
 8009324:	b2b6      	uxthmi	r6, r6
 8009326:	e7e6      	b.n	80092f6 <_printf_i+0x182>
 8009328:	4615      	mov	r5, r2
 800932a:	e7bb      	b.n	80092a4 <_printf_i+0x130>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	6826      	ldr	r6, [r4, #0]
 8009330:	6961      	ldr	r1, [r4, #20]
 8009332:	1d18      	adds	r0, r3, #4
 8009334:	6028      	str	r0, [r5, #0]
 8009336:	0635      	lsls	r5, r6, #24
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	d501      	bpl.n	8009340 <_printf_i+0x1cc>
 800933c:	6019      	str	r1, [r3, #0]
 800933e:	e002      	b.n	8009346 <_printf_i+0x1d2>
 8009340:	0670      	lsls	r0, r6, #25
 8009342:	d5fb      	bpl.n	800933c <_printf_i+0x1c8>
 8009344:	8019      	strh	r1, [r3, #0]
 8009346:	2300      	movs	r3, #0
 8009348:	6123      	str	r3, [r4, #16]
 800934a:	4615      	mov	r5, r2
 800934c:	e7ba      	b.n	80092c4 <_printf_i+0x150>
 800934e:	682b      	ldr	r3, [r5, #0]
 8009350:	1d1a      	adds	r2, r3, #4
 8009352:	602a      	str	r2, [r5, #0]
 8009354:	681d      	ldr	r5, [r3, #0]
 8009356:	6862      	ldr	r2, [r4, #4]
 8009358:	2100      	movs	r1, #0
 800935a:	4628      	mov	r0, r5
 800935c:	f7f6 ff58 	bl	8000210 <memchr>
 8009360:	b108      	cbz	r0, 8009366 <_printf_i+0x1f2>
 8009362:	1b40      	subs	r0, r0, r5
 8009364:	6060      	str	r0, [r4, #4]
 8009366:	6863      	ldr	r3, [r4, #4]
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	2300      	movs	r3, #0
 800936c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009370:	e7a8      	b.n	80092c4 <_printf_i+0x150>
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	462a      	mov	r2, r5
 8009376:	4649      	mov	r1, r9
 8009378:	4640      	mov	r0, r8
 800937a:	47d0      	blx	sl
 800937c:	3001      	adds	r0, #1
 800937e:	d0ab      	beq.n	80092d8 <_printf_i+0x164>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	079b      	lsls	r3, r3, #30
 8009384:	d413      	bmi.n	80093ae <_printf_i+0x23a>
 8009386:	68e0      	ldr	r0, [r4, #12]
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	4298      	cmp	r0, r3
 800938c:	bfb8      	it	lt
 800938e:	4618      	movlt	r0, r3
 8009390:	e7a4      	b.n	80092dc <_printf_i+0x168>
 8009392:	2301      	movs	r3, #1
 8009394:	4632      	mov	r2, r6
 8009396:	4649      	mov	r1, r9
 8009398:	4640      	mov	r0, r8
 800939a:	47d0      	blx	sl
 800939c:	3001      	adds	r0, #1
 800939e:	d09b      	beq.n	80092d8 <_printf_i+0x164>
 80093a0:	3501      	adds	r5, #1
 80093a2:	68e3      	ldr	r3, [r4, #12]
 80093a4:	9903      	ldr	r1, [sp, #12]
 80093a6:	1a5b      	subs	r3, r3, r1
 80093a8:	42ab      	cmp	r3, r5
 80093aa:	dcf2      	bgt.n	8009392 <_printf_i+0x21e>
 80093ac:	e7eb      	b.n	8009386 <_printf_i+0x212>
 80093ae:	2500      	movs	r5, #0
 80093b0:	f104 0619 	add.w	r6, r4, #25
 80093b4:	e7f5      	b.n	80093a2 <_printf_i+0x22e>
 80093b6:	bf00      	nop
 80093b8:	08015112 	.word	0x08015112
 80093bc:	08015123 	.word	0x08015123

080093c0 <_sbrk_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d06      	ldr	r5, [pc, #24]	; (80093dc <_sbrk_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7f9 f92a 	bl	8002624 <_sbrk>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_sbrk_r+0x1a>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_sbrk_r+0x1a>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	2002477c 	.word	0x2002477c

080093e0 <siprintf>:
 80093e0:	b40e      	push	{r1, r2, r3}
 80093e2:	b500      	push	{lr}
 80093e4:	b09c      	sub	sp, #112	; 0x70
 80093e6:	ab1d      	add	r3, sp, #116	; 0x74
 80093e8:	9002      	str	r0, [sp, #8]
 80093ea:	9006      	str	r0, [sp, #24]
 80093ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093f0:	4809      	ldr	r0, [pc, #36]	; (8009418 <siprintf+0x38>)
 80093f2:	9107      	str	r1, [sp, #28]
 80093f4:	9104      	str	r1, [sp, #16]
 80093f6:	4909      	ldr	r1, [pc, #36]	; (800941c <siprintf+0x3c>)
 80093f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fc:	9105      	str	r1, [sp, #20]
 80093fe:	6800      	ldr	r0, [r0, #0]
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	a902      	add	r1, sp, #8
 8009404:	f001 faba 	bl	800a97c <_svfiprintf_r>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	b01c      	add	sp, #112	; 0x70
 8009410:	f85d eb04 	ldr.w	lr, [sp], #4
 8009414:	b003      	add	sp, #12
 8009416:	4770      	bx	lr
 8009418:	200006a0 	.word	0x200006a0
 800941c:	ffff0208 	.word	0xffff0208

08009420 <quorem>:
 8009420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	6903      	ldr	r3, [r0, #16]
 8009426:	690c      	ldr	r4, [r1, #16]
 8009428:	42a3      	cmp	r3, r4
 800942a:	4607      	mov	r7, r0
 800942c:	f2c0 8081 	blt.w	8009532 <quorem+0x112>
 8009430:	3c01      	subs	r4, #1
 8009432:	f101 0814 	add.w	r8, r1, #20
 8009436:	f100 0514 	add.w	r5, r0, #20
 800943a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009444:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009448:	3301      	adds	r3, #1
 800944a:	429a      	cmp	r2, r3
 800944c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009450:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009454:	fbb2 f6f3 	udiv	r6, r2, r3
 8009458:	d331      	bcc.n	80094be <quorem+0x9e>
 800945a:	f04f 0e00 	mov.w	lr, #0
 800945e:	4640      	mov	r0, r8
 8009460:	46ac      	mov	ip, r5
 8009462:	46f2      	mov	sl, lr
 8009464:	f850 2b04 	ldr.w	r2, [r0], #4
 8009468:	b293      	uxth	r3, r2
 800946a:	fb06 e303 	mla	r3, r6, r3, lr
 800946e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009472:	b29b      	uxth	r3, r3
 8009474:	ebaa 0303 	sub.w	r3, sl, r3
 8009478:	f8dc a000 	ldr.w	sl, [ip]
 800947c:	0c12      	lsrs	r2, r2, #16
 800947e:	fa13 f38a 	uxtah	r3, r3, sl
 8009482:	fb06 e202 	mla	r2, r6, r2, lr
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	9b00      	ldr	r3, [sp, #0]
 800948a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800948e:	b292      	uxth	r2, r2
 8009490:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009498:	f8bd 3000 	ldrh.w	r3, [sp]
 800949c:	4581      	cmp	r9, r0
 800949e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094a2:	f84c 3b04 	str.w	r3, [ip], #4
 80094a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094aa:	d2db      	bcs.n	8009464 <quorem+0x44>
 80094ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80094b0:	b92b      	cbnz	r3, 80094be <quorem+0x9e>
 80094b2:	9b01      	ldr	r3, [sp, #4]
 80094b4:	3b04      	subs	r3, #4
 80094b6:	429d      	cmp	r5, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	d32e      	bcc.n	800951a <quorem+0xfa>
 80094bc:	613c      	str	r4, [r7, #16]
 80094be:	4638      	mov	r0, r7
 80094c0:	f001 f8ba 	bl	800a638 <__mcmp>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	db24      	blt.n	8009512 <quorem+0xf2>
 80094c8:	3601      	adds	r6, #1
 80094ca:	4628      	mov	r0, r5
 80094cc:	f04f 0c00 	mov.w	ip, #0
 80094d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80094d4:	f8d0 e000 	ldr.w	lr, [r0]
 80094d8:	b293      	uxth	r3, r2
 80094da:	ebac 0303 	sub.w	r3, ip, r3
 80094de:	0c12      	lsrs	r2, r2, #16
 80094e0:	fa13 f38e 	uxtah	r3, r3, lr
 80094e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094f2:	45c1      	cmp	r9, r8
 80094f4:	f840 3b04 	str.w	r3, [r0], #4
 80094f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80094fc:	d2e8      	bcs.n	80094d0 <quorem+0xb0>
 80094fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009506:	b922      	cbnz	r2, 8009512 <quorem+0xf2>
 8009508:	3b04      	subs	r3, #4
 800950a:	429d      	cmp	r5, r3
 800950c:	461a      	mov	r2, r3
 800950e:	d30a      	bcc.n	8009526 <quorem+0x106>
 8009510:	613c      	str	r4, [r7, #16]
 8009512:	4630      	mov	r0, r6
 8009514:	b003      	add	sp, #12
 8009516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951a:	6812      	ldr	r2, [r2, #0]
 800951c:	3b04      	subs	r3, #4
 800951e:	2a00      	cmp	r2, #0
 8009520:	d1cc      	bne.n	80094bc <quorem+0x9c>
 8009522:	3c01      	subs	r4, #1
 8009524:	e7c7      	b.n	80094b6 <quorem+0x96>
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	3b04      	subs	r3, #4
 800952a:	2a00      	cmp	r2, #0
 800952c:	d1f0      	bne.n	8009510 <quorem+0xf0>
 800952e:	3c01      	subs	r4, #1
 8009530:	e7eb      	b.n	800950a <quorem+0xea>
 8009532:	2000      	movs	r0, #0
 8009534:	e7ee      	b.n	8009514 <quorem+0xf4>
	...

08009538 <_dtoa_r>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	ed2d 8b04 	vpush	{d8-d9}
 8009540:	ec57 6b10 	vmov	r6, r7, d0
 8009544:	b093      	sub	sp, #76	; 0x4c
 8009546:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009548:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800954c:	9106      	str	r1, [sp, #24]
 800954e:	ee10 aa10 	vmov	sl, s0
 8009552:	4604      	mov	r4, r0
 8009554:	9209      	str	r2, [sp, #36]	; 0x24
 8009556:	930c      	str	r3, [sp, #48]	; 0x30
 8009558:	46bb      	mov	fp, r7
 800955a:	b975      	cbnz	r5, 800957a <_dtoa_r+0x42>
 800955c:	2010      	movs	r0, #16
 800955e:	f7ff f9c7 	bl	80088f0 <malloc>
 8009562:	4602      	mov	r2, r0
 8009564:	6260      	str	r0, [r4, #36]	; 0x24
 8009566:	b920      	cbnz	r0, 8009572 <_dtoa_r+0x3a>
 8009568:	4ba7      	ldr	r3, [pc, #668]	; (8009808 <_dtoa_r+0x2d0>)
 800956a:	21ea      	movs	r1, #234	; 0xea
 800956c:	48a7      	ldr	r0, [pc, #668]	; (800980c <_dtoa_r+0x2d4>)
 800956e:	f001 fb05 	bl	800ab7c <__assert_func>
 8009572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009576:	6005      	str	r5, [r0, #0]
 8009578:	60c5      	str	r5, [r0, #12]
 800957a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800957c:	6819      	ldr	r1, [r3, #0]
 800957e:	b151      	cbz	r1, 8009596 <_dtoa_r+0x5e>
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	604a      	str	r2, [r1, #4]
 8009584:	2301      	movs	r3, #1
 8009586:	4093      	lsls	r3, r2
 8009588:	608b      	str	r3, [r1, #8]
 800958a:	4620      	mov	r0, r4
 800958c:	f000 fe12 	bl	800a1b4 <_Bfree>
 8009590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	1e3b      	subs	r3, r7, #0
 8009598:	bfaa      	itet	ge
 800959a:	2300      	movge	r3, #0
 800959c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80095a0:	f8c8 3000 	strge.w	r3, [r8]
 80095a4:	4b9a      	ldr	r3, [pc, #616]	; (8009810 <_dtoa_r+0x2d8>)
 80095a6:	bfbc      	itt	lt
 80095a8:	2201      	movlt	r2, #1
 80095aa:	f8c8 2000 	strlt.w	r2, [r8]
 80095ae:	ea33 030b 	bics.w	r3, r3, fp
 80095b2:	d11b      	bne.n	80095ec <_dtoa_r+0xb4>
 80095b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095c0:	4333      	orrs	r3, r6
 80095c2:	f000 8592 	beq.w	800a0ea <_dtoa_r+0xbb2>
 80095c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c8:	b963      	cbnz	r3, 80095e4 <_dtoa_r+0xac>
 80095ca:	4b92      	ldr	r3, [pc, #584]	; (8009814 <_dtoa_r+0x2dc>)
 80095cc:	e022      	b.n	8009614 <_dtoa_r+0xdc>
 80095ce:	4b92      	ldr	r3, [pc, #584]	; (8009818 <_dtoa_r+0x2e0>)
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	3308      	adds	r3, #8
 80095d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	9801      	ldr	r0, [sp, #4]
 80095da:	b013      	add	sp, #76	; 0x4c
 80095dc:	ecbd 8b04 	vpop	{d8-d9}
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	4b8b      	ldr	r3, [pc, #556]	; (8009814 <_dtoa_r+0x2dc>)
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	3303      	adds	r3, #3
 80095ea:	e7f3      	b.n	80095d4 <_dtoa_r+0x9c>
 80095ec:	2200      	movs	r2, #0
 80095ee:	2300      	movs	r3, #0
 80095f0:	4650      	mov	r0, sl
 80095f2:	4659      	mov	r1, fp
 80095f4:	f7f7 fa80 	bl	8000af8 <__aeabi_dcmpeq>
 80095f8:	ec4b ab19 	vmov	d9, sl, fp
 80095fc:	4680      	mov	r8, r0
 80095fe:	b158      	cbz	r0, 8009618 <_dtoa_r+0xe0>
 8009600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009602:	2301      	movs	r3, #1
 8009604:	6013      	str	r3, [r2, #0]
 8009606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 856b 	beq.w	800a0e4 <_dtoa_r+0xbac>
 800960e:	4883      	ldr	r0, [pc, #524]	; (800981c <_dtoa_r+0x2e4>)
 8009610:	6018      	str	r0, [r3, #0]
 8009612:	1e43      	subs	r3, r0, #1
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	e7df      	b.n	80095d8 <_dtoa_r+0xa0>
 8009618:	ec4b ab10 	vmov	d0, sl, fp
 800961c:	aa10      	add	r2, sp, #64	; 0x40
 800961e:	a911      	add	r1, sp, #68	; 0x44
 8009620:	4620      	mov	r0, r4
 8009622:	f001 f8af 	bl	800a784 <__d2b>
 8009626:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800962a:	ee08 0a10 	vmov	s16, r0
 800962e:	2d00      	cmp	r5, #0
 8009630:	f000 8084 	beq.w	800973c <_dtoa_r+0x204>
 8009634:	ee19 3a90 	vmov	r3, s19
 8009638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800963c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009640:	4656      	mov	r6, sl
 8009642:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800964a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800964e:	4b74      	ldr	r3, [pc, #464]	; (8009820 <_dtoa_r+0x2e8>)
 8009650:	2200      	movs	r2, #0
 8009652:	4630      	mov	r0, r6
 8009654:	4639      	mov	r1, r7
 8009656:	f7f6 fe2f 	bl	80002b8 <__aeabi_dsub>
 800965a:	a365      	add	r3, pc, #404	; (adr r3, 80097f0 <_dtoa_r+0x2b8>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 ffe2 	bl	8000628 <__aeabi_dmul>
 8009664:	a364      	add	r3, pc, #400	; (adr r3, 80097f8 <_dtoa_r+0x2c0>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	f7f6 fe27 	bl	80002bc <__adddf3>
 800966e:	4606      	mov	r6, r0
 8009670:	4628      	mov	r0, r5
 8009672:	460f      	mov	r7, r1
 8009674:	f7f6 ff6e 	bl	8000554 <__aeabi_i2d>
 8009678:	a361      	add	r3, pc, #388	; (adr r3, 8009800 <_dtoa_r+0x2c8>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f7f6 ffd3 	bl	8000628 <__aeabi_dmul>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4630      	mov	r0, r6
 8009688:	4639      	mov	r1, r7
 800968a:	f7f6 fe17 	bl	80002bc <__adddf3>
 800968e:	4606      	mov	r6, r0
 8009690:	460f      	mov	r7, r1
 8009692:	f7f7 fa79 	bl	8000b88 <__aeabi_d2iz>
 8009696:	2200      	movs	r2, #0
 8009698:	9000      	str	r0, [sp, #0]
 800969a:	2300      	movs	r3, #0
 800969c:	4630      	mov	r0, r6
 800969e:	4639      	mov	r1, r7
 80096a0:	f7f7 fa34 	bl	8000b0c <__aeabi_dcmplt>
 80096a4:	b150      	cbz	r0, 80096bc <_dtoa_r+0x184>
 80096a6:	9800      	ldr	r0, [sp, #0]
 80096a8:	f7f6 ff54 	bl	8000554 <__aeabi_i2d>
 80096ac:	4632      	mov	r2, r6
 80096ae:	463b      	mov	r3, r7
 80096b0:	f7f7 fa22 	bl	8000af8 <__aeabi_dcmpeq>
 80096b4:	b910      	cbnz	r0, 80096bc <_dtoa_r+0x184>
 80096b6:	9b00      	ldr	r3, [sp, #0]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	9b00      	ldr	r3, [sp, #0]
 80096be:	2b16      	cmp	r3, #22
 80096c0:	d85a      	bhi.n	8009778 <_dtoa_r+0x240>
 80096c2:	9a00      	ldr	r2, [sp, #0]
 80096c4:	4b57      	ldr	r3, [pc, #348]	; (8009824 <_dtoa_r+0x2ec>)
 80096c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	ec51 0b19 	vmov	r0, r1, d9
 80096d2:	f7f7 fa1b 	bl	8000b0c <__aeabi_dcmplt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d050      	beq.n	800977c <_dtoa_r+0x244>
 80096da:	9b00      	ldr	r3, [sp, #0]
 80096dc:	3b01      	subs	r3, #1
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	2300      	movs	r3, #0
 80096e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80096e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096e6:	1b5d      	subs	r5, r3, r5
 80096e8:	1e6b      	subs	r3, r5, #1
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	bf45      	ittet	mi
 80096ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80096f2:	9304      	strmi	r3, [sp, #16]
 80096f4:	2300      	movpl	r3, #0
 80096f6:	2300      	movmi	r3, #0
 80096f8:	bf4c      	ite	mi
 80096fa:	9305      	strmi	r3, [sp, #20]
 80096fc:	9304      	strpl	r3, [sp, #16]
 80096fe:	9b00      	ldr	r3, [sp, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	db3d      	blt.n	8009780 <_dtoa_r+0x248>
 8009704:	9b05      	ldr	r3, [sp, #20]
 8009706:	9a00      	ldr	r2, [sp, #0]
 8009708:	920a      	str	r2, [sp, #40]	; 0x28
 800970a:	4413      	add	r3, r2
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	2300      	movs	r3, #0
 8009710:	9307      	str	r3, [sp, #28]
 8009712:	9b06      	ldr	r3, [sp, #24]
 8009714:	2b09      	cmp	r3, #9
 8009716:	f200 8089 	bhi.w	800982c <_dtoa_r+0x2f4>
 800971a:	2b05      	cmp	r3, #5
 800971c:	bfc4      	itt	gt
 800971e:	3b04      	subgt	r3, #4
 8009720:	9306      	strgt	r3, [sp, #24]
 8009722:	9b06      	ldr	r3, [sp, #24]
 8009724:	f1a3 0302 	sub.w	r3, r3, #2
 8009728:	bfcc      	ite	gt
 800972a:	2500      	movgt	r5, #0
 800972c:	2501      	movle	r5, #1
 800972e:	2b03      	cmp	r3, #3
 8009730:	f200 8087 	bhi.w	8009842 <_dtoa_r+0x30a>
 8009734:	e8df f003 	tbb	[pc, r3]
 8009738:	59383a2d 	.word	0x59383a2d
 800973c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009740:	441d      	add	r5, r3
 8009742:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009746:	2b20      	cmp	r3, #32
 8009748:	bfc1      	itttt	gt
 800974a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800974e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009752:	fa0b f303 	lslgt.w	r3, fp, r3
 8009756:	fa26 f000 	lsrgt.w	r0, r6, r0
 800975a:	bfda      	itte	le
 800975c:	f1c3 0320 	rsble	r3, r3, #32
 8009760:	fa06 f003 	lslle.w	r0, r6, r3
 8009764:	4318      	orrgt	r0, r3
 8009766:	f7f6 fee5 	bl	8000534 <__aeabi_ui2d>
 800976a:	2301      	movs	r3, #1
 800976c:	4606      	mov	r6, r0
 800976e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009772:	3d01      	subs	r5, #1
 8009774:	930e      	str	r3, [sp, #56]	; 0x38
 8009776:	e76a      	b.n	800964e <_dtoa_r+0x116>
 8009778:	2301      	movs	r3, #1
 800977a:	e7b2      	b.n	80096e2 <_dtoa_r+0x1aa>
 800977c:	900b      	str	r0, [sp, #44]	; 0x2c
 800977e:	e7b1      	b.n	80096e4 <_dtoa_r+0x1ac>
 8009780:	9b04      	ldr	r3, [sp, #16]
 8009782:	9a00      	ldr	r2, [sp, #0]
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	9304      	str	r3, [sp, #16]
 8009788:	4253      	negs	r3, r2
 800978a:	9307      	str	r3, [sp, #28]
 800978c:	2300      	movs	r3, #0
 800978e:	930a      	str	r3, [sp, #40]	; 0x28
 8009790:	e7bf      	b.n	8009712 <_dtoa_r+0x1da>
 8009792:	2300      	movs	r3, #0
 8009794:	9308      	str	r3, [sp, #32]
 8009796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	dc55      	bgt.n	8009848 <_dtoa_r+0x310>
 800979c:	2301      	movs	r3, #1
 800979e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097a2:	461a      	mov	r2, r3
 80097a4:	9209      	str	r2, [sp, #36]	; 0x24
 80097a6:	e00c      	b.n	80097c2 <_dtoa_r+0x28a>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e7f3      	b.n	8009794 <_dtoa_r+0x25c>
 80097ac:	2300      	movs	r3, #0
 80097ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097b0:	9308      	str	r3, [sp, #32]
 80097b2:	9b00      	ldr	r3, [sp, #0]
 80097b4:	4413      	add	r3, r2
 80097b6:	9302      	str	r3, [sp, #8]
 80097b8:	3301      	adds	r3, #1
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	9303      	str	r3, [sp, #12]
 80097be:	bfb8      	it	lt
 80097c0:	2301      	movlt	r3, #1
 80097c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80097c4:	2200      	movs	r2, #0
 80097c6:	6042      	str	r2, [r0, #4]
 80097c8:	2204      	movs	r2, #4
 80097ca:	f102 0614 	add.w	r6, r2, #20
 80097ce:	429e      	cmp	r6, r3
 80097d0:	6841      	ldr	r1, [r0, #4]
 80097d2:	d93d      	bls.n	8009850 <_dtoa_r+0x318>
 80097d4:	4620      	mov	r0, r4
 80097d6:	f000 fcad 	bl	800a134 <_Balloc>
 80097da:	9001      	str	r0, [sp, #4]
 80097dc:	2800      	cmp	r0, #0
 80097de:	d13b      	bne.n	8009858 <_dtoa_r+0x320>
 80097e0:	4b11      	ldr	r3, [pc, #68]	; (8009828 <_dtoa_r+0x2f0>)
 80097e2:	4602      	mov	r2, r0
 80097e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80097e8:	e6c0      	b.n	800956c <_dtoa_r+0x34>
 80097ea:	2301      	movs	r3, #1
 80097ec:	e7df      	b.n	80097ae <_dtoa_r+0x276>
 80097ee:	bf00      	nop
 80097f0:	636f4361 	.word	0x636f4361
 80097f4:	3fd287a7 	.word	0x3fd287a7
 80097f8:	8b60c8b3 	.word	0x8b60c8b3
 80097fc:	3fc68a28 	.word	0x3fc68a28
 8009800:	509f79fb 	.word	0x509f79fb
 8009804:	3fd34413 	.word	0x3fd34413
 8009808:	08015141 	.word	0x08015141
 800980c:	08015158 	.word	0x08015158
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0801513d 	.word	0x0801513d
 8009818:	08015134 	.word	0x08015134
 800981c:	08015111 	.word	0x08015111
 8009820:	3ff80000 	.word	0x3ff80000
 8009824:	08015248 	.word	0x08015248
 8009828:	080151b3 	.word	0x080151b3
 800982c:	2501      	movs	r5, #1
 800982e:	2300      	movs	r3, #0
 8009830:	9306      	str	r3, [sp, #24]
 8009832:	9508      	str	r5, [sp, #32]
 8009834:	f04f 33ff 	mov.w	r3, #4294967295
 8009838:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800983c:	2200      	movs	r2, #0
 800983e:	2312      	movs	r3, #18
 8009840:	e7b0      	b.n	80097a4 <_dtoa_r+0x26c>
 8009842:	2301      	movs	r3, #1
 8009844:	9308      	str	r3, [sp, #32]
 8009846:	e7f5      	b.n	8009834 <_dtoa_r+0x2fc>
 8009848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800984e:	e7b8      	b.n	80097c2 <_dtoa_r+0x28a>
 8009850:	3101      	adds	r1, #1
 8009852:	6041      	str	r1, [r0, #4]
 8009854:	0052      	lsls	r2, r2, #1
 8009856:	e7b8      	b.n	80097ca <_dtoa_r+0x292>
 8009858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800985a:	9a01      	ldr	r2, [sp, #4]
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	2b0e      	cmp	r3, #14
 8009862:	f200 809d 	bhi.w	80099a0 <_dtoa_r+0x468>
 8009866:	2d00      	cmp	r5, #0
 8009868:	f000 809a 	beq.w	80099a0 <_dtoa_r+0x468>
 800986c:	9b00      	ldr	r3, [sp, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	dd32      	ble.n	80098d8 <_dtoa_r+0x3a0>
 8009872:	4ab7      	ldr	r2, [pc, #732]	; (8009b50 <_dtoa_r+0x618>)
 8009874:	f003 030f 	and.w	r3, r3, #15
 8009878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800987c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009880:	9b00      	ldr	r3, [sp, #0]
 8009882:	05d8      	lsls	r0, r3, #23
 8009884:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009888:	d516      	bpl.n	80098b8 <_dtoa_r+0x380>
 800988a:	4bb2      	ldr	r3, [pc, #712]	; (8009b54 <_dtoa_r+0x61c>)
 800988c:	ec51 0b19 	vmov	r0, r1, d9
 8009890:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009894:	f7f6 fff2 	bl	800087c <__aeabi_ddiv>
 8009898:	f007 070f 	and.w	r7, r7, #15
 800989c:	4682      	mov	sl, r0
 800989e:	468b      	mov	fp, r1
 80098a0:	2503      	movs	r5, #3
 80098a2:	4eac      	ldr	r6, [pc, #688]	; (8009b54 <_dtoa_r+0x61c>)
 80098a4:	b957      	cbnz	r7, 80098bc <_dtoa_r+0x384>
 80098a6:	4642      	mov	r2, r8
 80098a8:	464b      	mov	r3, r9
 80098aa:	4650      	mov	r0, sl
 80098ac:	4659      	mov	r1, fp
 80098ae:	f7f6 ffe5 	bl	800087c <__aeabi_ddiv>
 80098b2:	4682      	mov	sl, r0
 80098b4:	468b      	mov	fp, r1
 80098b6:	e028      	b.n	800990a <_dtoa_r+0x3d2>
 80098b8:	2502      	movs	r5, #2
 80098ba:	e7f2      	b.n	80098a2 <_dtoa_r+0x36a>
 80098bc:	07f9      	lsls	r1, r7, #31
 80098be:	d508      	bpl.n	80098d2 <_dtoa_r+0x39a>
 80098c0:	4640      	mov	r0, r8
 80098c2:	4649      	mov	r1, r9
 80098c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098c8:	f7f6 feae 	bl	8000628 <__aeabi_dmul>
 80098cc:	3501      	adds	r5, #1
 80098ce:	4680      	mov	r8, r0
 80098d0:	4689      	mov	r9, r1
 80098d2:	107f      	asrs	r7, r7, #1
 80098d4:	3608      	adds	r6, #8
 80098d6:	e7e5      	b.n	80098a4 <_dtoa_r+0x36c>
 80098d8:	f000 809b 	beq.w	8009a12 <_dtoa_r+0x4da>
 80098dc:	9b00      	ldr	r3, [sp, #0]
 80098de:	4f9d      	ldr	r7, [pc, #628]	; (8009b54 <_dtoa_r+0x61c>)
 80098e0:	425e      	negs	r6, r3
 80098e2:	4b9b      	ldr	r3, [pc, #620]	; (8009b50 <_dtoa_r+0x618>)
 80098e4:	f006 020f 	and.w	r2, r6, #15
 80098e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	ec51 0b19 	vmov	r0, r1, d9
 80098f4:	f7f6 fe98 	bl	8000628 <__aeabi_dmul>
 80098f8:	1136      	asrs	r6, r6, #4
 80098fa:	4682      	mov	sl, r0
 80098fc:	468b      	mov	fp, r1
 80098fe:	2300      	movs	r3, #0
 8009900:	2502      	movs	r5, #2
 8009902:	2e00      	cmp	r6, #0
 8009904:	d17a      	bne.n	80099fc <_dtoa_r+0x4c4>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1d3      	bne.n	80098b2 <_dtoa_r+0x37a>
 800990a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8082 	beq.w	8009a16 <_dtoa_r+0x4de>
 8009912:	4b91      	ldr	r3, [pc, #580]	; (8009b58 <_dtoa_r+0x620>)
 8009914:	2200      	movs	r2, #0
 8009916:	4650      	mov	r0, sl
 8009918:	4659      	mov	r1, fp
 800991a:	f7f7 f8f7 	bl	8000b0c <__aeabi_dcmplt>
 800991e:	2800      	cmp	r0, #0
 8009920:	d079      	beq.n	8009a16 <_dtoa_r+0x4de>
 8009922:	9b03      	ldr	r3, [sp, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d076      	beq.n	8009a16 <_dtoa_r+0x4de>
 8009928:	9b02      	ldr	r3, [sp, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	dd36      	ble.n	800999c <_dtoa_r+0x464>
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	4650      	mov	r0, sl
 8009932:	4659      	mov	r1, fp
 8009934:	1e5f      	subs	r7, r3, #1
 8009936:	2200      	movs	r2, #0
 8009938:	4b88      	ldr	r3, [pc, #544]	; (8009b5c <_dtoa_r+0x624>)
 800993a:	f7f6 fe75 	bl	8000628 <__aeabi_dmul>
 800993e:	9e02      	ldr	r6, [sp, #8]
 8009940:	4682      	mov	sl, r0
 8009942:	468b      	mov	fp, r1
 8009944:	3501      	adds	r5, #1
 8009946:	4628      	mov	r0, r5
 8009948:	f7f6 fe04 	bl	8000554 <__aeabi_i2d>
 800994c:	4652      	mov	r2, sl
 800994e:	465b      	mov	r3, fp
 8009950:	f7f6 fe6a 	bl	8000628 <__aeabi_dmul>
 8009954:	4b82      	ldr	r3, [pc, #520]	; (8009b60 <_dtoa_r+0x628>)
 8009956:	2200      	movs	r2, #0
 8009958:	f7f6 fcb0 	bl	80002bc <__adddf3>
 800995c:	46d0      	mov	r8, sl
 800995e:	46d9      	mov	r9, fp
 8009960:	4682      	mov	sl, r0
 8009962:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009966:	2e00      	cmp	r6, #0
 8009968:	d158      	bne.n	8009a1c <_dtoa_r+0x4e4>
 800996a:	4b7e      	ldr	r3, [pc, #504]	; (8009b64 <_dtoa_r+0x62c>)
 800996c:	2200      	movs	r2, #0
 800996e:	4640      	mov	r0, r8
 8009970:	4649      	mov	r1, r9
 8009972:	f7f6 fca1 	bl	80002b8 <__aeabi_dsub>
 8009976:	4652      	mov	r2, sl
 8009978:	465b      	mov	r3, fp
 800997a:	4680      	mov	r8, r0
 800997c:	4689      	mov	r9, r1
 800997e:	f7f7 f8e3 	bl	8000b48 <__aeabi_dcmpgt>
 8009982:	2800      	cmp	r0, #0
 8009984:	f040 8295 	bne.w	8009eb2 <_dtoa_r+0x97a>
 8009988:	4652      	mov	r2, sl
 800998a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800998e:	4640      	mov	r0, r8
 8009990:	4649      	mov	r1, r9
 8009992:	f7f7 f8bb 	bl	8000b0c <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	f040 8289 	bne.w	8009eae <_dtoa_r+0x976>
 800999c:	ec5b ab19 	vmov	sl, fp, d9
 80099a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f2c0 8148 	blt.w	8009c38 <_dtoa_r+0x700>
 80099a8:	9a00      	ldr	r2, [sp, #0]
 80099aa:	2a0e      	cmp	r2, #14
 80099ac:	f300 8144 	bgt.w	8009c38 <_dtoa_r+0x700>
 80099b0:	4b67      	ldr	r3, [pc, #412]	; (8009b50 <_dtoa_r+0x618>)
 80099b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f280 80d5 	bge.w	8009b6c <_dtoa_r+0x634>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f300 80d1 	bgt.w	8009b6c <_dtoa_r+0x634>
 80099ca:	f040 826f 	bne.w	8009eac <_dtoa_r+0x974>
 80099ce:	4b65      	ldr	r3, [pc, #404]	; (8009b64 <_dtoa_r+0x62c>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	4640      	mov	r0, r8
 80099d4:	4649      	mov	r1, r9
 80099d6:	f7f6 fe27 	bl	8000628 <__aeabi_dmul>
 80099da:	4652      	mov	r2, sl
 80099dc:	465b      	mov	r3, fp
 80099de:	f7f7 f8a9 	bl	8000b34 <__aeabi_dcmpge>
 80099e2:	9e03      	ldr	r6, [sp, #12]
 80099e4:	4637      	mov	r7, r6
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f040 8245 	bne.w	8009e76 <_dtoa_r+0x93e>
 80099ec:	9d01      	ldr	r5, [sp, #4]
 80099ee:	2331      	movs	r3, #49	; 0x31
 80099f0:	f805 3b01 	strb.w	r3, [r5], #1
 80099f4:	9b00      	ldr	r3, [sp, #0]
 80099f6:	3301      	adds	r3, #1
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	e240      	b.n	8009e7e <_dtoa_r+0x946>
 80099fc:	07f2      	lsls	r2, r6, #31
 80099fe:	d505      	bpl.n	8009a0c <_dtoa_r+0x4d4>
 8009a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a04:	f7f6 fe10 	bl	8000628 <__aeabi_dmul>
 8009a08:	3501      	adds	r5, #1
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	1076      	asrs	r6, r6, #1
 8009a0e:	3708      	adds	r7, #8
 8009a10:	e777      	b.n	8009902 <_dtoa_r+0x3ca>
 8009a12:	2502      	movs	r5, #2
 8009a14:	e779      	b.n	800990a <_dtoa_r+0x3d2>
 8009a16:	9f00      	ldr	r7, [sp, #0]
 8009a18:	9e03      	ldr	r6, [sp, #12]
 8009a1a:	e794      	b.n	8009946 <_dtoa_r+0x40e>
 8009a1c:	9901      	ldr	r1, [sp, #4]
 8009a1e:	4b4c      	ldr	r3, [pc, #304]	; (8009b50 <_dtoa_r+0x618>)
 8009a20:	4431      	add	r1, r6
 8009a22:	910d      	str	r1, [sp, #52]	; 0x34
 8009a24:	9908      	ldr	r1, [sp, #32]
 8009a26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a2e:	2900      	cmp	r1, #0
 8009a30:	d043      	beq.n	8009aba <_dtoa_r+0x582>
 8009a32:	494d      	ldr	r1, [pc, #308]	; (8009b68 <_dtoa_r+0x630>)
 8009a34:	2000      	movs	r0, #0
 8009a36:	f7f6 ff21 	bl	800087c <__aeabi_ddiv>
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	465b      	mov	r3, fp
 8009a3e:	f7f6 fc3b 	bl	80002b8 <__aeabi_dsub>
 8009a42:	9d01      	ldr	r5, [sp, #4]
 8009a44:	4682      	mov	sl, r0
 8009a46:	468b      	mov	fp, r1
 8009a48:	4649      	mov	r1, r9
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f7f7 f89c 	bl	8000b88 <__aeabi_d2iz>
 8009a50:	4606      	mov	r6, r0
 8009a52:	f7f6 fd7f 	bl	8000554 <__aeabi_i2d>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	f7f6 fc2b 	bl	80002b8 <__aeabi_dsub>
 8009a62:	3630      	adds	r6, #48	; 0x30
 8009a64:	f805 6b01 	strb.w	r6, [r5], #1
 8009a68:	4652      	mov	r2, sl
 8009a6a:	465b      	mov	r3, fp
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	4689      	mov	r9, r1
 8009a70:	f7f7 f84c 	bl	8000b0c <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d163      	bne.n	8009b40 <_dtoa_r+0x608>
 8009a78:	4642      	mov	r2, r8
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	4936      	ldr	r1, [pc, #216]	; (8009b58 <_dtoa_r+0x620>)
 8009a7e:	2000      	movs	r0, #0
 8009a80:	f7f6 fc1a 	bl	80002b8 <__aeabi_dsub>
 8009a84:	4652      	mov	r2, sl
 8009a86:	465b      	mov	r3, fp
 8009a88:	f7f7 f840 	bl	8000b0c <__aeabi_dcmplt>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	f040 80b5 	bne.w	8009bfc <_dtoa_r+0x6c4>
 8009a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a94:	429d      	cmp	r5, r3
 8009a96:	d081      	beq.n	800999c <_dtoa_r+0x464>
 8009a98:	4b30      	ldr	r3, [pc, #192]	; (8009b5c <_dtoa_r+0x624>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4650      	mov	r0, sl
 8009a9e:	4659      	mov	r1, fp
 8009aa0:	f7f6 fdc2 	bl	8000628 <__aeabi_dmul>
 8009aa4:	4b2d      	ldr	r3, [pc, #180]	; (8009b5c <_dtoa_r+0x624>)
 8009aa6:	4682      	mov	sl, r0
 8009aa8:	468b      	mov	fp, r1
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f7f6 fdba 	bl	8000628 <__aeabi_dmul>
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	4689      	mov	r9, r1
 8009ab8:	e7c6      	b.n	8009a48 <_dtoa_r+0x510>
 8009aba:	4650      	mov	r0, sl
 8009abc:	4659      	mov	r1, fp
 8009abe:	f7f6 fdb3 	bl	8000628 <__aeabi_dmul>
 8009ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ac4:	9d01      	ldr	r5, [sp, #4]
 8009ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac8:	4682      	mov	sl, r0
 8009aca:	468b      	mov	fp, r1
 8009acc:	4649      	mov	r1, r9
 8009ace:	4640      	mov	r0, r8
 8009ad0:	f7f7 f85a 	bl	8000b88 <__aeabi_d2iz>
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	f7f6 fd3d 	bl	8000554 <__aeabi_i2d>
 8009ada:	3630      	adds	r6, #48	; 0x30
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	f7f6 fbe8 	bl	80002b8 <__aeabi_dsub>
 8009ae8:	f805 6b01 	strb.w	r6, [r5], #1
 8009aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aee:	429d      	cmp	r5, r3
 8009af0:	4680      	mov	r8, r0
 8009af2:	4689      	mov	r9, r1
 8009af4:	f04f 0200 	mov.w	r2, #0
 8009af8:	d124      	bne.n	8009b44 <_dtoa_r+0x60c>
 8009afa:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <_dtoa_r+0x630>)
 8009afc:	4650      	mov	r0, sl
 8009afe:	4659      	mov	r1, fp
 8009b00:	f7f6 fbdc 	bl	80002bc <__adddf3>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4640      	mov	r0, r8
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	f7f7 f81c 	bl	8000b48 <__aeabi_dcmpgt>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d173      	bne.n	8009bfc <_dtoa_r+0x6c4>
 8009b14:	4652      	mov	r2, sl
 8009b16:	465b      	mov	r3, fp
 8009b18:	4913      	ldr	r1, [pc, #76]	; (8009b68 <_dtoa_r+0x630>)
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f7f6 fbcc 	bl	80002b8 <__aeabi_dsub>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4640      	mov	r0, r8
 8009b26:	4649      	mov	r1, r9
 8009b28:	f7f6 fff0 	bl	8000b0c <__aeabi_dcmplt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	f43f af35 	beq.w	800999c <_dtoa_r+0x464>
 8009b32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b34:	1e6b      	subs	r3, r5, #1
 8009b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b3c:	2b30      	cmp	r3, #48	; 0x30
 8009b3e:	d0f8      	beq.n	8009b32 <_dtoa_r+0x5fa>
 8009b40:	9700      	str	r7, [sp, #0]
 8009b42:	e049      	b.n	8009bd8 <_dtoa_r+0x6a0>
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <_dtoa_r+0x624>)
 8009b46:	f7f6 fd6f 	bl	8000628 <__aeabi_dmul>
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	4689      	mov	r9, r1
 8009b4e:	e7bd      	b.n	8009acc <_dtoa_r+0x594>
 8009b50:	08015248 	.word	0x08015248
 8009b54:	08015220 	.word	0x08015220
 8009b58:	3ff00000 	.word	0x3ff00000
 8009b5c:	40240000 	.word	0x40240000
 8009b60:	401c0000 	.word	0x401c0000
 8009b64:	40140000 	.word	0x40140000
 8009b68:	3fe00000 	.word	0x3fe00000
 8009b6c:	9d01      	ldr	r5, [sp, #4]
 8009b6e:	4656      	mov	r6, sl
 8009b70:	465f      	mov	r7, fp
 8009b72:	4642      	mov	r2, r8
 8009b74:	464b      	mov	r3, r9
 8009b76:	4630      	mov	r0, r6
 8009b78:	4639      	mov	r1, r7
 8009b7a:	f7f6 fe7f 	bl	800087c <__aeabi_ddiv>
 8009b7e:	f7f7 f803 	bl	8000b88 <__aeabi_d2iz>
 8009b82:	4682      	mov	sl, r0
 8009b84:	f7f6 fce6 	bl	8000554 <__aeabi_i2d>
 8009b88:	4642      	mov	r2, r8
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	f7f6 fd4c 	bl	8000628 <__aeabi_dmul>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009b9c:	f7f6 fb8c 	bl	80002b8 <__aeabi_dsub>
 8009ba0:	f805 6b01 	strb.w	r6, [r5], #1
 8009ba4:	9e01      	ldr	r6, [sp, #4]
 8009ba6:	9f03      	ldr	r7, [sp, #12]
 8009ba8:	1bae      	subs	r6, r5, r6
 8009baa:	42b7      	cmp	r7, r6
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	d135      	bne.n	8009c1e <_dtoa_r+0x6e6>
 8009bb2:	f7f6 fb83 	bl	80002bc <__adddf3>
 8009bb6:	4642      	mov	r2, r8
 8009bb8:	464b      	mov	r3, r9
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	f7f6 ffc3 	bl	8000b48 <__aeabi_dcmpgt>
 8009bc2:	b9d0      	cbnz	r0, 8009bfa <_dtoa_r+0x6c2>
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	464b      	mov	r3, r9
 8009bc8:	4630      	mov	r0, r6
 8009bca:	4639      	mov	r1, r7
 8009bcc:	f7f6 ff94 	bl	8000af8 <__aeabi_dcmpeq>
 8009bd0:	b110      	cbz	r0, 8009bd8 <_dtoa_r+0x6a0>
 8009bd2:	f01a 0f01 	tst.w	sl, #1
 8009bd6:	d110      	bne.n	8009bfa <_dtoa_r+0x6c2>
 8009bd8:	4620      	mov	r0, r4
 8009bda:	ee18 1a10 	vmov	r1, s16
 8009bde:	f000 fae9 	bl	800a1b4 <_Bfree>
 8009be2:	2300      	movs	r3, #0
 8009be4:	9800      	ldr	r0, [sp, #0]
 8009be6:	702b      	strb	r3, [r5, #0]
 8009be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bea:	3001      	adds	r0, #1
 8009bec:	6018      	str	r0, [r3, #0]
 8009bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f43f acf1 	beq.w	80095d8 <_dtoa_r+0xa0>
 8009bf6:	601d      	str	r5, [r3, #0]
 8009bf8:	e4ee      	b.n	80095d8 <_dtoa_r+0xa0>
 8009bfa:	9f00      	ldr	r7, [sp, #0]
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	461d      	mov	r5, r3
 8009c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c04:	2a39      	cmp	r2, #57	; 0x39
 8009c06:	d106      	bne.n	8009c16 <_dtoa_r+0x6de>
 8009c08:	9a01      	ldr	r2, [sp, #4]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d1f7      	bne.n	8009bfe <_dtoa_r+0x6c6>
 8009c0e:	9901      	ldr	r1, [sp, #4]
 8009c10:	2230      	movs	r2, #48	; 0x30
 8009c12:	3701      	adds	r7, #1
 8009c14:	700a      	strb	r2, [r1, #0]
 8009c16:	781a      	ldrb	r2, [r3, #0]
 8009c18:	3201      	adds	r2, #1
 8009c1a:	701a      	strb	r2, [r3, #0]
 8009c1c:	e790      	b.n	8009b40 <_dtoa_r+0x608>
 8009c1e:	4ba6      	ldr	r3, [pc, #664]	; (8009eb8 <_dtoa_r+0x980>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	f7f6 fd01 	bl	8000628 <__aeabi_dmul>
 8009c26:	2200      	movs	r2, #0
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460f      	mov	r7, r1
 8009c2e:	f7f6 ff63 	bl	8000af8 <__aeabi_dcmpeq>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d09d      	beq.n	8009b72 <_dtoa_r+0x63a>
 8009c36:	e7cf      	b.n	8009bd8 <_dtoa_r+0x6a0>
 8009c38:	9a08      	ldr	r2, [sp, #32]
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	f000 80d7 	beq.w	8009dee <_dtoa_r+0x8b6>
 8009c40:	9a06      	ldr	r2, [sp, #24]
 8009c42:	2a01      	cmp	r2, #1
 8009c44:	f300 80ba 	bgt.w	8009dbc <_dtoa_r+0x884>
 8009c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	f000 80b2 	beq.w	8009db4 <_dtoa_r+0x87c>
 8009c50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c54:	9e07      	ldr	r6, [sp, #28]
 8009c56:	9d04      	ldr	r5, [sp, #16]
 8009c58:	9a04      	ldr	r2, [sp, #16]
 8009c5a:	441a      	add	r2, r3
 8009c5c:	9204      	str	r2, [sp, #16]
 8009c5e:	9a05      	ldr	r2, [sp, #20]
 8009c60:	2101      	movs	r1, #1
 8009c62:	441a      	add	r2, r3
 8009c64:	4620      	mov	r0, r4
 8009c66:	9205      	str	r2, [sp, #20]
 8009c68:	f000 fb5c 	bl	800a324 <__i2b>
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	2d00      	cmp	r5, #0
 8009c70:	dd0c      	ble.n	8009c8c <_dtoa_r+0x754>
 8009c72:	9b05      	ldr	r3, [sp, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dd09      	ble.n	8009c8c <_dtoa_r+0x754>
 8009c78:	42ab      	cmp	r3, r5
 8009c7a:	9a04      	ldr	r2, [sp, #16]
 8009c7c:	bfa8      	it	ge
 8009c7e:	462b      	movge	r3, r5
 8009c80:	1ad2      	subs	r2, r2, r3
 8009c82:	9204      	str	r2, [sp, #16]
 8009c84:	9a05      	ldr	r2, [sp, #20]
 8009c86:	1aed      	subs	r5, r5, r3
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	9305      	str	r3, [sp, #20]
 8009c8c:	9b07      	ldr	r3, [sp, #28]
 8009c8e:	b31b      	cbz	r3, 8009cd8 <_dtoa_r+0x7a0>
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80af 	beq.w	8009df6 <_dtoa_r+0x8be>
 8009c98:	2e00      	cmp	r6, #0
 8009c9a:	dd13      	ble.n	8009cc4 <_dtoa_r+0x78c>
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	4632      	mov	r2, r6
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f000 fbff 	bl	800a4a4 <__pow5mult>
 8009ca6:	ee18 2a10 	vmov	r2, s16
 8009caa:	4601      	mov	r1, r0
 8009cac:	4607      	mov	r7, r0
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 fb4e 	bl	800a350 <__multiply>
 8009cb4:	ee18 1a10 	vmov	r1, s16
 8009cb8:	4680      	mov	r8, r0
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 fa7a 	bl	800a1b4 <_Bfree>
 8009cc0:	ee08 8a10 	vmov	s16, r8
 8009cc4:	9b07      	ldr	r3, [sp, #28]
 8009cc6:	1b9a      	subs	r2, r3, r6
 8009cc8:	d006      	beq.n	8009cd8 <_dtoa_r+0x7a0>
 8009cca:	ee18 1a10 	vmov	r1, s16
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 fbe8 	bl	800a4a4 <__pow5mult>
 8009cd4:	ee08 0a10 	vmov	s16, r0
 8009cd8:	2101      	movs	r1, #1
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 fb22 	bl	800a324 <__i2b>
 8009ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	f340 8088 	ble.w	8009dfa <_dtoa_r+0x8c2>
 8009cea:	461a      	mov	r2, r3
 8009cec:	4601      	mov	r1, r0
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fbd8 	bl	800a4a4 <__pow5mult>
 8009cf4:	9b06      	ldr	r3, [sp, #24]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	f340 8081 	ble.w	8009e00 <_dtoa_r+0x8c8>
 8009cfe:	f04f 0800 	mov.w	r8, #0
 8009d02:	6933      	ldr	r3, [r6, #16]
 8009d04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d08:	6918      	ldr	r0, [r3, #16]
 8009d0a:	f000 fabb 	bl	800a284 <__hi0bits>
 8009d0e:	f1c0 0020 	rsb	r0, r0, #32
 8009d12:	9b05      	ldr	r3, [sp, #20]
 8009d14:	4418      	add	r0, r3
 8009d16:	f010 001f 	ands.w	r0, r0, #31
 8009d1a:	f000 8092 	beq.w	8009e42 <_dtoa_r+0x90a>
 8009d1e:	f1c0 0320 	rsb	r3, r0, #32
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	f340 808a 	ble.w	8009e3c <_dtoa_r+0x904>
 8009d28:	f1c0 001c 	rsb	r0, r0, #28
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	4403      	add	r3, r0
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	9b05      	ldr	r3, [sp, #20]
 8009d34:	4403      	add	r3, r0
 8009d36:	4405      	add	r5, r0
 8009d38:	9305      	str	r3, [sp, #20]
 8009d3a:	9b04      	ldr	r3, [sp, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dd07      	ble.n	8009d50 <_dtoa_r+0x818>
 8009d40:	ee18 1a10 	vmov	r1, s16
 8009d44:	461a      	mov	r2, r3
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 fc06 	bl	800a558 <__lshift>
 8009d4c:	ee08 0a10 	vmov	s16, r0
 8009d50:	9b05      	ldr	r3, [sp, #20]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd05      	ble.n	8009d62 <_dtoa_r+0x82a>
 8009d56:	4631      	mov	r1, r6
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fbfc 	bl	800a558 <__lshift>
 8009d60:	4606      	mov	r6, r0
 8009d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d06e      	beq.n	8009e46 <_dtoa_r+0x90e>
 8009d68:	ee18 0a10 	vmov	r0, s16
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	f000 fc63 	bl	800a638 <__mcmp>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	da67      	bge.n	8009e46 <_dtoa_r+0x90e>
 8009d76:	9b00      	ldr	r3, [sp, #0]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	ee18 1a10 	vmov	r1, s16
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	220a      	movs	r2, #10
 8009d82:	2300      	movs	r3, #0
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 fa37 	bl	800a1f8 <__multadd>
 8009d8a:	9b08      	ldr	r3, [sp, #32]
 8009d8c:	ee08 0a10 	vmov	s16, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 81b1 	beq.w	800a0f8 <_dtoa_r+0xbc0>
 8009d96:	2300      	movs	r3, #0
 8009d98:	4639      	mov	r1, r7
 8009d9a:	220a      	movs	r2, #10
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fa2b 	bl	800a1f8 <__multadd>
 8009da2:	9b02      	ldr	r3, [sp, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	4607      	mov	r7, r0
 8009da8:	f300 808e 	bgt.w	8009ec8 <_dtoa_r+0x990>
 8009dac:	9b06      	ldr	r3, [sp, #24]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	dc51      	bgt.n	8009e56 <_dtoa_r+0x91e>
 8009db2:	e089      	b.n	8009ec8 <_dtoa_r+0x990>
 8009db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009dba:	e74b      	b.n	8009c54 <_dtoa_r+0x71c>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	1e5e      	subs	r6, r3, #1
 8009dc0:	9b07      	ldr	r3, [sp, #28]
 8009dc2:	42b3      	cmp	r3, r6
 8009dc4:	bfbf      	itttt	lt
 8009dc6:	9b07      	ldrlt	r3, [sp, #28]
 8009dc8:	9607      	strlt	r6, [sp, #28]
 8009dca:	1af2      	sublt	r2, r6, r3
 8009dcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009dce:	bfb6      	itet	lt
 8009dd0:	189b      	addlt	r3, r3, r2
 8009dd2:	1b9e      	subge	r6, r3, r6
 8009dd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	bfb8      	it	lt
 8009dda:	2600      	movlt	r6, #0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bfb7      	itett	lt
 8009de0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009de4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009de8:	1a9d      	sublt	r5, r3, r2
 8009dea:	2300      	movlt	r3, #0
 8009dec:	e734      	b.n	8009c58 <_dtoa_r+0x720>
 8009dee:	9e07      	ldr	r6, [sp, #28]
 8009df0:	9d04      	ldr	r5, [sp, #16]
 8009df2:	9f08      	ldr	r7, [sp, #32]
 8009df4:	e73b      	b.n	8009c6e <_dtoa_r+0x736>
 8009df6:	9a07      	ldr	r2, [sp, #28]
 8009df8:	e767      	b.n	8009cca <_dtoa_r+0x792>
 8009dfa:	9b06      	ldr	r3, [sp, #24]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	dc18      	bgt.n	8009e32 <_dtoa_r+0x8fa>
 8009e00:	f1ba 0f00 	cmp.w	sl, #0
 8009e04:	d115      	bne.n	8009e32 <_dtoa_r+0x8fa>
 8009e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e0a:	b993      	cbnz	r3, 8009e32 <_dtoa_r+0x8fa>
 8009e0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e10:	0d1b      	lsrs	r3, r3, #20
 8009e12:	051b      	lsls	r3, r3, #20
 8009e14:	b183      	cbz	r3, 8009e38 <_dtoa_r+0x900>
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	9304      	str	r3, [sp, #16]
 8009e1c:	9b05      	ldr	r3, [sp, #20]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	f04f 0801 	mov.w	r8, #1
 8009e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f47f af6a 	bne.w	8009d02 <_dtoa_r+0x7ca>
 8009e2e:	2001      	movs	r0, #1
 8009e30:	e76f      	b.n	8009d12 <_dtoa_r+0x7da>
 8009e32:	f04f 0800 	mov.w	r8, #0
 8009e36:	e7f6      	b.n	8009e26 <_dtoa_r+0x8ee>
 8009e38:	4698      	mov	r8, r3
 8009e3a:	e7f4      	b.n	8009e26 <_dtoa_r+0x8ee>
 8009e3c:	f43f af7d 	beq.w	8009d3a <_dtoa_r+0x802>
 8009e40:	4618      	mov	r0, r3
 8009e42:	301c      	adds	r0, #28
 8009e44:	e772      	b.n	8009d2c <_dtoa_r+0x7f4>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	dc37      	bgt.n	8009ebc <_dtoa_r+0x984>
 8009e4c:	9b06      	ldr	r3, [sp, #24]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	dd34      	ble.n	8009ebc <_dtoa_r+0x984>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	9302      	str	r3, [sp, #8]
 8009e56:	9b02      	ldr	r3, [sp, #8]
 8009e58:	b96b      	cbnz	r3, 8009e76 <_dtoa_r+0x93e>
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	2205      	movs	r2, #5
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 f9ca 	bl	800a1f8 <__multadd>
 8009e64:	4601      	mov	r1, r0
 8009e66:	4606      	mov	r6, r0
 8009e68:	ee18 0a10 	vmov	r0, s16
 8009e6c:	f000 fbe4 	bl	800a638 <__mcmp>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	f73f adbb 	bgt.w	80099ec <_dtoa_r+0x4b4>
 8009e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e78:	9d01      	ldr	r5, [sp, #4]
 8009e7a:	43db      	mvns	r3, r3
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	4631      	mov	r1, r6
 8009e84:	4620      	mov	r0, r4
 8009e86:	f000 f995 	bl	800a1b4 <_Bfree>
 8009e8a:	2f00      	cmp	r7, #0
 8009e8c:	f43f aea4 	beq.w	8009bd8 <_dtoa_r+0x6a0>
 8009e90:	f1b8 0f00 	cmp.w	r8, #0
 8009e94:	d005      	beq.n	8009ea2 <_dtoa_r+0x96a>
 8009e96:	45b8      	cmp	r8, r7
 8009e98:	d003      	beq.n	8009ea2 <_dtoa_r+0x96a>
 8009e9a:	4641      	mov	r1, r8
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 f989 	bl	800a1b4 <_Bfree>
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f000 f985 	bl	800a1b4 <_Bfree>
 8009eaa:	e695      	b.n	8009bd8 <_dtoa_r+0x6a0>
 8009eac:	2600      	movs	r6, #0
 8009eae:	4637      	mov	r7, r6
 8009eb0:	e7e1      	b.n	8009e76 <_dtoa_r+0x93e>
 8009eb2:	9700      	str	r7, [sp, #0]
 8009eb4:	4637      	mov	r7, r6
 8009eb6:	e599      	b.n	80099ec <_dtoa_r+0x4b4>
 8009eb8:	40240000 	.word	0x40240000
 8009ebc:	9b08      	ldr	r3, [sp, #32]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 80ca 	beq.w	800a058 <_dtoa_r+0xb20>
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	9302      	str	r3, [sp, #8]
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	dd05      	ble.n	8009ed8 <_dtoa_r+0x9a0>
 8009ecc:	4639      	mov	r1, r7
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 fb41 	bl	800a558 <__lshift>
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	f1b8 0f00 	cmp.w	r8, #0
 8009edc:	d05b      	beq.n	8009f96 <_dtoa_r+0xa5e>
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 f927 	bl	800a134 <_Balloc>
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	b928      	cbnz	r0, 8009ef6 <_dtoa_r+0x9be>
 8009eea:	4b87      	ldr	r3, [pc, #540]	; (800a108 <_dtoa_r+0xbd0>)
 8009eec:	4602      	mov	r2, r0
 8009eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ef2:	f7ff bb3b 	b.w	800956c <_dtoa_r+0x34>
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	3202      	adds	r2, #2
 8009efa:	0092      	lsls	r2, r2, #2
 8009efc:	f107 010c 	add.w	r1, r7, #12
 8009f00:	300c      	adds	r0, #12
 8009f02:	f7fe fcfd 	bl	8008900 <memcpy>
 8009f06:	2201      	movs	r2, #1
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 fb24 	bl	800a558 <__lshift>
 8009f10:	9b01      	ldr	r3, [sp, #4]
 8009f12:	f103 0901 	add.w	r9, r3, #1
 8009f16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	9305      	str	r3, [sp, #20]
 8009f1e:	f00a 0301 	and.w	r3, sl, #1
 8009f22:	46b8      	mov	r8, r7
 8009f24:	9304      	str	r3, [sp, #16]
 8009f26:	4607      	mov	r7, r0
 8009f28:	4631      	mov	r1, r6
 8009f2a:	ee18 0a10 	vmov	r0, s16
 8009f2e:	f7ff fa77 	bl	8009420 <quorem>
 8009f32:	4641      	mov	r1, r8
 8009f34:	9002      	str	r0, [sp, #8]
 8009f36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f3a:	ee18 0a10 	vmov	r0, s16
 8009f3e:	f000 fb7b 	bl	800a638 <__mcmp>
 8009f42:	463a      	mov	r2, r7
 8009f44:	9003      	str	r0, [sp, #12]
 8009f46:	4631      	mov	r1, r6
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 fb91 	bl	800a670 <__mdiff>
 8009f4e:	68c2      	ldr	r2, [r0, #12]
 8009f50:	f109 3bff 	add.w	fp, r9, #4294967295
 8009f54:	4605      	mov	r5, r0
 8009f56:	bb02      	cbnz	r2, 8009f9a <_dtoa_r+0xa62>
 8009f58:	4601      	mov	r1, r0
 8009f5a:	ee18 0a10 	vmov	r0, s16
 8009f5e:	f000 fb6b 	bl	800a638 <__mcmp>
 8009f62:	4602      	mov	r2, r0
 8009f64:	4629      	mov	r1, r5
 8009f66:	4620      	mov	r0, r4
 8009f68:	9207      	str	r2, [sp, #28]
 8009f6a:	f000 f923 	bl	800a1b4 <_Bfree>
 8009f6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009f72:	ea43 0102 	orr.w	r1, r3, r2
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	464d      	mov	r5, r9
 8009f7c:	d10f      	bne.n	8009f9e <_dtoa_r+0xa66>
 8009f7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f82:	d02a      	beq.n	8009fda <_dtoa_r+0xaa2>
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd02      	ble.n	8009f90 <_dtoa_r+0xa58>
 8009f8a:	9b02      	ldr	r3, [sp, #8]
 8009f8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009f90:	f88b a000 	strb.w	sl, [fp]
 8009f94:	e775      	b.n	8009e82 <_dtoa_r+0x94a>
 8009f96:	4638      	mov	r0, r7
 8009f98:	e7ba      	b.n	8009f10 <_dtoa_r+0x9d8>
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	e7e2      	b.n	8009f64 <_dtoa_r+0xa2c>
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	db04      	blt.n	8009fae <_dtoa_r+0xa76>
 8009fa4:	9906      	ldr	r1, [sp, #24]
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	9904      	ldr	r1, [sp, #16]
 8009faa:	430b      	orrs	r3, r1
 8009fac:	d122      	bne.n	8009ff4 <_dtoa_r+0xabc>
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	ddee      	ble.n	8009f90 <_dtoa_r+0xa58>
 8009fb2:	ee18 1a10 	vmov	r1, s16
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f000 facd 	bl	800a558 <__lshift>
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	ee08 0a10 	vmov	s16, r0
 8009fc4:	f000 fb38 	bl	800a638 <__mcmp>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	dc03      	bgt.n	8009fd4 <_dtoa_r+0xa9c>
 8009fcc:	d1e0      	bne.n	8009f90 <_dtoa_r+0xa58>
 8009fce:	f01a 0f01 	tst.w	sl, #1
 8009fd2:	d0dd      	beq.n	8009f90 <_dtoa_r+0xa58>
 8009fd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009fd8:	d1d7      	bne.n	8009f8a <_dtoa_r+0xa52>
 8009fda:	2339      	movs	r3, #57	; 0x39
 8009fdc:	f88b 3000 	strb.w	r3, [fp]
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	461d      	mov	r5, r3
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fea:	2a39      	cmp	r2, #57	; 0x39
 8009fec:	d071      	beq.n	800a0d2 <_dtoa_r+0xb9a>
 8009fee:	3201      	adds	r2, #1
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	e746      	b.n	8009e82 <_dtoa_r+0x94a>
 8009ff4:	2a00      	cmp	r2, #0
 8009ff6:	dd07      	ble.n	800a008 <_dtoa_r+0xad0>
 8009ff8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ffc:	d0ed      	beq.n	8009fda <_dtoa_r+0xaa2>
 8009ffe:	f10a 0301 	add.w	r3, sl, #1
 800a002:	f88b 3000 	strb.w	r3, [fp]
 800a006:	e73c      	b.n	8009e82 <_dtoa_r+0x94a>
 800a008:	9b05      	ldr	r3, [sp, #20]
 800a00a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a00e:	4599      	cmp	r9, r3
 800a010:	d047      	beq.n	800a0a2 <_dtoa_r+0xb6a>
 800a012:	ee18 1a10 	vmov	r1, s16
 800a016:	2300      	movs	r3, #0
 800a018:	220a      	movs	r2, #10
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 f8ec 	bl	800a1f8 <__multadd>
 800a020:	45b8      	cmp	r8, r7
 800a022:	ee08 0a10 	vmov	s16, r0
 800a026:	f04f 0300 	mov.w	r3, #0
 800a02a:	f04f 020a 	mov.w	r2, #10
 800a02e:	4641      	mov	r1, r8
 800a030:	4620      	mov	r0, r4
 800a032:	d106      	bne.n	800a042 <_dtoa_r+0xb0a>
 800a034:	f000 f8e0 	bl	800a1f8 <__multadd>
 800a038:	4680      	mov	r8, r0
 800a03a:	4607      	mov	r7, r0
 800a03c:	f109 0901 	add.w	r9, r9, #1
 800a040:	e772      	b.n	8009f28 <_dtoa_r+0x9f0>
 800a042:	f000 f8d9 	bl	800a1f8 <__multadd>
 800a046:	4639      	mov	r1, r7
 800a048:	4680      	mov	r8, r0
 800a04a:	2300      	movs	r3, #0
 800a04c:	220a      	movs	r2, #10
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 f8d2 	bl	800a1f8 <__multadd>
 800a054:	4607      	mov	r7, r0
 800a056:	e7f1      	b.n	800a03c <_dtoa_r+0xb04>
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	9302      	str	r3, [sp, #8]
 800a05c:	9d01      	ldr	r5, [sp, #4]
 800a05e:	ee18 0a10 	vmov	r0, s16
 800a062:	4631      	mov	r1, r6
 800a064:	f7ff f9dc 	bl	8009420 <quorem>
 800a068:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a06c:	9b01      	ldr	r3, [sp, #4]
 800a06e:	f805 ab01 	strb.w	sl, [r5], #1
 800a072:	1aea      	subs	r2, r5, r3
 800a074:	9b02      	ldr	r3, [sp, #8]
 800a076:	4293      	cmp	r3, r2
 800a078:	dd09      	ble.n	800a08e <_dtoa_r+0xb56>
 800a07a:	ee18 1a10 	vmov	r1, s16
 800a07e:	2300      	movs	r3, #0
 800a080:	220a      	movs	r2, #10
 800a082:	4620      	mov	r0, r4
 800a084:	f000 f8b8 	bl	800a1f8 <__multadd>
 800a088:	ee08 0a10 	vmov	s16, r0
 800a08c:	e7e7      	b.n	800a05e <_dtoa_r+0xb26>
 800a08e:	9b02      	ldr	r3, [sp, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	bfc8      	it	gt
 800a094:	461d      	movgt	r5, r3
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	bfd8      	it	le
 800a09a:	2501      	movle	r5, #1
 800a09c:	441d      	add	r5, r3
 800a09e:	f04f 0800 	mov.w	r8, #0
 800a0a2:	ee18 1a10 	vmov	r1, s16
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 fa55 	bl	800a558 <__lshift>
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	ee08 0a10 	vmov	s16, r0
 800a0b4:	f000 fac0 	bl	800a638 <__mcmp>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	dc91      	bgt.n	8009fe0 <_dtoa_r+0xaa8>
 800a0bc:	d102      	bne.n	800a0c4 <_dtoa_r+0xb8c>
 800a0be:	f01a 0f01 	tst.w	sl, #1
 800a0c2:	d18d      	bne.n	8009fe0 <_dtoa_r+0xaa8>
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	461d      	mov	r5, r3
 800a0c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0cc:	2a30      	cmp	r2, #48	; 0x30
 800a0ce:	d0fa      	beq.n	800a0c6 <_dtoa_r+0xb8e>
 800a0d0:	e6d7      	b.n	8009e82 <_dtoa_r+0x94a>
 800a0d2:	9a01      	ldr	r2, [sp, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d184      	bne.n	8009fe2 <_dtoa_r+0xaaa>
 800a0d8:	9b00      	ldr	r3, [sp, #0]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	2331      	movs	r3, #49	; 0x31
 800a0e0:	7013      	strb	r3, [r2, #0]
 800a0e2:	e6ce      	b.n	8009e82 <_dtoa_r+0x94a>
 800a0e4:	4b09      	ldr	r3, [pc, #36]	; (800a10c <_dtoa_r+0xbd4>)
 800a0e6:	f7ff ba95 	b.w	8009614 <_dtoa_r+0xdc>
 800a0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f47f aa6e 	bne.w	80095ce <_dtoa_r+0x96>
 800a0f2:	4b07      	ldr	r3, [pc, #28]	; (800a110 <_dtoa_r+0xbd8>)
 800a0f4:	f7ff ba8e 	b.w	8009614 <_dtoa_r+0xdc>
 800a0f8:	9b02      	ldr	r3, [sp, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	dcae      	bgt.n	800a05c <_dtoa_r+0xb24>
 800a0fe:	9b06      	ldr	r3, [sp, #24]
 800a100:	2b02      	cmp	r3, #2
 800a102:	f73f aea8 	bgt.w	8009e56 <_dtoa_r+0x91e>
 800a106:	e7a9      	b.n	800a05c <_dtoa_r+0xb24>
 800a108:	080151b3 	.word	0x080151b3
 800a10c:	08015110 	.word	0x08015110
 800a110:	08015134 	.word	0x08015134

0800a114 <_localeconv_r>:
 800a114:	4800      	ldr	r0, [pc, #0]	; (800a118 <_localeconv_r+0x4>)
 800a116:	4770      	bx	lr
 800a118:	200007f4 	.word	0x200007f4

0800a11c <__malloc_lock>:
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__malloc_lock+0x8>)
 800a11e:	f000 bd5e 	b.w	800abde <__retarget_lock_acquire_recursive>
 800a122:	bf00      	nop
 800a124:	20024780 	.word	0x20024780

0800a128 <__malloc_unlock>:
 800a128:	4801      	ldr	r0, [pc, #4]	; (800a130 <__malloc_unlock+0x8>)
 800a12a:	f000 bd59 	b.w	800abe0 <__retarget_lock_release_recursive>
 800a12e:	bf00      	nop
 800a130:	20024780 	.word	0x20024780

0800a134 <_Balloc>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a138:	4604      	mov	r4, r0
 800a13a:	460d      	mov	r5, r1
 800a13c:	b976      	cbnz	r6, 800a15c <_Balloc+0x28>
 800a13e:	2010      	movs	r0, #16
 800a140:	f7fe fbd6 	bl	80088f0 <malloc>
 800a144:	4602      	mov	r2, r0
 800a146:	6260      	str	r0, [r4, #36]	; 0x24
 800a148:	b920      	cbnz	r0, 800a154 <_Balloc+0x20>
 800a14a:	4b18      	ldr	r3, [pc, #96]	; (800a1ac <_Balloc+0x78>)
 800a14c:	4818      	ldr	r0, [pc, #96]	; (800a1b0 <_Balloc+0x7c>)
 800a14e:	2166      	movs	r1, #102	; 0x66
 800a150:	f000 fd14 	bl	800ab7c <__assert_func>
 800a154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a158:	6006      	str	r6, [r0, #0]
 800a15a:	60c6      	str	r6, [r0, #12]
 800a15c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a15e:	68f3      	ldr	r3, [r6, #12]
 800a160:	b183      	cbz	r3, 800a184 <_Balloc+0x50>
 800a162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a16a:	b9b8      	cbnz	r0, 800a19c <_Balloc+0x68>
 800a16c:	2101      	movs	r1, #1
 800a16e:	fa01 f605 	lsl.w	r6, r1, r5
 800a172:	1d72      	adds	r2, r6, #5
 800a174:	0092      	lsls	r2, r2, #2
 800a176:	4620      	mov	r0, r4
 800a178:	f000 fb60 	bl	800a83c <_calloc_r>
 800a17c:	b160      	cbz	r0, 800a198 <_Balloc+0x64>
 800a17e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a182:	e00e      	b.n	800a1a2 <_Balloc+0x6e>
 800a184:	2221      	movs	r2, #33	; 0x21
 800a186:	2104      	movs	r1, #4
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fb57 	bl	800a83c <_calloc_r>
 800a18e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a190:	60f0      	str	r0, [r6, #12]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e4      	bne.n	800a162 <_Balloc+0x2e>
 800a198:	2000      	movs	r0, #0
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	6802      	ldr	r2, [r0, #0]
 800a19e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1a8:	e7f7      	b.n	800a19a <_Balloc+0x66>
 800a1aa:	bf00      	nop
 800a1ac:	08015141 	.word	0x08015141
 800a1b0:	080151c4 	.word	0x080151c4

0800a1b4 <_Bfree>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	b976      	cbnz	r6, 800a1dc <_Bfree+0x28>
 800a1be:	2010      	movs	r0, #16
 800a1c0:	f7fe fb96 	bl	80088f0 <malloc>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6268      	str	r0, [r5, #36]	; 0x24
 800a1c8:	b920      	cbnz	r0, 800a1d4 <_Bfree+0x20>
 800a1ca:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <_Bfree+0x3c>)
 800a1cc:	4809      	ldr	r0, [pc, #36]	; (800a1f4 <_Bfree+0x40>)
 800a1ce:	218a      	movs	r1, #138	; 0x8a
 800a1d0:	f000 fcd4 	bl	800ab7c <__assert_func>
 800a1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1d8:	6006      	str	r6, [r0, #0]
 800a1da:	60c6      	str	r6, [r0, #12]
 800a1dc:	b13c      	cbz	r4, 800a1ee <_Bfree+0x3a>
 800a1de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1e0:	6862      	ldr	r2, [r4, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1e8:	6021      	str	r1, [r4, #0]
 800a1ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	08015141 	.word	0x08015141
 800a1f4:	080151c4 	.word	0x080151c4

0800a1f8 <__multadd>:
 800a1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fc:	690d      	ldr	r5, [r1, #16]
 800a1fe:	4607      	mov	r7, r0
 800a200:	460c      	mov	r4, r1
 800a202:	461e      	mov	r6, r3
 800a204:	f101 0c14 	add.w	ip, r1, #20
 800a208:	2000      	movs	r0, #0
 800a20a:	f8dc 3000 	ldr.w	r3, [ip]
 800a20e:	b299      	uxth	r1, r3
 800a210:	fb02 6101 	mla	r1, r2, r1, r6
 800a214:	0c1e      	lsrs	r6, r3, #16
 800a216:	0c0b      	lsrs	r3, r1, #16
 800a218:	fb02 3306 	mla	r3, r2, r6, r3
 800a21c:	b289      	uxth	r1, r1
 800a21e:	3001      	adds	r0, #1
 800a220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a224:	4285      	cmp	r5, r0
 800a226:	f84c 1b04 	str.w	r1, [ip], #4
 800a22a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a22e:	dcec      	bgt.n	800a20a <__multadd+0x12>
 800a230:	b30e      	cbz	r6, 800a276 <__multadd+0x7e>
 800a232:	68a3      	ldr	r3, [r4, #8]
 800a234:	42ab      	cmp	r3, r5
 800a236:	dc19      	bgt.n	800a26c <__multadd+0x74>
 800a238:	6861      	ldr	r1, [r4, #4]
 800a23a:	4638      	mov	r0, r7
 800a23c:	3101      	adds	r1, #1
 800a23e:	f7ff ff79 	bl	800a134 <_Balloc>
 800a242:	4680      	mov	r8, r0
 800a244:	b928      	cbnz	r0, 800a252 <__multadd+0x5a>
 800a246:	4602      	mov	r2, r0
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <__multadd+0x84>)
 800a24a:	480d      	ldr	r0, [pc, #52]	; (800a280 <__multadd+0x88>)
 800a24c:	21b5      	movs	r1, #181	; 0xb5
 800a24e:	f000 fc95 	bl	800ab7c <__assert_func>
 800a252:	6922      	ldr	r2, [r4, #16]
 800a254:	3202      	adds	r2, #2
 800a256:	f104 010c 	add.w	r1, r4, #12
 800a25a:	0092      	lsls	r2, r2, #2
 800a25c:	300c      	adds	r0, #12
 800a25e:	f7fe fb4f 	bl	8008900 <memcpy>
 800a262:	4621      	mov	r1, r4
 800a264:	4638      	mov	r0, r7
 800a266:	f7ff ffa5 	bl	800a1b4 <_Bfree>
 800a26a:	4644      	mov	r4, r8
 800a26c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a270:	3501      	adds	r5, #1
 800a272:	615e      	str	r6, [r3, #20]
 800a274:	6125      	str	r5, [r4, #16]
 800a276:	4620      	mov	r0, r4
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27c:	080151b3 	.word	0x080151b3
 800a280:	080151c4 	.word	0x080151c4

0800a284 <__hi0bits>:
 800a284:	0c03      	lsrs	r3, r0, #16
 800a286:	041b      	lsls	r3, r3, #16
 800a288:	b9d3      	cbnz	r3, 800a2c0 <__hi0bits+0x3c>
 800a28a:	0400      	lsls	r0, r0, #16
 800a28c:	2310      	movs	r3, #16
 800a28e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a292:	bf04      	itt	eq
 800a294:	0200      	lsleq	r0, r0, #8
 800a296:	3308      	addeq	r3, #8
 800a298:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a29c:	bf04      	itt	eq
 800a29e:	0100      	lsleq	r0, r0, #4
 800a2a0:	3304      	addeq	r3, #4
 800a2a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2a6:	bf04      	itt	eq
 800a2a8:	0080      	lsleq	r0, r0, #2
 800a2aa:	3302      	addeq	r3, #2
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	db05      	blt.n	800a2bc <__hi0bits+0x38>
 800a2b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2b4:	f103 0301 	add.w	r3, r3, #1
 800a2b8:	bf08      	it	eq
 800a2ba:	2320      	moveq	r3, #32
 800a2bc:	4618      	mov	r0, r3
 800a2be:	4770      	bx	lr
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e7e4      	b.n	800a28e <__hi0bits+0xa>

0800a2c4 <__lo0bits>:
 800a2c4:	6803      	ldr	r3, [r0, #0]
 800a2c6:	f013 0207 	ands.w	r2, r3, #7
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	d00b      	beq.n	800a2e6 <__lo0bits+0x22>
 800a2ce:	07da      	lsls	r2, r3, #31
 800a2d0:	d423      	bmi.n	800a31a <__lo0bits+0x56>
 800a2d2:	0798      	lsls	r0, r3, #30
 800a2d4:	bf49      	itett	mi
 800a2d6:	085b      	lsrmi	r3, r3, #1
 800a2d8:	089b      	lsrpl	r3, r3, #2
 800a2da:	2001      	movmi	r0, #1
 800a2dc:	600b      	strmi	r3, [r1, #0]
 800a2de:	bf5c      	itt	pl
 800a2e0:	600b      	strpl	r3, [r1, #0]
 800a2e2:	2002      	movpl	r0, #2
 800a2e4:	4770      	bx	lr
 800a2e6:	b298      	uxth	r0, r3
 800a2e8:	b9a8      	cbnz	r0, 800a316 <__lo0bits+0x52>
 800a2ea:	0c1b      	lsrs	r3, r3, #16
 800a2ec:	2010      	movs	r0, #16
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	b90a      	cbnz	r2, 800a2f6 <__lo0bits+0x32>
 800a2f2:	3008      	adds	r0, #8
 800a2f4:	0a1b      	lsrs	r3, r3, #8
 800a2f6:	071a      	lsls	r2, r3, #28
 800a2f8:	bf04      	itt	eq
 800a2fa:	091b      	lsreq	r3, r3, #4
 800a2fc:	3004      	addeq	r0, #4
 800a2fe:	079a      	lsls	r2, r3, #30
 800a300:	bf04      	itt	eq
 800a302:	089b      	lsreq	r3, r3, #2
 800a304:	3002      	addeq	r0, #2
 800a306:	07da      	lsls	r2, r3, #31
 800a308:	d403      	bmi.n	800a312 <__lo0bits+0x4e>
 800a30a:	085b      	lsrs	r3, r3, #1
 800a30c:	f100 0001 	add.w	r0, r0, #1
 800a310:	d005      	beq.n	800a31e <__lo0bits+0x5a>
 800a312:	600b      	str	r3, [r1, #0]
 800a314:	4770      	bx	lr
 800a316:	4610      	mov	r0, r2
 800a318:	e7e9      	b.n	800a2ee <__lo0bits+0x2a>
 800a31a:	2000      	movs	r0, #0
 800a31c:	4770      	bx	lr
 800a31e:	2020      	movs	r0, #32
 800a320:	4770      	bx	lr
	...

0800a324 <__i2b>:
 800a324:	b510      	push	{r4, lr}
 800a326:	460c      	mov	r4, r1
 800a328:	2101      	movs	r1, #1
 800a32a:	f7ff ff03 	bl	800a134 <_Balloc>
 800a32e:	4602      	mov	r2, r0
 800a330:	b928      	cbnz	r0, 800a33e <__i2b+0x1a>
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <__i2b+0x24>)
 800a334:	4805      	ldr	r0, [pc, #20]	; (800a34c <__i2b+0x28>)
 800a336:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a33a:	f000 fc1f 	bl	800ab7c <__assert_func>
 800a33e:	2301      	movs	r3, #1
 800a340:	6144      	str	r4, [r0, #20]
 800a342:	6103      	str	r3, [r0, #16]
 800a344:	bd10      	pop	{r4, pc}
 800a346:	bf00      	nop
 800a348:	080151b3 	.word	0x080151b3
 800a34c:	080151c4 	.word	0x080151c4

0800a350 <__multiply>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	4691      	mov	r9, r2
 800a356:	690a      	ldr	r2, [r1, #16]
 800a358:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	bfb8      	it	lt
 800a360:	460b      	movlt	r3, r1
 800a362:	460c      	mov	r4, r1
 800a364:	bfbc      	itt	lt
 800a366:	464c      	movlt	r4, r9
 800a368:	4699      	movlt	r9, r3
 800a36a:	6927      	ldr	r7, [r4, #16]
 800a36c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a370:	68a3      	ldr	r3, [r4, #8]
 800a372:	6861      	ldr	r1, [r4, #4]
 800a374:	eb07 060a 	add.w	r6, r7, sl
 800a378:	42b3      	cmp	r3, r6
 800a37a:	b085      	sub	sp, #20
 800a37c:	bfb8      	it	lt
 800a37e:	3101      	addlt	r1, #1
 800a380:	f7ff fed8 	bl	800a134 <_Balloc>
 800a384:	b930      	cbnz	r0, 800a394 <__multiply+0x44>
 800a386:	4602      	mov	r2, r0
 800a388:	4b44      	ldr	r3, [pc, #272]	; (800a49c <__multiply+0x14c>)
 800a38a:	4845      	ldr	r0, [pc, #276]	; (800a4a0 <__multiply+0x150>)
 800a38c:	f240 115d 	movw	r1, #349	; 0x15d
 800a390:	f000 fbf4 	bl	800ab7c <__assert_func>
 800a394:	f100 0514 	add.w	r5, r0, #20
 800a398:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a39c:	462b      	mov	r3, r5
 800a39e:	2200      	movs	r2, #0
 800a3a0:	4543      	cmp	r3, r8
 800a3a2:	d321      	bcc.n	800a3e8 <__multiply+0x98>
 800a3a4:	f104 0314 	add.w	r3, r4, #20
 800a3a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3ac:	f109 0314 	add.w	r3, r9, #20
 800a3b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3b4:	9202      	str	r2, [sp, #8]
 800a3b6:	1b3a      	subs	r2, r7, r4
 800a3b8:	3a15      	subs	r2, #21
 800a3ba:	f022 0203 	bic.w	r2, r2, #3
 800a3be:	3204      	adds	r2, #4
 800a3c0:	f104 0115 	add.w	r1, r4, #21
 800a3c4:	428f      	cmp	r7, r1
 800a3c6:	bf38      	it	cc
 800a3c8:	2204      	movcc	r2, #4
 800a3ca:	9201      	str	r2, [sp, #4]
 800a3cc:	9a02      	ldr	r2, [sp, #8]
 800a3ce:	9303      	str	r3, [sp, #12]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d80c      	bhi.n	800a3ee <__multiply+0x9e>
 800a3d4:	2e00      	cmp	r6, #0
 800a3d6:	dd03      	ble.n	800a3e0 <__multiply+0x90>
 800a3d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d05a      	beq.n	800a496 <__multiply+0x146>
 800a3e0:	6106      	str	r6, [r0, #16]
 800a3e2:	b005      	add	sp, #20
 800a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e8:	f843 2b04 	str.w	r2, [r3], #4
 800a3ec:	e7d8      	b.n	800a3a0 <__multiply+0x50>
 800a3ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3f2:	f1ba 0f00 	cmp.w	sl, #0
 800a3f6:	d024      	beq.n	800a442 <__multiply+0xf2>
 800a3f8:	f104 0e14 	add.w	lr, r4, #20
 800a3fc:	46a9      	mov	r9, r5
 800a3fe:	f04f 0c00 	mov.w	ip, #0
 800a402:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a406:	f8d9 1000 	ldr.w	r1, [r9]
 800a40a:	fa1f fb82 	uxth.w	fp, r2
 800a40e:	b289      	uxth	r1, r1
 800a410:	fb0a 110b 	mla	r1, sl, fp, r1
 800a414:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a418:	f8d9 2000 	ldr.w	r2, [r9]
 800a41c:	4461      	add	r1, ip
 800a41e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a422:	fb0a c20b 	mla	r2, sl, fp, ip
 800a426:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a42a:	b289      	uxth	r1, r1
 800a42c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a430:	4577      	cmp	r7, lr
 800a432:	f849 1b04 	str.w	r1, [r9], #4
 800a436:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a43a:	d8e2      	bhi.n	800a402 <__multiply+0xb2>
 800a43c:	9a01      	ldr	r2, [sp, #4]
 800a43e:	f845 c002 	str.w	ip, [r5, r2]
 800a442:	9a03      	ldr	r2, [sp, #12]
 800a444:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a448:	3304      	adds	r3, #4
 800a44a:	f1b9 0f00 	cmp.w	r9, #0
 800a44e:	d020      	beq.n	800a492 <__multiply+0x142>
 800a450:	6829      	ldr	r1, [r5, #0]
 800a452:	f104 0c14 	add.w	ip, r4, #20
 800a456:	46ae      	mov	lr, r5
 800a458:	f04f 0a00 	mov.w	sl, #0
 800a45c:	f8bc b000 	ldrh.w	fp, [ip]
 800a460:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a464:	fb09 220b 	mla	r2, r9, fp, r2
 800a468:	4492      	add	sl, r2
 800a46a:	b289      	uxth	r1, r1
 800a46c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a470:	f84e 1b04 	str.w	r1, [lr], #4
 800a474:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a478:	f8be 1000 	ldrh.w	r1, [lr]
 800a47c:	0c12      	lsrs	r2, r2, #16
 800a47e:	fb09 1102 	mla	r1, r9, r2, r1
 800a482:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a486:	4567      	cmp	r7, ip
 800a488:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a48c:	d8e6      	bhi.n	800a45c <__multiply+0x10c>
 800a48e:	9a01      	ldr	r2, [sp, #4]
 800a490:	50a9      	str	r1, [r5, r2]
 800a492:	3504      	adds	r5, #4
 800a494:	e79a      	b.n	800a3cc <__multiply+0x7c>
 800a496:	3e01      	subs	r6, #1
 800a498:	e79c      	b.n	800a3d4 <__multiply+0x84>
 800a49a:	bf00      	nop
 800a49c:	080151b3 	.word	0x080151b3
 800a4a0:	080151c4 	.word	0x080151c4

0800a4a4 <__pow5mult>:
 800a4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4a8:	4615      	mov	r5, r2
 800a4aa:	f012 0203 	ands.w	r2, r2, #3
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460f      	mov	r7, r1
 800a4b2:	d007      	beq.n	800a4c4 <__pow5mult+0x20>
 800a4b4:	4c25      	ldr	r4, [pc, #148]	; (800a54c <__pow5mult+0xa8>)
 800a4b6:	3a01      	subs	r2, #1
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4be:	f7ff fe9b 	bl	800a1f8 <__multadd>
 800a4c2:	4607      	mov	r7, r0
 800a4c4:	10ad      	asrs	r5, r5, #2
 800a4c6:	d03d      	beq.n	800a544 <__pow5mult+0xa0>
 800a4c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4ca:	b97c      	cbnz	r4, 800a4ec <__pow5mult+0x48>
 800a4cc:	2010      	movs	r0, #16
 800a4ce:	f7fe fa0f 	bl	80088f0 <malloc>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	6270      	str	r0, [r6, #36]	; 0x24
 800a4d6:	b928      	cbnz	r0, 800a4e4 <__pow5mult+0x40>
 800a4d8:	4b1d      	ldr	r3, [pc, #116]	; (800a550 <__pow5mult+0xac>)
 800a4da:	481e      	ldr	r0, [pc, #120]	; (800a554 <__pow5mult+0xb0>)
 800a4dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4e0:	f000 fb4c 	bl	800ab7c <__assert_func>
 800a4e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4e8:	6004      	str	r4, [r0, #0]
 800a4ea:	60c4      	str	r4, [r0, #12]
 800a4ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4f4:	b94c      	cbnz	r4, 800a50a <__pow5mult+0x66>
 800a4f6:	f240 2171 	movw	r1, #625	; 0x271
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f7ff ff12 	bl	800a324 <__i2b>
 800a500:	2300      	movs	r3, #0
 800a502:	f8c8 0008 	str.w	r0, [r8, #8]
 800a506:	4604      	mov	r4, r0
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	f04f 0900 	mov.w	r9, #0
 800a50e:	07eb      	lsls	r3, r5, #31
 800a510:	d50a      	bpl.n	800a528 <__pow5mult+0x84>
 800a512:	4639      	mov	r1, r7
 800a514:	4622      	mov	r2, r4
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ff1a 	bl	800a350 <__multiply>
 800a51c:	4639      	mov	r1, r7
 800a51e:	4680      	mov	r8, r0
 800a520:	4630      	mov	r0, r6
 800a522:	f7ff fe47 	bl	800a1b4 <_Bfree>
 800a526:	4647      	mov	r7, r8
 800a528:	106d      	asrs	r5, r5, #1
 800a52a:	d00b      	beq.n	800a544 <__pow5mult+0xa0>
 800a52c:	6820      	ldr	r0, [r4, #0]
 800a52e:	b938      	cbnz	r0, 800a540 <__pow5mult+0x9c>
 800a530:	4622      	mov	r2, r4
 800a532:	4621      	mov	r1, r4
 800a534:	4630      	mov	r0, r6
 800a536:	f7ff ff0b 	bl	800a350 <__multiply>
 800a53a:	6020      	str	r0, [r4, #0]
 800a53c:	f8c0 9000 	str.w	r9, [r0]
 800a540:	4604      	mov	r4, r0
 800a542:	e7e4      	b.n	800a50e <__pow5mult+0x6a>
 800a544:	4638      	mov	r0, r7
 800a546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a54a:	bf00      	nop
 800a54c:	08015310 	.word	0x08015310
 800a550:	08015141 	.word	0x08015141
 800a554:	080151c4 	.word	0x080151c4

0800a558 <__lshift>:
 800a558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a55c:	460c      	mov	r4, r1
 800a55e:	6849      	ldr	r1, [r1, #4]
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a566:	68a3      	ldr	r3, [r4, #8]
 800a568:	4607      	mov	r7, r0
 800a56a:	4691      	mov	r9, r2
 800a56c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a570:	f108 0601 	add.w	r6, r8, #1
 800a574:	42b3      	cmp	r3, r6
 800a576:	db0b      	blt.n	800a590 <__lshift+0x38>
 800a578:	4638      	mov	r0, r7
 800a57a:	f7ff fddb 	bl	800a134 <_Balloc>
 800a57e:	4605      	mov	r5, r0
 800a580:	b948      	cbnz	r0, 800a596 <__lshift+0x3e>
 800a582:	4602      	mov	r2, r0
 800a584:	4b2a      	ldr	r3, [pc, #168]	; (800a630 <__lshift+0xd8>)
 800a586:	482b      	ldr	r0, [pc, #172]	; (800a634 <__lshift+0xdc>)
 800a588:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a58c:	f000 faf6 	bl	800ab7c <__assert_func>
 800a590:	3101      	adds	r1, #1
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	e7ee      	b.n	800a574 <__lshift+0x1c>
 800a596:	2300      	movs	r3, #0
 800a598:	f100 0114 	add.w	r1, r0, #20
 800a59c:	f100 0210 	add.w	r2, r0, #16
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	4553      	cmp	r3, sl
 800a5a4:	db37      	blt.n	800a616 <__lshift+0xbe>
 800a5a6:	6920      	ldr	r0, [r4, #16]
 800a5a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5ac:	f104 0314 	add.w	r3, r4, #20
 800a5b0:	f019 091f 	ands.w	r9, r9, #31
 800a5b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5bc:	d02f      	beq.n	800a61e <__lshift+0xc6>
 800a5be:	f1c9 0e20 	rsb	lr, r9, #32
 800a5c2:	468a      	mov	sl, r1
 800a5c4:	f04f 0c00 	mov.w	ip, #0
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	fa02 f209 	lsl.w	r2, r2, r9
 800a5ce:	ea42 020c 	orr.w	r2, r2, ip
 800a5d2:	f84a 2b04 	str.w	r2, [sl], #4
 800a5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5da:	4298      	cmp	r0, r3
 800a5dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a5e0:	d8f2      	bhi.n	800a5c8 <__lshift+0x70>
 800a5e2:	1b03      	subs	r3, r0, r4
 800a5e4:	3b15      	subs	r3, #21
 800a5e6:	f023 0303 	bic.w	r3, r3, #3
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	f104 0215 	add.w	r2, r4, #21
 800a5f0:	4290      	cmp	r0, r2
 800a5f2:	bf38      	it	cc
 800a5f4:	2304      	movcc	r3, #4
 800a5f6:	f841 c003 	str.w	ip, [r1, r3]
 800a5fa:	f1bc 0f00 	cmp.w	ip, #0
 800a5fe:	d001      	beq.n	800a604 <__lshift+0xac>
 800a600:	f108 0602 	add.w	r6, r8, #2
 800a604:	3e01      	subs	r6, #1
 800a606:	4638      	mov	r0, r7
 800a608:	612e      	str	r6, [r5, #16]
 800a60a:	4621      	mov	r1, r4
 800a60c:	f7ff fdd2 	bl	800a1b4 <_Bfree>
 800a610:	4628      	mov	r0, r5
 800a612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a616:	f842 0f04 	str.w	r0, [r2, #4]!
 800a61a:	3301      	adds	r3, #1
 800a61c:	e7c1      	b.n	800a5a2 <__lshift+0x4a>
 800a61e:	3904      	subs	r1, #4
 800a620:	f853 2b04 	ldr.w	r2, [r3], #4
 800a624:	f841 2f04 	str.w	r2, [r1, #4]!
 800a628:	4298      	cmp	r0, r3
 800a62a:	d8f9      	bhi.n	800a620 <__lshift+0xc8>
 800a62c:	e7ea      	b.n	800a604 <__lshift+0xac>
 800a62e:	bf00      	nop
 800a630:	080151b3 	.word	0x080151b3
 800a634:	080151c4 	.word	0x080151c4

0800a638 <__mcmp>:
 800a638:	b530      	push	{r4, r5, lr}
 800a63a:	6902      	ldr	r2, [r0, #16]
 800a63c:	690c      	ldr	r4, [r1, #16]
 800a63e:	1b12      	subs	r2, r2, r4
 800a640:	d10e      	bne.n	800a660 <__mcmp+0x28>
 800a642:	f100 0314 	add.w	r3, r0, #20
 800a646:	3114      	adds	r1, #20
 800a648:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a64c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a650:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a654:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a658:	42a5      	cmp	r5, r4
 800a65a:	d003      	beq.n	800a664 <__mcmp+0x2c>
 800a65c:	d305      	bcc.n	800a66a <__mcmp+0x32>
 800a65e:	2201      	movs	r2, #1
 800a660:	4610      	mov	r0, r2
 800a662:	bd30      	pop	{r4, r5, pc}
 800a664:	4283      	cmp	r3, r0
 800a666:	d3f3      	bcc.n	800a650 <__mcmp+0x18>
 800a668:	e7fa      	b.n	800a660 <__mcmp+0x28>
 800a66a:	f04f 32ff 	mov.w	r2, #4294967295
 800a66e:	e7f7      	b.n	800a660 <__mcmp+0x28>

0800a670 <__mdiff>:
 800a670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	460c      	mov	r4, r1
 800a676:	4606      	mov	r6, r0
 800a678:	4611      	mov	r1, r2
 800a67a:	4620      	mov	r0, r4
 800a67c:	4690      	mov	r8, r2
 800a67e:	f7ff ffdb 	bl	800a638 <__mcmp>
 800a682:	1e05      	subs	r5, r0, #0
 800a684:	d110      	bne.n	800a6a8 <__mdiff+0x38>
 800a686:	4629      	mov	r1, r5
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff fd53 	bl	800a134 <_Balloc>
 800a68e:	b930      	cbnz	r0, 800a69e <__mdiff+0x2e>
 800a690:	4b3a      	ldr	r3, [pc, #232]	; (800a77c <__mdiff+0x10c>)
 800a692:	4602      	mov	r2, r0
 800a694:	f240 2132 	movw	r1, #562	; 0x232
 800a698:	4839      	ldr	r0, [pc, #228]	; (800a780 <__mdiff+0x110>)
 800a69a:	f000 fa6f 	bl	800ab7c <__assert_func>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a8:	bfa4      	itt	ge
 800a6aa:	4643      	movge	r3, r8
 800a6ac:	46a0      	movge	r8, r4
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6b4:	bfa6      	itte	ge
 800a6b6:	461c      	movge	r4, r3
 800a6b8:	2500      	movge	r5, #0
 800a6ba:	2501      	movlt	r5, #1
 800a6bc:	f7ff fd3a 	bl	800a134 <_Balloc>
 800a6c0:	b920      	cbnz	r0, 800a6cc <__mdiff+0x5c>
 800a6c2:	4b2e      	ldr	r3, [pc, #184]	; (800a77c <__mdiff+0x10c>)
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6ca:	e7e5      	b.n	800a698 <__mdiff+0x28>
 800a6cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6d0:	6926      	ldr	r6, [r4, #16]
 800a6d2:	60c5      	str	r5, [r0, #12]
 800a6d4:	f104 0914 	add.w	r9, r4, #20
 800a6d8:	f108 0514 	add.w	r5, r8, #20
 800a6dc:	f100 0e14 	add.w	lr, r0, #20
 800a6e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a6e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a6e8:	f108 0210 	add.w	r2, r8, #16
 800a6ec:	46f2      	mov	sl, lr
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6f8:	fa1f f883 	uxth.w	r8, r3
 800a6fc:	fa11 f18b 	uxtah	r1, r1, fp
 800a700:	0c1b      	lsrs	r3, r3, #16
 800a702:	eba1 0808 	sub.w	r8, r1, r8
 800a706:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a70a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a70e:	fa1f f888 	uxth.w	r8, r8
 800a712:	1419      	asrs	r1, r3, #16
 800a714:	454e      	cmp	r6, r9
 800a716:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a71a:	f84a 3b04 	str.w	r3, [sl], #4
 800a71e:	d8e7      	bhi.n	800a6f0 <__mdiff+0x80>
 800a720:	1b33      	subs	r3, r6, r4
 800a722:	3b15      	subs	r3, #21
 800a724:	f023 0303 	bic.w	r3, r3, #3
 800a728:	3304      	adds	r3, #4
 800a72a:	3415      	adds	r4, #21
 800a72c:	42a6      	cmp	r6, r4
 800a72e:	bf38      	it	cc
 800a730:	2304      	movcc	r3, #4
 800a732:	441d      	add	r5, r3
 800a734:	4473      	add	r3, lr
 800a736:	469e      	mov	lr, r3
 800a738:	462e      	mov	r6, r5
 800a73a:	4566      	cmp	r6, ip
 800a73c:	d30e      	bcc.n	800a75c <__mdiff+0xec>
 800a73e:	f10c 0203 	add.w	r2, ip, #3
 800a742:	1b52      	subs	r2, r2, r5
 800a744:	f022 0203 	bic.w	r2, r2, #3
 800a748:	3d03      	subs	r5, #3
 800a74a:	45ac      	cmp	ip, r5
 800a74c:	bf38      	it	cc
 800a74e:	2200      	movcc	r2, #0
 800a750:	441a      	add	r2, r3
 800a752:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a756:	b17b      	cbz	r3, 800a778 <__mdiff+0x108>
 800a758:	6107      	str	r7, [r0, #16]
 800a75a:	e7a3      	b.n	800a6a4 <__mdiff+0x34>
 800a75c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a760:	fa11 f288 	uxtah	r2, r1, r8
 800a764:	1414      	asrs	r4, r2, #16
 800a766:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a76a:	b292      	uxth	r2, r2
 800a76c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a770:	f84e 2b04 	str.w	r2, [lr], #4
 800a774:	1421      	asrs	r1, r4, #16
 800a776:	e7e0      	b.n	800a73a <__mdiff+0xca>
 800a778:	3f01      	subs	r7, #1
 800a77a:	e7ea      	b.n	800a752 <__mdiff+0xe2>
 800a77c:	080151b3 	.word	0x080151b3
 800a780:	080151c4 	.word	0x080151c4

0800a784 <__d2b>:
 800a784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a788:	4689      	mov	r9, r1
 800a78a:	2101      	movs	r1, #1
 800a78c:	ec57 6b10 	vmov	r6, r7, d0
 800a790:	4690      	mov	r8, r2
 800a792:	f7ff fccf 	bl	800a134 <_Balloc>
 800a796:	4604      	mov	r4, r0
 800a798:	b930      	cbnz	r0, 800a7a8 <__d2b+0x24>
 800a79a:	4602      	mov	r2, r0
 800a79c:	4b25      	ldr	r3, [pc, #148]	; (800a834 <__d2b+0xb0>)
 800a79e:	4826      	ldr	r0, [pc, #152]	; (800a838 <__d2b+0xb4>)
 800a7a0:	f240 310a 	movw	r1, #778	; 0x30a
 800a7a4:	f000 f9ea 	bl	800ab7c <__assert_func>
 800a7a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7b0:	bb35      	cbnz	r5, 800a800 <__d2b+0x7c>
 800a7b2:	2e00      	cmp	r6, #0
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	d028      	beq.n	800a80a <__d2b+0x86>
 800a7b8:	4668      	mov	r0, sp
 800a7ba:	9600      	str	r6, [sp, #0]
 800a7bc:	f7ff fd82 	bl	800a2c4 <__lo0bits>
 800a7c0:	9900      	ldr	r1, [sp, #0]
 800a7c2:	b300      	cbz	r0, 800a806 <__d2b+0x82>
 800a7c4:	9a01      	ldr	r2, [sp, #4]
 800a7c6:	f1c0 0320 	rsb	r3, r0, #32
 800a7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ce:	430b      	orrs	r3, r1
 800a7d0:	40c2      	lsrs	r2, r0
 800a7d2:	6163      	str	r3, [r4, #20]
 800a7d4:	9201      	str	r2, [sp, #4]
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	61a3      	str	r3, [r4, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	bf14      	ite	ne
 800a7de:	2202      	movne	r2, #2
 800a7e0:	2201      	moveq	r2, #1
 800a7e2:	6122      	str	r2, [r4, #16]
 800a7e4:	b1d5      	cbz	r5, 800a81c <__d2b+0x98>
 800a7e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7ea:	4405      	add	r5, r0
 800a7ec:	f8c9 5000 	str.w	r5, [r9]
 800a7f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7f4:	f8c8 0000 	str.w	r0, [r8]
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	b003      	add	sp, #12
 800a7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a804:	e7d5      	b.n	800a7b2 <__d2b+0x2e>
 800a806:	6161      	str	r1, [r4, #20]
 800a808:	e7e5      	b.n	800a7d6 <__d2b+0x52>
 800a80a:	a801      	add	r0, sp, #4
 800a80c:	f7ff fd5a 	bl	800a2c4 <__lo0bits>
 800a810:	9b01      	ldr	r3, [sp, #4]
 800a812:	6163      	str	r3, [r4, #20]
 800a814:	2201      	movs	r2, #1
 800a816:	6122      	str	r2, [r4, #16]
 800a818:	3020      	adds	r0, #32
 800a81a:	e7e3      	b.n	800a7e4 <__d2b+0x60>
 800a81c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a820:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a824:	f8c9 0000 	str.w	r0, [r9]
 800a828:	6918      	ldr	r0, [r3, #16]
 800a82a:	f7ff fd2b 	bl	800a284 <__hi0bits>
 800a82e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a832:	e7df      	b.n	800a7f4 <__d2b+0x70>
 800a834:	080151b3 	.word	0x080151b3
 800a838:	080151c4 	.word	0x080151c4

0800a83c <_calloc_r>:
 800a83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a83e:	fba1 2402 	umull	r2, r4, r1, r2
 800a842:	b94c      	cbnz	r4, 800a858 <_calloc_r+0x1c>
 800a844:	4611      	mov	r1, r2
 800a846:	9201      	str	r2, [sp, #4]
 800a848:	f7fe f8dc 	bl	8008a04 <_malloc_r>
 800a84c:	9a01      	ldr	r2, [sp, #4]
 800a84e:	4605      	mov	r5, r0
 800a850:	b930      	cbnz	r0, 800a860 <_calloc_r+0x24>
 800a852:	4628      	mov	r0, r5
 800a854:	b003      	add	sp, #12
 800a856:	bd30      	pop	{r4, r5, pc}
 800a858:	220c      	movs	r2, #12
 800a85a:	6002      	str	r2, [r0, #0]
 800a85c:	2500      	movs	r5, #0
 800a85e:	e7f8      	b.n	800a852 <_calloc_r+0x16>
 800a860:	4621      	mov	r1, r4
 800a862:	f7fe f85b 	bl	800891c <memset>
 800a866:	e7f4      	b.n	800a852 <_calloc_r+0x16>

0800a868 <_realloc_r>:
 800a868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86c:	4680      	mov	r8, r0
 800a86e:	4614      	mov	r4, r2
 800a870:	460e      	mov	r6, r1
 800a872:	b921      	cbnz	r1, 800a87e <_realloc_r+0x16>
 800a874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a878:	4611      	mov	r1, r2
 800a87a:	f7fe b8c3 	b.w	8008a04 <_malloc_r>
 800a87e:	b92a      	cbnz	r2, 800a88c <_realloc_r+0x24>
 800a880:	f7fe f854 	bl	800892c <_free_r>
 800a884:	4625      	mov	r5, r4
 800a886:	4628      	mov	r0, r5
 800a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88c:	f000 f9d5 	bl	800ac3a <_malloc_usable_size_r>
 800a890:	4284      	cmp	r4, r0
 800a892:	4607      	mov	r7, r0
 800a894:	d802      	bhi.n	800a89c <_realloc_r+0x34>
 800a896:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a89a:	d812      	bhi.n	800a8c2 <_realloc_r+0x5a>
 800a89c:	4621      	mov	r1, r4
 800a89e:	4640      	mov	r0, r8
 800a8a0:	f7fe f8b0 	bl	8008a04 <_malloc_r>
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d0ed      	beq.n	800a886 <_realloc_r+0x1e>
 800a8aa:	42bc      	cmp	r4, r7
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	bf28      	it	cs
 800a8b2:	463a      	movcs	r2, r7
 800a8b4:	f7fe f824 	bl	8008900 <memcpy>
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	f7fe f836 	bl	800892c <_free_r>
 800a8c0:	e7e1      	b.n	800a886 <_realloc_r+0x1e>
 800a8c2:	4635      	mov	r5, r6
 800a8c4:	e7df      	b.n	800a886 <_realloc_r+0x1e>

0800a8c6 <__ssputs_r>:
 800a8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ca:	688e      	ldr	r6, [r1, #8]
 800a8cc:	429e      	cmp	r6, r3
 800a8ce:	4682      	mov	sl, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	4690      	mov	r8, r2
 800a8d4:	461f      	mov	r7, r3
 800a8d6:	d838      	bhi.n	800a94a <__ssputs_r+0x84>
 800a8d8:	898a      	ldrh	r2, [r1, #12]
 800a8da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8de:	d032      	beq.n	800a946 <__ssputs_r+0x80>
 800a8e0:	6825      	ldr	r5, [r4, #0]
 800a8e2:	6909      	ldr	r1, [r1, #16]
 800a8e4:	eba5 0901 	sub.w	r9, r5, r1
 800a8e8:	6965      	ldr	r5, [r4, #20]
 800a8ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	444b      	add	r3, r9
 800a8f6:	106d      	asrs	r5, r5, #1
 800a8f8:	429d      	cmp	r5, r3
 800a8fa:	bf38      	it	cc
 800a8fc:	461d      	movcc	r5, r3
 800a8fe:	0553      	lsls	r3, r2, #21
 800a900:	d531      	bpl.n	800a966 <__ssputs_r+0xa0>
 800a902:	4629      	mov	r1, r5
 800a904:	f7fe f87e 	bl	8008a04 <_malloc_r>
 800a908:	4606      	mov	r6, r0
 800a90a:	b950      	cbnz	r0, 800a922 <__ssputs_r+0x5c>
 800a90c:	230c      	movs	r3, #12
 800a90e:	f8ca 3000 	str.w	r3, [sl]
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	f04f 30ff 	mov.w	r0, #4294967295
 800a91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a922:	6921      	ldr	r1, [r4, #16]
 800a924:	464a      	mov	r2, r9
 800a926:	f7fd ffeb 	bl	8008900 <memcpy>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a934:	81a3      	strh	r3, [r4, #12]
 800a936:	6126      	str	r6, [r4, #16]
 800a938:	6165      	str	r5, [r4, #20]
 800a93a:	444e      	add	r6, r9
 800a93c:	eba5 0509 	sub.w	r5, r5, r9
 800a940:	6026      	str	r6, [r4, #0]
 800a942:	60a5      	str	r5, [r4, #8]
 800a944:	463e      	mov	r6, r7
 800a946:	42be      	cmp	r6, r7
 800a948:	d900      	bls.n	800a94c <__ssputs_r+0x86>
 800a94a:	463e      	mov	r6, r7
 800a94c:	6820      	ldr	r0, [r4, #0]
 800a94e:	4632      	mov	r2, r6
 800a950:	4641      	mov	r1, r8
 800a952:	f000 f958 	bl	800ac06 <memmove>
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	1b9b      	subs	r3, r3, r6
 800a95a:	60a3      	str	r3, [r4, #8]
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	4433      	add	r3, r6
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	2000      	movs	r0, #0
 800a964:	e7db      	b.n	800a91e <__ssputs_r+0x58>
 800a966:	462a      	mov	r2, r5
 800a968:	f7ff ff7e 	bl	800a868 <_realloc_r>
 800a96c:	4606      	mov	r6, r0
 800a96e:	2800      	cmp	r0, #0
 800a970:	d1e1      	bne.n	800a936 <__ssputs_r+0x70>
 800a972:	6921      	ldr	r1, [r4, #16]
 800a974:	4650      	mov	r0, sl
 800a976:	f7fd ffd9 	bl	800892c <_free_r>
 800a97a:	e7c7      	b.n	800a90c <__ssputs_r+0x46>

0800a97c <_svfiprintf_r>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	4698      	mov	r8, r3
 800a982:	898b      	ldrh	r3, [r1, #12]
 800a984:	061b      	lsls	r3, r3, #24
 800a986:	b09d      	sub	sp, #116	; 0x74
 800a988:	4607      	mov	r7, r0
 800a98a:	460d      	mov	r5, r1
 800a98c:	4614      	mov	r4, r2
 800a98e:	d50e      	bpl.n	800a9ae <_svfiprintf_r+0x32>
 800a990:	690b      	ldr	r3, [r1, #16]
 800a992:	b963      	cbnz	r3, 800a9ae <_svfiprintf_r+0x32>
 800a994:	2140      	movs	r1, #64	; 0x40
 800a996:	f7fe f835 	bl	8008a04 <_malloc_r>
 800a99a:	6028      	str	r0, [r5, #0]
 800a99c:	6128      	str	r0, [r5, #16]
 800a99e:	b920      	cbnz	r0, 800a9aa <_svfiprintf_r+0x2e>
 800a9a0:	230c      	movs	r3, #12
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	e0d1      	b.n	800ab4e <_svfiprintf_r+0x1d2>
 800a9aa:	2340      	movs	r3, #64	; 0x40
 800a9ac:	616b      	str	r3, [r5, #20]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b2:	2320      	movs	r3, #32
 800a9b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9bc:	2330      	movs	r3, #48	; 0x30
 800a9be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab68 <_svfiprintf_r+0x1ec>
 800a9c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9c6:	f04f 0901 	mov.w	r9, #1
 800a9ca:	4623      	mov	r3, r4
 800a9cc:	469a      	mov	sl, r3
 800a9ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d2:	b10a      	cbz	r2, 800a9d8 <_svfiprintf_r+0x5c>
 800a9d4:	2a25      	cmp	r2, #37	; 0x25
 800a9d6:	d1f9      	bne.n	800a9cc <_svfiprintf_r+0x50>
 800a9d8:	ebba 0b04 	subs.w	fp, sl, r4
 800a9dc:	d00b      	beq.n	800a9f6 <_svfiprintf_r+0x7a>
 800a9de:	465b      	mov	r3, fp
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	4638      	mov	r0, r7
 800a9e6:	f7ff ff6e 	bl	800a8c6 <__ssputs_r>
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	f000 80aa 	beq.w	800ab44 <_svfiprintf_r+0x1c8>
 800a9f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9f2:	445a      	add	r2, fp
 800a9f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 80a2 	beq.w	800ab44 <_svfiprintf_r+0x1c8>
 800aa00:	2300      	movs	r3, #0
 800aa02:	f04f 32ff 	mov.w	r2, #4294967295
 800aa06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa0a:	f10a 0a01 	add.w	sl, sl, #1
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	9307      	str	r3, [sp, #28]
 800aa12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa16:	931a      	str	r3, [sp, #104]	; 0x68
 800aa18:	4654      	mov	r4, sl
 800aa1a:	2205      	movs	r2, #5
 800aa1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa20:	4851      	ldr	r0, [pc, #324]	; (800ab68 <_svfiprintf_r+0x1ec>)
 800aa22:	f7f5 fbf5 	bl	8000210 <memchr>
 800aa26:	9a04      	ldr	r2, [sp, #16]
 800aa28:	b9d8      	cbnz	r0, 800aa62 <_svfiprintf_r+0xe6>
 800aa2a:	06d0      	lsls	r0, r2, #27
 800aa2c:	bf44      	itt	mi
 800aa2e:	2320      	movmi	r3, #32
 800aa30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa34:	0711      	lsls	r1, r2, #28
 800aa36:	bf44      	itt	mi
 800aa38:	232b      	movmi	r3, #43	; 0x2b
 800aa3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa3e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa42:	2b2a      	cmp	r3, #42	; 0x2a
 800aa44:	d015      	beq.n	800aa72 <_svfiprintf_r+0xf6>
 800aa46:	9a07      	ldr	r2, [sp, #28]
 800aa48:	4654      	mov	r4, sl
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	f04f 0c0a 	mov.w	ip, #10
 800aa50:	4621      	mov	r1, r4
 800aa52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa56:	3b30      	subs	r3, #48	; 0x30
 800aa58:	2b09      	cmp	r3, #9
 800aa5a:	d94e      	bls.n	800aafa <_svfiprintf_r+0x17e>
 800aa5c:	b1b0      	cbz	r0, 800aa8c <_svfiprintf_r+0x110>
 800aa5e:	9207      	str	r2, [sp, #28]
 800aa60:	e014      	b.n	800aa8c <_svfiprintf_r+0x110>
 800aa62:	eba0 0308 	sub.w	r3, r0, r8
 800aa66:	fa09 f303 	lsl.w	r3, r9, r3
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	9304      	str	r3, [sp, #16]
 800aa6e:	46a2      	mov	sl, r4
 800aa70:	e7d2      	b.n	800aa18 <_svfiprintf_r+0x9c>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	1d19      	adds	r1, r3, #4
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	9103      	str	r1, [sp, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bfbb      	ittet	lt
 800aa7e:	425b      	neglt	r3, r3
 800aa80:	f042 0202 	orrlt.w	r2, r2, #2
 800aa84:	9307      	strge	r3, [sp, #28]
 800aa86:	9307      	strlt	r3, [sp, #28]
 800aa88:	bfb8      	it	lt
 800aa8a:	9204      	strlt	r2, [sp, #16]
 800aa8c:	7823      	ldrb	r3, [r4, #0]
 800aa8e:	2b2e      	cmp	r3, #46	; 0x2e
 800aa90:	d10c      	bne.n	800aaac <_svfiprintf_r+0x130>
 800aa92:	7863      	ldrb	r3, [r4, #1]
 800aa94:	2b2a      	cmp	r3, #42	; 0x2a
 800aa96:	d135      	bne.n	800ab04 <_svfiprintf_r+0x188>
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	1d1a      	adds	r2, r3, #4
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	9203      	str	r2, [sp, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	bfb8      	it	lt
 800aaa4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaa8:	3402      	adds	r4, #2
 800aaaa:	9305      	str	r3, [sp, #20]
 800aaac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab78 <_svfiprintf_r+0x1fc>
 800aab0:	7821      	ldrb	r1, [r4, #0]
 800aab2:	2203      	movs	r2, #3
 800aab4:	4650      	mov	r0, sl
 800aab6:	f7f5 fbab 	bl	8000210 <memchr>
 800aaba:	b140      	cbz	r0, 800aace <_svfiprintf_r+0x152>
 800aabc:	2340      	movs	r3, #64	; 0x40
 800aabe:	eba0 000a 	sub.w	r0, r0, sl
 800aac2:	fa03 f000 	lsl.w	r0, r3, r0
 800aac6:	9b04      	ldr	r3, [sp, #16]
 800aac8:	4303      	orrs	r3, r0
 800aaca:	3401      	adds	r4, #1
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad2:	4826      	ldr	r0, [pc, #152]	; (800ab6c <_svfiprintf_r+0x1f0>)
 800aad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aad8:	2206      	movs	r2, #6
 800aada:	f7f5 fb99 	bl	8000210 <memchr>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d038      	beq.n	800ab54 <_svfiprintf_r+0x1d8>
 800aae2:	4b23      	ldr	r3, [pc, #140]	; (800ab70 <_svfiprintf_r+0x1f4>)
 800aae4:	bb1b      	cbnz	r3, 800ab2e <_svfiprintf_r+0x1b2>
 800aae6:	9b03      	ldr	r3, [sp, #12]
 800aae8:	3307      	adds	r3, #7
 800aaea:	f023 0307 	bic.w	r3, r3, #7
 800aaee:	3308      	adds	r3, #8
 800aaf0:	9303      	str	r3, [sp, #12]
 800aaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf4:	4433      	add	r3, r6
 800aaf6:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf8:	e767      	b.n	800a9ca <_svfiprintf_r+0x4e>
 800aafa:	fb0c 3202 	mla	r2, ip, r2, r3
 800aafe:	460c      	mov	r4, r1
 800ab00:	2001      	movs	r0, #1
 800ab02:	e7a5      	b.n	800aa50 <_svfiprintf_r+0xd4>
 800ab04:	2300      	movs	r3, #0
 800ab06:	3401      	adds	r4, #1
 800ab08:	9305      	str	r3, [sp, #20]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	f04f 0c0a 	mov.w	ip, #10
 800ab10:	4620      	mov	r0, r4
 800ab12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab16:	3a30      	subs	r2, #48	; 0x30
 800ab18:	2a09      	cmp	r2, #9
 800ab1a:	d903      	bls.n	800ab24 <_svfiprintf_r+0x1a8>
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0c5      	beq.n	800aaac <_svfiprintf_r+0x130>
 800ab20:	9105      	str	r1, [sp, #20]
 800ab22:	e7c3      	b.n	800aaac <_svfiprintf_r+0x130>
 800ab24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab28:	4604      	mov	r4, r0
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e7f0      	b.n	800ab10 <_svfiprintf_r+0x194>
 800ab2e:	ab03      	add	r3, sp, #12
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	462a      	mov	r2, r5
 800ab34:	4b0f      	ldr	r3, [pc, #60]	; (800ab74 <_svfiprintf_r+0x1f8>)
 800ab36:	a904      	add	r1, sp, #16
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f7fe f877 	bl	8008c2c <_printf_float>
 800ab3e:	1c42      	adds	r2, r0, #1
 800ab40:	4606      	mov	r6, r0
 800ab42:	d1d6      	bne.n	800aaf2 <_svfiprintf_r+0x176>
 800ab44:	89ab      	ldrh	r3, [r5, #12]
 800ab46:	065b      	lsls	r3, r3, #25
 800ab48:	f53f af2c 	bmi.w	800a9a4 <_svfiprintf_r+0x28>
 800ab4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab4e:	b01d      	add	sp, #116	; 0x74
 800ab50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab54:	ab03      	add	r3, sp, #12
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	462a      	mov	r2, r5
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <_svfiprintf_r+0x1f8>)
 800ab5c:	a904      	add	r1, sp, #16
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7fe fb08 	bl	8009174 <_printf_i>
 800ab64:	e7eb      	b.n	800ab3e <_svfiprintf_r+0x1c2>
 800ab66:	bf00      	nop
 800ab68:	0801531c 	.word	0x0801531c
 800ab6c:	08015326 	.word	0x08015326
 800ab70:	08008c2d 	.word	0x08008c2d
 800ab74:	0800a8c7 	.word	0x0800a8c7
 800ab78:	08015322 	.word	0x08015322

0800ab7c <__assert_func>:
 800ab7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab7e:	4614      	mov	r4, r2
 800ab80:	461a      	mov	r2, r3
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <__assert_func+0x2c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4605      	mov	r5, r0
 800ab88:	68d8      	ldr	r0, [r3, #12]
 800ab8a:	b14c      	cbz	r4, 800aba0 <__assert_func+0x24>
 800ab8c:	4b07      	ldr	r3, [pc, #28]	; (800abac <__assert_func+0x30>)
 800ab8e:	9100      	str	r1, [sp, #0]
 800ab90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab94:	4906      	ldr	r1, [pc, #24]	; (800abb0 <__assert_func+0x34>)
 800ab96:	462b      	mov	r3, r5
 800ab98:	f000 f80e 	bl	800abb8 <fiprintf>
 800ab9c:	f000 fa7c 	bl	800b098 <abort>
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <__assert_func+0x38>)
 800aba2:	461c      	mov	r4, r3
 800aba4:	e7f3      	b.n	800ab8e <__assert_func+0x12>
 800aba6:	bf00      	nop
 800aba8:	200006a0 	.word	0x200006a0
 800abac:	0801532d 	.word	0x0801532d
 800abb0:	0801533a 	.word	0x0801533a
 800abb4:	08015368 	.word	0x08015368

0800abb8 <fiprintf>:
 800abb8:	b40e      	push	{r1, r2, r3}
 800abba:	b503      	push	{r0, r1, lr}
 800abbc:	4601      	mov	r1, r0
 800abbe:	ab03      	add	r3, sp, #12
 800abc0:	4805      	ldr	r0, [pc, #20]	; (800abd8 <fiprintf+0x20>)
 800abc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc6:	6800      	ldr	r0, [r0, #0]
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	f000 f867 	bl	800ac9c <_vfiprintf_r>
 800abce:	b002      	add	sp, #8
 800abd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abd4:	b003      	add	sp, #12
 800abd6:	4770      	bx	lr
 800abd8:	200006a0 	.word	0x200006a0

0800abdc <__retarget_lock_init_recursive>:
 800abdc:	4770      	bx	lr

0800abde <__retarget_lock_acquire_recursive>:
 800abde:	4770      	bx	lr

0800abe0 <__retarget_lock_release_recursive>:
 800abe0:	4770      	bx	lr

0800abe2 <__ascii_mbtowc>:
 800abe2:	b082      	sub	sp, #8
 800abe4:	b901      	cbnz	r1, 800abe8 <__ascii_mbtowc+0x6>
 800abe6:	a901      	add	r1, sp, #4
 800abe8:	b142      	cbz	r2, 800abfc <__ascii_mbtowc+0x1a>
 800abea:	b14b      	cbz	r3, 800ac00 <__ascii_mbtowc+0x1e>
 800abec:	7813      	ldrb	r3, [r2, #0]
 800abee:	600b      	str	r3, [r1, #0]
 800abf0:	7812      	ldrb	r2, [r2, #0]
 800abf2:	1e10      	subs	r0, r2, #0
 800abf4:	bf18      	it	ne
 800abf6:	2001      	movne	r0, #1
 800abf8:	b002      	add	sp, #8
 800abfa:	4770      	bx	lr
 800abfc:	4610      	mov	r0, r2
 800abfe:	e7fb      	b.n	800abf8 <__ascii_mbtowc+0x16>
 800ac00:	f06f 0001 	mvn.w	r0, #1
 800ac04:	e7f8      	b.n	800abf8 <__ascii_mbtowc+0x16>

0800ac06 <memmove>:
 800ac06:	4288      	cmp	r0, r1
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	eb01 0402 	add.w	r4, r1, r2
 800ac0e:	d902      	bls.n	800ac16 <memmove+0x10>
 800ac10:	4284      	cmp	r4, r0
 800ac12:	4623      	mov	r3, r4
 800ac14:	d807      	bhi.n	800ac26 <memmove+0x20>
 800ac16:	1e43      	subs	r3, r0, #1
 800ac18:	42a1      	cmp	r1, r4
 800ac1a:	d008      	beq.n	800ac2e <memmove+0x28>
 800ac1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac24:	e7f8      	b.n	800ac18 <memmove+0x12>
 800ac26:	4402      	add	r2, r0
 800ac28:	4601      	mov	r1, r0
 800ac2a:	428a      	cmp	r2, r1
 800ac2c:	d100      	bne.n	800ac30 <memmove+0x2a>
 800ac2e:	bd10      	pop	{r4, pc}
 800ac30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac38:	e7f7      	b.n	800ac2a <memmove+0x24>

0800ac3a <_malloc_usable_size_r>:
 800ac3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac3e:	1f18      	subs	r0, r3, #4
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	bfbc      	itt	lt
 800ac44:	580b      	ldrlt	r3, [r1, r0]
 800ac46:	18c0      	addlt	r0, r0, r3
 800ac48:	4770      	bx	lr

0800ac4a <__sfputc_r>:
 800ac4a:	6893      	ldr	r3, [r2, #8]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	b410      	push	{r4}
 800ac52:	6093      	str	r3, [r2, #8]
 800ac54:	da08      	bge.n	800ac68 <__sfputc_r+0x1e>
 800ac56:	6994      	ldr	r4, [r2, #24]
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	db01      	blt.n	800ac60 <__sfputc_r+0x16>
 800ac5c:	290a      	cmp	r1, #10
 800ac5e:	d103      	bne.n	800ac68 <__sfputc_r+0x1e>
 800ac60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac64:	f000 b94a 	b.w	800aefc <__swbuf_r>
 800ac68:	6813      	ldr	r3, [r2, #0]
 800ac6a:	1c58      	adds	r0, r3, #1
 800ac6c:	6010      	str	r0, [r2, #0]
 800ac6e:	7019      	strb	r1, [r3, #0]
 800ac70:	4608      	mov	r0, r1
 800ac72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <__sfputs_r>:
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	4614      	mov	r4, r2
 800ac80:	18d5      	adds	r5, r2, r3
 800ac82:	42ac      	cmp	r4, r5
 800ac84:	d101      	bne.n	800ac8a <__sfputs_r+0x12>
 800ac86:	2000      	movs	r0, #0
 800ac88:	e007      	b.n	800ac9a <__sfputs_r+0x22>
 800ac8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8e:	463a      	mov	r2, r7
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7ff ffda 	bl	800ac4a <__sfputc_r>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d1f3      	bne.n	800ac82 <__sfputs_r+0xa>
 800ac9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac9c <_vfiprintf_r>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	460d      	mov	r5, r1
 800aca2:	b09d      	sub	sp, #116	; 0x74
 800aca4:	4614      	mov	r4, r2
 800aca6:	4698      	mov	r8, r3
 800aca8:	4606      	mov	r6, r0
 800acaa:	b118      	cbz	r0, 800acb4 <_vfiprintf_r+0x18>
 800acac:	6983      	ldr	r3, [r0, #24]
 800acae:	b90b      	cbnz	r3, 800acb4 <_vfiprintf_r+0x18>
 800acb0:	f000 fb14 	bl	800b2dc <__sinit>
 800acb4:	4b89      	ldr	r3, [pc, #548]	; (800aedc <_vfiprintf_r+0x240>)
 800acb6:	429d      	cmp	r5, r3
 800acb8:	d11b      	bne.n	800acf2 <_vfiprintf_r+0x56>
 800acba:	6875      	ldr	r5, [r6, #4]
 800acbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acbe:	07d9      	lsls	r1, r3, #31
 800acc0:	d405      	bmi.n	800acce <_vfiprintf_r+0x32>
 800acc2:	89ab      	ldrh	r3, [r5, #12]
 800acc4:	059a      	lsls	r2, r3, #22
 800acc6:	d402      	bmi.n	800acce <_vfiprintf_r+0x32>
 800acc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acca:	f7ff ff88 	bl	800abde <__retarget_lock_acquire_recursive>
 800acce:	89ab      	ldrh	r3, [r5, #12]
 800acd0:	071b      	lsls	r3, r3, #28
 800acd2:	d501      	bpl.n	800acd8 <_vfiprintf_r+0x3c>
 800acd4:	692b      	ldr	r3, [r5, #16]
 800acd6:	b9eb      	cbnz	r3, 800ad14 <_vfiprintf_r+0x78>
 800acd8:	4629      	mov	r1, r5
 800acda:	4630      	mov	r0, r6
 800acdc:	f000 f96e 	bl	800afbc <__swsetup_r>
 800ace0:	b1c0      	cbz	r0, 800ad14 <_vfiprintf_r+0x78>
 800ace2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace4:	07dc      	lsls	r4, r3, #31
 800ace6:	d50e      	bpl.n	800ad06 <_vfiprintf_r+0x6a>
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	b01d      	add	sp, #116	; 0x74
 800acee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf2:	4b7b      	ldr	r3, [pc, #492]	; (800aee0 <_vfiprintf_r+0x244>)
 800acf4:	429d      	cmp	r5, r3
 800acf6:	d101      	bne.n	800acfc <_vfiprintf_r+0x60>
 800acf8:	68b5      	ldr	r5, [r6, #8]
 800acfa:	e7df      	b.n	800acbc <_vfiprintf_r+0x20>
 800acfc:	4b79      	ldr	r3, [pc, #484]	; (800aee4 <_vfiprintf_r+0x248>)
 800acfe:	429d      	cmp	r5, r3
 800ad00:	bf08      	it	eq
 800ad02:	68f5      	ldreq	r5, [r6, #12]
 800ad04:	e7da      	b.n	800acbc <_vfiprintf_r+0x20>
 800ad06:	89ab      	ldrh	r3, [r5, #12]
 800ad08:	0598      	lsls	r0, r3, #22
 800ad0a:	d4ed      	bmi.n	800ace8 <_vfiprintf_r+0x4c>
 800ad0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad0e:	f7ff ff67 	bl	800abe0 <__retarget_lock_release_recursive>
 800ad12:	e7e9      	b.n	800ace8 <_vfiprintf_r+0x4c>
 800ad14:	2300      	movs	r3, #0
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	2320      	movs	r3, #32
 800ad1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad22:	2330      	movs	r3, #48	; 0x30
 800ad24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aee8 <_vfiprintf_r+0x24c>
 800ad28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad2c:	f04f 0901 	mov.w	r9, #1
 800ad30:	4623      	mov	r3, r4
 800ad32:	469a      	mov	sl, r3
 800ad34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad38:	b10a      	cbz	r2, 800ad3e <_vfiprintf_r+0xa2>
 800ad3a:	2a25      	cmp	r2, #37	; 0x25
 800ad3c:	d1f9      	bne.n	800ad32 <_vfiprintf_r+0x96>
 800ad3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad42:	d00b      	beq.n	800ad5c <_vfiprintf_r+0xc0>
 800ad44:	465b      	mov	r3, fp
 800ad46:	4622      	mov	r2, r4
 800ad48:	4629      	mov	r1, r5
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f7ff ff94 	bl	800ac78 <__sfputs_r>
 800ad50:	3001      	adds	r0, #1
 800ad52:	f000 80aa 	beq.w	800aeaa <_vfiprintf_r+0x20e>
 800ad56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad58:	445a      	add	r2, fp
 800ad5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 80a2 	beq.w	800aeaa <_vfiprintf_r+0x20e>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad70:	f10a 0a01 	add.w	sl, sl, #1
 800ad74:	9304      	str	r3, [sp, #16]
 800ad76:	9307      	str	r3, [sp, #28]
 800ad78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad7e:	4654      	mov	r4, sl
 800ad80:	2205      	movs	r2, #5
 800ad82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad86:	4858      	ldr	r0, [pc, #352]	; (800aee8 <_vfiprintf_r+0x24c>)
 800ad88:	f7f5 fa42 	bl	8000210 <memchr>
 800ad8c:	9a04      	ldr	r2, [sp, #16]
 800ad8e:	b9d8      	cbnz	r0, 800adc8 <_vfiprintf_r+0x12c>
 800ad90:	06d1      	lsls	r1, r2, #27
 800ad92:	bf44      	itt	mi
 800ad94:	2320      	movmi	r3, #32
 800ad96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad9a:	0713      	lsls	r3, r2, #28
 800ad9c:	bf44      	itt	mi
 800ad9e:	232b      	movmi	r3, #43	; 0x2b
 800ada0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada4:	f89a 3000 	ldrb.w	r3, [sl]
 800ada8:	2b2a      	cmp	r3, #42	; 0x2a
 800adaa:	d015      	beq.n	800add8 <_vfiprintf_r+0x13c>
 800adac:	9a07      	ldr	r2, [sp, #28]
 800adae:	4654      	mov	r4, sl
 800adb0:	2000      	movs	r0, #0
 800adb2:	f04f 0c0a 	mov.w	ip, #10
 800adb6:	4621      	mov	r1, r4
 800adb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adbc:	3b30      	subs	r3, #48	; 0x30
 800adbe:	2b09      	cmp	r3, #9
 800adc0:	d94e      	bls.n	800ae60 <_vfiprintf_r+0x1c4>
 800adc2:	b1b0      	cbz	r0, 800adf2 <_vfiprintf_r+0x156>
 800adc4:	9207      	str	r2, [sp, #28]
 800adc6:	e014      	b.n	800adf2 <_vfiprintf_r+0x156>
 800adc8:	eba0 0308 	sub.w	r3, r0, r8
 800adcc:	fa09 f303 	lsl.w	r3, r9, r3
 800add0:	4313      	orrs	r3, r2
 800add2:	9304      	str	r3, [sp, #16]
 800add4:	46a2      	mov	sl, r4
 800add6:	e7d2      	b.n	800ad7e <_vfiprintf_r+0xe2>
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	1d19      	adds	r1, r3, #4
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	9103      	str	r1, [sp, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	bfbb      	ittet	lt
 800ade4:	425b      	neglt	r3, r3
 800ade6:	f042 0202 	orrlt.w	r2, r2, #2
 800adea:	9307      	strge	r3, [sp, #28]
 800adec:	9307      	strlt	r3, [sp, #28]
 800adee:	bfb8      	it	lt
 800adf0:	9204      	strlt	r2, [sp, #16]
 800adf2:	7823      	ldrb	r3, [r4, #0]
 800adf4:	2b2e      	cmp	r3, #46	; 0x2e
 800adf6:	d10c      	bne.n	800ae12 <_vfiprintf_r+0x176>
 800adf8:	7863      	ldrb	r3, [r4, #1]
 800adfa:	2b2a      	cmp	r3, #42	; 0x2a
 800adfc:	d135      	bne.n	800ae6a <_vfiprintf_r+0x1ce>
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	1d1a      	adds	r2, r3, #4
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	9203      	str	r2, [sp, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	bfb8      	it	lt
 800ae0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae0e:	3402      	adds	r4, #2
 800ae10:	9305      	str	r3, [sp, #20]
 800ae12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aef8 <_vfiprintf_r+0x25c>
 800ae16:	7821      	ldrb	r1, [r4, #0]
 800ae18:	2203      	movs	r2, #3
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	f7f5 f9f8 	bl	8000210 <memchr>
 800ae20:	b140      	cbz	r0, 800ae34 <_vfiprintf_r+0x198>
 800ae22:	2340      	movs	r3, #64	; 0x40
 800ae24:	eba0 000a 	sub.w	r0, r0, sl
 800ae28:	fa03 f000 	lsl.w	r0, r3, r0
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	4303      	orrs	r3, r0
 800ae30:	3401      	adds	r4, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	482c      	ldr	r0, [pc, #176]	; (800aeec <_vfiprintf_r+0x250>)
 800ae3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae3e:	2206      	movs	r2, #6
 800ae40:	f7f5 f9e6 	bl	8000210 <memchr>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d03f      	beq.n	800aec8 <_vfiprintf_r+0x22c>
 800ae48:	4b29      	ldr	r3, [pc, #164]	; (800aef0 <_vfiprintf_r+0x254>)
 800ae4a:	bb1b      	cbnz	r3, 800ae94 <_vfiprintf_r+0x1f8>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	3307      	adds	r3, #7
 800ae50:	f023 0307 	bic.w	r3, r3, #7
 800ae54:	3308      	adds	r3, #8
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5a:	443b      	add	r3, r7
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5e:	e767      	b.n	800ad30 <_vfiprintf_r+0x94>
 800ae60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae64:	460c      	mov	r4, r1
 800ae66:	2001      	movs	r0, #1
 800ae68:	e7a5      	b.n	800adb6 <_vfiprintf_r+0x11a>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f04f 0c0a 	mov.w	ip, #10
 800ae76:	4620      	mov	r0, r4
 800ae78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7c:	3a30      	subs	r2, #48	; 0x30
 800ae7e:	2a09      	cmp	r2, #9
 800ae80:	d903      	bls.n	800ae8a <_vfiprintf_r+0x1ee>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c5      	beq.n	800ae12 <_vfiprintf_r+0x176>
 800ae86:	9105      	str	r1, [sp, #20]
 800ae88:	e7c3      	b.n	800ae12 <_vfiprintf_r+0x176>
 800ae8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae8e:	4604      	mov	r4, r0
 800ae90:	2301      	movs	r3, #1
 800ae92:	e7f0      	b.n	800ae76 <_vfiprintf_r+0x1da>
 800ae94:	ab03      	add	r3, sp, #12
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4b16      	ldr	r3, [pc, #88]	; (800aef4 <_vfiprintf_r+0x258>)
 800ae9c:	a904      	add	r1, sp, #16
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f7fd fec4 	bl	8008c2c <_printf_float>
 800aea4:	4607      	mov	r7, r0
 800aea6:	1c78      	adds	r0, r7, #1
 800aea8:	d1d6      	bne.n	800ae58 <_vfiprintf_r+0x1bc>
 800aeaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeac:	07d9      	lsls	r1, r3, #31
 800aeae:	d405      	bmi.n	800aebc <_vfiprintf_r+0x220>
 800aeb0:	89ab      	ldrh	r3, [r5, #12]
 800aeb2:	059a      	lsls	r2, r3, #22
 800aeb4:	d402      	bmi.n	800aebc <_vfiprintf_r+0x220>
 800aeb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb8:	f7ff fe92 	bl	800abe0 <__retarget_lock_release_recursive>
 800aebc:	89ab      	ldrh	r3, [r5, #12]
 800aebe:	065b      	lsls	r3, r3, #25
 800aec0:	f53f af12 	bmi.w	800ace8 <_vfiprintf_r+0x4c>
 800aec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aec6:	e711      	b.n	800acec <_vfiprintf_r+0x50>
 800aec8:	ab03      	add	r3, sp, #12
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	462a      	mov	r2, r5
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <_vfiprintf_r+0x258>)
 800aed0:	a904      	add	r1, sp, #16
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7fe f94e 	bl	8009174 <_printf_i>
 800aed8:	e7e4      	b.n	800aea4 <_vfiprintf_r+0x208>
 800aeda:	bf00      	nop
 800aedc:	08015494 	.word	0x08015494
 800aee0:	080154b4 	.word	0x080154b4
 800aee4:	08015474 	.word	0x08015474
 800aee8:	0801531c 	.word	0x0801531c
 800aeec:	08015326 	.word	0x08015326
 800aef0:	08008c2d 	.word	0x08008c2d
 800aef4:	0800ac79 	.word	0x0800ac79
 800aef8:	08015322 	.word	0x08015322

0800aefc <__swbuf_r>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	460e      	mov	r6, r1
 800af00:	4614      	mov	r4, r2
 800af02:	4605      	mov	r5, r0
 800af04:	b118      	cbz	r0, 800af0e <__swbuf_r+0x12>
 800af06:	6983      	ldr	r3, [r0, #24]
 800af08:	b90b      	cbnz	r3, 800af0e <__swbuf_r+0x12>
 800af0a:	f000 f9e7 	bl	800b2dc <__sinit>
 800af0e:	4b21      	ldr	r3, [pc, #132]	; (800af94 <__swbuf_r+0x98>)
 800af10:	429c      	cmp	r4, r3
 800af12:	d12b      	bne.n	800af6c <__swbuf_r+0x70>
 800af14:	686c      	ldr	r4, [r5, #4]
 800af16:	69a3      	ldr	r3, [r4, #24]
 800af18:	60a3      	str	r3, [r4, #8]
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	071a      	lsls	r2, r3, #28
 800af1e:	d52f      	bpl.n	800af80 <__swbuf_r+0x84>
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	b36b      	cbz	r3, 800af80 <__swbuf_r+0x84>
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	6820      	ldr	r0, [r4, #0]
 800af28:	1ac0      	subs	r0, r0, r3
 800af2a:	6963      	ldr	r3, [r4, #20]
 800af2c:	b2f6      	uxtb	r6, r6
 800af2e:	4283      	cmp	r3, r0
 800af30:	4637      	mov	r7, r6
 800af32:	dc04      	bgt.n	800af3e <__swbuf_r+0x42>
 800af34:	4621      	mov	r1, r4
 800af36:	4628      	mov	r0, r5
 800af38:	f000 f93c 	bl	800b1b4 <_fflush_r>
 800af3c:	bb30      	cbnz	r0, 800af8c <__swbuf_r+0x90>
 800af3e:	68a3      	ldr	r3, [r4, #8]
 800af40:	3b01      	subs	r3, #1
 800af42:	60a3      	str	r3, [r4, #8]
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	6022      	str	r2, [r4, #0]
 800af4a:	701e      	strb	r6, [r3, #0]
 800af4c:	6963      	ldr	r3, [r4, #20]
 800af4e:	3001      	adds	r0, #1
 800af50:	4283      	cmp	r3, r0
 800af52:	d004      	beq.n	800af5e <__swbuf_r+0x62>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	07db      	lsls	r3, r3, #31
 800af58:	d506      	bpl.n	800af68 <__swbuf_r+0x6c>
 800af5a:	2e0a      	cmp	r6, #10
 800af5c:	d104      	bne.n	800af68 <__swbuf_r+0x6c>
 800af5e:	4621      	mov	r1, r4
 800af60:	4628      	mov	r0, r5
 800af62:	f000 f927 	bl	800b1b4 <_fflush_r>
 800af66:	b988      	cbnz	r0, 800af8c <__swbuf_r+0x90>
 800af68:	4638      	mov	r0, r7
 800af6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <__swbuf_r+0x9c>)
 800af6e:	429c      	cmp	r4, r3
 800af70:	d101      	bne.n	800af76 <__swbuf_r+0x7a>
 800af72:	68ac      	ldr	r4, [r5, #8]
 800af74:	e7cf      	b.n	800af16 <__swbuf_r+0x1a>
 800af76:	4b09      	ldr	r3, [pc, #36]	; (800af9c <__swbuf_r+0xa0>)
 800af78:	429c      	cmp	r4, r3
 800af7a:	bf08      	it	eq
 800af7c:	68ec      	ldreq	r4, [r5, #12]
 800af7e:	e7ca      	b.n	800af16 <__swbuf_r+0x1a>
 800af80:	4621      	mov	r1, r4
 800af82:	4628      	mov	r0, r5
 800af84:	f000 f81a 	bl	800afbc <__swsetup_r>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d0cb      	beq.n	800af24 <__swbuf_r+0x28>
 800af8c:	f04f 37ff 	mov.w	r7, #4294967295
 800af90:	e7ea      	b.n	800af68 <__swbuf_r+0x6c>
 800af92:	bf00      	nop
 800af94:	08015494 	.word	0x08015494
 800af98:	080154b4 	.word	0x080154b4
 800af9c:	08015474 	.word	0x08015474

0800afa0 <__ascii_wctomb>:
 800afa0:	b149      	cbz	r1, 800afb6 <__ascii_wctomb+0x16>
 800afa2:	2aff      	cmp	r2, #255	; 0xff
 800afa4:	bf85      	ittet	hi
 800afa6:	238a      	movhi	r3, #138	; 0x8a
 800afa8:	6003      	strhi	r3, [r0, #0]
 800afaa:	700a      	strbls	r2, [r1, #0]
 800afac:	f04f 30ff 	movhi.w	r0, #4294967295
 800afb0:	bf98      	it	ls
 800afb2:	2001      	movls	r0, #1
 800afb4:	4770      	bx	lr
 800afb6:	4608      	mov	r0, r1
 800afb8:	4770      	bx	lr
	...

0800afbc <__swsetup_r>:
 800afbc:	4b32      	ldr	r3, [pc, #200]	; (800b088 <__swsetup_r+0xcc>)
 800afbe:	b570      	push	{r4, r5, r6, lr}
 800afc0:	681d      	ldr	r5, [r3, #0]
 800afc2:	4606      	mov	r6, r0
 800afc4:	460c      	mov	r4, r1
 800afc6:	b125      	cbz	r5, 800afd2 <__swsetup_r+0x16>
 800afc8:	69ab      	ldr	r3, [r5, #24]
 800afca:	b913      	cbnz	r3, 800afd2 <__swsetup_r+0x16>
 800afcc:	4628      	mov	r0, r5
 800afce:	f000 f985 	bl	800b2dc <__sinit>
 800afd2:	4b2e      	ldr	r3, [pc, #184]	; (800b08c <__swsetup_r+0xd0>)
 800afd4:	429c      	cmp	r4, r3
 800afd6:	d10f      	bne.n	800aff8 <__swsetup_r+0x3c>
 800afd8:	686c      	ldr	r4, [r5, #4]
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afe0:	0719      	lsls	r1, r3, #28
 800afe2:	d42c      	bmi.n	800b03e <__swsetup_r+0x82>
 800afe4:	06dd      	lsls	r5, r3, #27
 800afe6:	d411      	bmi.n	800b00c <__swsetup_r+0x50>
 800afe8:	2309      	movs	r3, #9
 800afea:	6033      	str	r3, [r6, #0]
 800afec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aff0:	81a3      	strh	r3, [r4, #12]
 800aff2:	f04f 30ff 	mov.w	r0, #4294967295
 800aff6:	e03e      	b.n	800b076 <__swsetup_r+0xba>
 800aff8:	4b25      	ldr	r3, [pc, #148]	; (800b090 <__swsetup_r+0xd4>)
 800affa:	429c      	cmp	r4, r3
 800affc:	d101      	bne.n	800b002 <__swsetup_r+0x46>
 800affe:	68ac      	ldr	r4, [r5, #8]
 800b000:	e7eb      	b.n	800afda <__swsetup_r+0x1e>
 800b002:	4b24      	ldr	r3, [pc, #144]	; (800b094 <__swsetup_r+0xd8>)
 800b004:	429c      	cmp	r4, r3
 800b006:	bf08      	it	eq
 800b008:	68ec      	ldreq	r4, [r5, #12]
 800b00a:	e7e6      	b.n	800afda <__swsetup_r+0x1e>
 800b00c:	0758      	lsls	r0, r3, #29
 800b00e:	d512      	bpl.n	800b036 <__swsetup_r+0x7a>
 800b010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b012:	b141      	cbz	r1, 800b026 <__swsetup_r+0x6a>
 800b014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b018:	4299      	cmp	r1, r3
 800b01a:	d002      	beq.n	800b022 <__swsetup_r+0x66>
 800b01c:	4630      	mov	r0, r6
 800b01e:	f7fd fc85 	bl	800892c <_free_r>
 800b022:	2300      	movs	r3, #0
 800b024:	6363      	str	r3, [r4, #52]	; 0x34
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b02c:	81a3      	strh	r3, [r4, #12]
 800b02e:	2300      	movs	r3, #0
 800b030:	6063      	str	r3, [r4, #4]
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f043 0308 	orr.w	r3, r3, #8
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	b94b      	cbnz	r3, 800b056 <__swsetup_r+0x9a>
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b04c:	d003      	beq.n	800b056 <__swsetup_r+0x9a>
 800b04e:	4621      	mov	r1, r4
 800b050:	4630      	mov	r0, r6
 800b052:	f000 fa05 	bl	800b460 <__smakebuf_r>
 800b056:	89a0      	ldrh	r0, [r4, #12]
 800b058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b05c:	f010 0301 	ands.w	r3, r0, #1
 800b060:	d00a      	beq.n	800b078 <__swsetup_r+0xbc>
 800b062:	2300      	movs	r3, #0
 800b064:	60a3      	str	r3, [r4, #8]
 800b066:	6963      	ldr	r3, [r4, #20]
 800b068:	425b      	negs	r3, r3
 800b06a:	61a3      	str	r3, [r4, #24]
 800b06c:	6923      	ldr	r3, [r4, #16]
 800b06e:	b943      	cbnz	r3, 800b082 <__swsetup_r+0xc6>
 800b070:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b074:	d1ba      	bne.n	800afec <__swsetup_r+0x30>
 800b076:	bd70      	pop	{r4, r5, r6, pc}
 800b078:	0781      	lsls	r1, r0, #30
 800b07a:	bf58      	it	pl
 800b07c:	6963      	ldrpl	r3, [r4, #20]
 800b07e:	60a3      	str	r3, [r4, #8]
 800b080:	e7f4      	b.n	800b06c <__swsetup_r+0xb0>
 800b082:	2000      	movs	r0, #0
 800b084:	e7f7      	b.n	800b076 <__swsetup_r+0xba>
 800b086:	bf00      	nop
 800b088:	200006a0 	.word	0x200006a0
 800b08c:	08015494 	.word	0x08015494
 800b090:	080154b4 	.word	0x080154b4
 800b094:	08015474 	.word	0x08015474

0800b098 <abort>:
 800b098:	b508      	push	{r3, lr}
 800b09a:	2006      	movs	r0, #6
 800b09c:	f000 fa48 	bl	800b530 <raise>
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	f7f7 fa47 	bl	8002534 <_exit>
	...

0800b0a8 <__sflush_r>:
 800b0a8:	898a      	ldrh	r2, [r1, #12]
 800b0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	0710      	lsls	r0, r2, #28
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	d458      	bmi.n	800b168 <__sflush_r+0xc0>
 800b0b6:	684b      	ldr	r3, [r1, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	dc05      	bgt.n	800b0c8 <__sflush_r+0x20>
 800b0bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	dc02      	bgt.n	800b0c8 <__sflush_r+0x20>
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ca:	2e00      	cmp	r6, #0
 800b0cc:	d0f9      	beq.n	800b0c2 <__sflush_r+0x1a>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0d4:	682f      	ldr	r7, [r5, #0]
 800b0d6:	602b      	str	r3, [r5, #0]
 800b0d8:	d032      	beq.n	800b140 <__sflush_r+0x98>
 800b0da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0dc:	89a3      	ldrh	r3, [r4, #12]
 800b0de:	075a      	lsls	r2, r3, #29
 800b0e0:	d505      	bpl.n	800b0ee <__sflush_r+0x46>
 800b0e2:	6863      	ldr	r3, [r4, #4]
 800b0e4:	1ac0      	subs	r0, r0, r3
 800b0e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0e8:	b10b      	cbz	r3, 800b0ee <__sflush_r+0x46>
 800b0ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0ec:	1ac0      	subs	r0, r0, r3
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0f4:	6a21      	ldr	r1, [r4, #32]
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b0      	blx	r6
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	d106      	bne.n	800b10e <__sflush_r+0x66>
 800b100:	6829      	ldr	r1, [r5, #0]
 800b102:	291d      	cmp	r1, #29
 800b104:	d82c      	bhi.n	800b160 <__sflush_r+0xb8>
 800b106:	4a2a      	ldr	r2, [pc, #168]	; (800b1b0 <__sflush_r+0x108>)
 800b108:	40ca      	lsrs	r2, r1
 800b10a:	07d6      	lsls	r6, r2, #31
 800b10c:	d528      	bpl.n	800b160 <__sflush_r+0xb8>
 800b10e:	2200      	movs	r2, #0
 800b110:	6062      	str	r2, [r4, #4]
 800b112:	04d9      	lsls	r1, r3, #19
 800b114:	6922      	ldr	r2, [r4, #16]
 800b116:	6022      	str	r2, [r4, #0]
 800b118:	d504      	bpl.n	800b124 <__sflush_r+0x7c>
 800b11a:	1c42      	adds	r2, r0, #1
 800b11c:	d101      	bne.n	800b122 <__sflush_r+0x7a>
 800b11e:	682b      	ldr	r3, [r5, #0]
 800b120:	b903      	cbnz	r3, 800b124 <__sflush_r+0x7c>
 800b122:	6560      	str	r0, [r4, #84]	; 0x54
 800b124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b126:	602f      	str	r7, [r5, #0]
 800b128:	2900      	cmp	r1, #0
 800b12a:	d0ca      	beq.n	800b0c2 <__sflush_r+0x1a>
 800b12c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b130:	4299      	cmp	r1, r3
 800b132:	d002      	beq.n	800b13a <__sflush_r+0x92>
 800b134:	4628      	mov	r0, r5
 800b136:	f7fd fbf9 	bl	800892c <_free_r>
 800b13a:	2000      	movs	r0, #0
 800b13c:	6360      	str	r0, [r4, #52]	; 0x34
 800b13e:	e7c1      	b.n	800b0c4 <__sflush_r+0x1c>
 800b140:	6a21      	ldr	r1, [r4, #32]
 800b142:	2301      	movs	r3, #1
 800b144:	4628      	mov	r0, r5
 800b146:	47b0      	blx	r6
 800b148:	1c41      	adds	r1, r0, #1
 800b14a:	d1c7      	bne.n	800b0dc <__sflush_r+0x34>
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0c4      	beq.n	800b0dc <__sflush_r+0x34>
 800b152:	2b1d      	cmp	r3, #29
 800b154:	d001      	beq.n	800b15a <__sflush_r+0xb2>
 800b156:	2b16      	cmp	r3, #22
 800b158:	d101      	bne.n	800b15e <__sflush_r+0xb6>
 800b15a:	602f      	str	r7, [r5, #0]
 800b15c:	e7b1      	b.n	800b0c2 <__sflush_r+0x1a>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b164:	81a3      	strh	r3, [r4, #12]
 800b166:	e7ad      	b.n	800b0c4 <__sflush_r+0x1c>
 800b168:	690f      	ldr	r7, [r1, #16]
 800b16a:	2f00      	cmp	r7, #0
 800b16c:	d0a9      	beq.n	800b0c2 <__sflush_r+0x1a>
 800b16e:	0793      	lsls	r3, r2, #30
 800b170:	680e      	ldr	r6, [r1, #0]
 800b172:	bf08      	it	eq
 800b174:	694b      	ldreq	r3, [r1, #20]
 800b176:	600f      	str	r7, [r1, #0]
 800b178:	bf18      	it	ne
 800b17a:	2300      	movne	r3, #0
 800b17c:	eba6 0807 	sub.w	r8, r6, r7
 800b180:	608b      	str	r3, [r1, #8]
 800b182:	f1b8 0f00 	cmp.w	r8, #0
 800b186:	dd9c      	ble.n	800b0c2 <__sflush_r+0x1a>
 800b188:	6a21      	ldr	r1, [r4, #32]
 800b18a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b18c:	4643      	mov	r3, r8
 800b18e:	463a      	mov	r2, r7
 800b190:	4628      	mov	r0, r5
 800b192:	47b0      	blx	r6
 800b194:	2800      	cmp	r0, #0
 800b196:	dc06      	bgt.n	800b1a6 <__sflush_r+0xfe>
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e78e      	b.n	800b0c4 <__sflush_r+0x1c>
 800b1a6:	4407      	add	r7, r0
 800b1a8:	eba8 0800 	sub.w	r8, r8, r0
 800b1ac:	e7e9      	b.n	800b182 <__sflush_r+0xda>
 800b1ae:	bf00      	nop
 800b1b0:	20400001 	.word	0x20400001

0800b1b4 <_fflush_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	690b      	ldr	r3, [r1, #16]
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	b913      	cbnz	r3, 800b1c4 <_fflush_r+0x10>
 800b1be:	2500      	movs	r5, #0
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	b118      	cbz	r0, 800b1ce <_fflush_r+0x1a>
 800b1c6:	6983      	ldr	r3, [r0, #24]
 800b1c8:	b90b      	cbnz	r3, 800b1ce <_fflush_r+0x1a>
 800b1ca:	f000 f887 	bl	800b2dc <__sinit>
 800b1ce:	4b14      	ldr	r3, [pc, #80]	; (800b220 <_fflush_r+0x6c>)
 800b1d0:	429c      	cmp	r4, r3
 800b1d2:	d11b      	bne.n	800b20c <_fflush_r+0x58>
 800b1d4:	686c      	ldr	r4, [r5, #4]
 800b1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0ef      	beq.n	800b1be <_fflush_r+0xa>
 800b1de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1e0:	07d0      	lsls	r0, r2, #31
 800b1e2:	d404      	bmi.n	800b1ee <_fflush_r+0x3a>
 800b1e4:	0599      	lsls	r1, r3, #22
 800b1e6:	d402      	bmi.n	800b1ee <_fflush_r+0x3a>
 800b1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ea:	f7ff fcf8 	bl	800abde <__retarget_lock_acquire_recursive>
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	f7ff ff59 	bl	800b0a8 <__sflush_r>
 800b1f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1f8:	07da      	lsls	r2, r3, #31
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	d4e0      	bmi.n	800b1c0 <_fflush_r+0xc>
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	059b      	lsls	r3, r3, #22
 800b202:	d4dd      	bmi.n	800b1c0 <_fflush_r+0xc>
 800b204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b206:	f7ff fceb 	bl	800abe0 <__retarget_lock_release_recursive>
 800b20a:	e7d9      	b.n	800b1c0 <_fflush_r+0xc>
 800b20c:	4b05      	ldr	r3, [pc, #20]	; (800b224 <_fflush_r+0x70>)
 800b20e:	429c      	cmp	r4, r3
 800b210:	d101      	bne.n	800b216 <_fflush_r+0x62>
 800b212:	68ac      	ldr	r4, [r5, #8]
 800b214:	e7df      	b.n	800b1d6 <_fflush_r+0x22>
 800b216:	4b04      	ldr	r3, [pc, #16]	; (800b228 <_fflush_r+0x74>)
 800b218:	429c      	cmp	r4, r3
 800b21a:	bf08      	it	eq
 800b21c:	68ec      	ldreq	r4, [r5, #12]
 800b21e:	e7da      	b.n	800b1d6 <_fflush_r+0x22>
 800b220:	08015494 	.word	0x08015494
 800b224:	080154b4 	.word	0x080154b4
 800b228:	08015474 	.word	0x08015474

0800b22c <std>:
 800b22c:	2300      	movs	r3, #0
 800b22e:	b510      	push	{r4, lr}
 800b230:	4604      	mov	r4, r0
 800b232:	e9c0 3300 	strd	r3, r3, [r0]
 800b236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b23a:	6083      	str	r3, [r0, #8]
 800b23c:	8181      	strh	r1, [r0, #12]
 800b23e:	6643      	str	r3, [r0, #100]	; 0x64
 800b240:	81c2      	strh	r2, [r0, #14]
 800b242:	6183      	str	r3, [r0, #24]
 800b244:	4619      	mov	r1, r3
 800b246:	2208      	movs	r2, #8
 800b248:	305c      	adds	r0, #92	; 0x5c
 800b24a:	f7fd fb67 	bl	800891c <memset>
 800b24e:	4b05      	ldr	r3, [pc, #20]	; (800b264 <std+0x38>)
 800b250:	6263      	str	r3, [r4, #36]	; 0x24
 800b252:	4b05      	ldr	r3, [pc, #20]	; (800b268 <std+0x3c>)
 800b254:	62a3      	str	r3, [r4, #40]	; 0x28
 800b256:	4b05      	ldr	r3, [pc, #20]	; (800b26c <std+0x40>)
 800b258:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b25a:	4b05      	ldr	r3, [pc, #20]	; (800b270 <std+0x44>)
 800b25c:	6224      	str	r4, [r4, #32]
 800b25e:	6323      	str	r3, [r4, #48]	; 0x30
 800b260:	bd10      	pop	{r4, pc}
 800b262:	bf00      	nop
 800b264:	0800b569 	.word	0x0800b569
 800b268:	0800b58b 	.word	0x0800b58b
 800b26c:	0800b5c3 	.word	0x0800b5c3
 800b270:	0800b5e7 	.word	0x0800b5e7

0800b274 <_cleanup_r>:
 800b274:	4901      	ldr	r1, [pc, #4]	; (800b27c <_cleanup_r+0x8>)
 800b276:	f000 b8af 	b.w	800b3d8 <_fwalk_reent>
 800b27a:	bf00      	nop
 800b27c:	0800b1b5 	.word	0x0800b1b5

0800b280 <__sfmoreglue>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	2268      	movs	r2, #104	; 0x68
 800b284:	1e4d      	subs	r5, r1, #1
 800b286:	4355      	muls	r5, r2
 800b288:	460e      	mov	r6, r1
 800b28a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b28e:	f7fd fbb9 	bl	8008a04 <_malloc_r>
 800b292:	4604      	mov	r4, r0
 800b294:	b140      	cbz	r0, 800b2a8 <__sfmoreglue+0x28>
 800b296:	2100      	movs	r1, #0
 800b298:	e9c0 1600 	strd	r1, r6, [r0]
 800b29c:	300c      	adds	r0, #12
 800b29e:	60a0      	str	r0, [r4, #8]
 800b2a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2a4:	f7fd fb3a 	bl	800891c <memset>
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}

0800b2ac <__sfp_lock_acquire>:
 800b2ac:	4801      	ldr	r0, [pc, #4]	; (800b2b4 <__sfp_lock_acquire+0x8>)
 800b2ae:	f7ff bc96 	b.w	800abde <__retarget_lock_acquire_recursive>
 800b2b2:	bf00      	nop
 800b2b4:	20024781 	.word	0x20024781

0800b2b8 <__sfp_lock_release>:
 800b2b8:	4801      	ldr	r0, [pc, #4]	; (800b2c0 <__sfp_lock_release+0x8>)
 800b2ba:	f7ff bc91 	b.w	800abe0 <__retarget_lock_release_recursive>
 800b2be:	bf00      	nop
 800b2c0:	20024781 	.word	0x20024781

0800b2c4 <__sinit_lock_acquire>:
 800b2c4:	4801      	ldr	r0, [pc, #4]	; (800b2cc <__sinit_lock_acquire+0x8>)
 800b2c6:	f7ff bc8a 	b.w	800abde <__retarget_lock_acquire_recursive>
 800b2ca:	bf00      	nop
 800b2cc:	20024782 	.word	0x20024782

0800b2d0 <__sinit_lock_release>:
 800b2d0:	4801      	ldr	r0, [pc, #4]	; (800b2d8 <__sinit_lock_release+0x8>)
 800b2d2:	f7ff bc85 	b.w	800abe0 <__retarget_lock_release_recursive>
 800b2d6:	bf00      	nop
 800b2d8:	20024782 	.word	0x20024782

0800b2dc <__sinit>:
 800b2dc:	b510      	push	{r4, lr}
 800b2de:	4604      	mov	r4, r0
 800b2e0:	f7ff fff0 	bl	800b2c4 <__sinit_lock_acquire>
 800b2e4:	69a3      	ldr	r3, [r4, #24]
 800b2e6:	b11b      	cbz	r3, 800b2f0 <__sinit+0x14>
 800b2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ec:	f7ff bff0 	b.w	800b2d0 <__sinit_lock_release>
 800b2f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b2f4:	6523      	str	r3, [r4, #80]	; 0x50
 800b2f6:	4b13      	ldr	r3, [pc, #76]	; (800b344 <__sinit+0x68>)
 800b2f8:	4a13      	ldr	r2, [pc, #76]	; (800b348 <__sinit+0x6c>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b2fe:	42a3      	cmp	r3, r4
 800b300:	bf04      	itt	eq
 800b302:	2301      	moveq	r3, #1
 800b304:	61a3      	streq	r3, [r4, #24]
 800b306:	4620      	mov	r0, r4
 800b308:	f000 f820 	bl	800b34c <__sfp>
 800b30c:	6060      	str	r0, [r4, #4]
 800b30e:	4620      	mov	r0, r4
 800b310:	f000 f81c 	bl	800b34c <__sfp>
 800b314:	60a0      	str	r0, [r4, #8]
 800b316:	4620      	mov	r0, r4
 800b318:	f000 f818 	bl	800b34c <__sfp>
 800b31c:	2200      	movs	r2, #0
 800b31e:	60e0      	str	r0, [r4, #12]
 800b320:	2104      	movs	r1, #4
 800b322:	6860      	ldr	r0, [r4, #4]
 800b324:	f7ff ff82 	bl	800b22c <std>
 800b328:	68a0      	ldr	r0, [r4, #8]
 800b32a:	2201      	movs	r2, #1
 800b32c:	2109      	movs	r1, #9
 800b32e:	f7ff ff7d 	bl	800b22c <std>
 800b332:	68e0      	ldr	r0, [r4, #12]
 800b334:	2202      	movs	r2, #2
 800b336:	2112      	movs	r1, #18
 800b338:	f7ff ff78 	bl	800b22c <std>
 800b33c:	2301      	movs	r3, #1
 800b33e:	61a3      	str	r3, [r4, #24]
 800b340:	e7d2      	b.n	800b2e8 <__sinit+0xc>
 800b342:	bf00      	nop
 800b344:	080150fc 	.word	0x080150fc
 800b348:	0800b275 	.word	0x0800b275

0800b34c <__sfp>:
 800b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34e:	4607      	mov	r7, r0
 800b350:	f7ff ffac 	bl	800b2ac <__sfp_lock_acquire>
 800b354:	4b1e      	ldr	r3, [pc, #120]	; (800b3d0 <__sfp+0x84>)
 800b356:	681e      	ldr	r6, [r3, #0]
 800b358:	69b3      	ldr	r3, [r6, #24]
 800b35a:	b913      	cbnz	r3, 800b362 <__sfp+0x16>
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff ffbd 	bl	800b2dc <__sinit>
 800b362:	3648      	adds	r6, #72	; 0x48
 800b364:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b368:	3b01      	subs	r3, #1
 800b36a:	d503      	bpl.n	800b374 <__sfp+0x28>
 800b36c:	6833      	ldr	r3, [r6, #0]
 800b36e:	b30b      	cbz	r3, 800b3b4 <__sfp+0x68>
 800b370:	6836      	ldr	r6, [r6, #0]
 800b372:	e7f7      	b.n	800b364 <__sfp+0x18>
 800b374:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b378:	b9d5      	cbnz	r5, 800b3b0 <__sfp+0x64>
 800b37a:	4b16      	ldr	r3, [pc, #88]	; (800b3d4 <__sfp+0x88>)
 800b37c:	60e3      	str	r3, [r4, #12]
 800b37e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b382:	6665      	str	r5, [r4, #100]	; 0x64
 800b384:	f7ff fc2a 	bl	800abdc <__retarget_lock_init_recursive>
 800b388:	f7ff ff96 	bl	800b2b8 <__sfp_lock_release>
 800b38c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b394:	6025      	str	r5, [r4, #0]
 800b396:	61a5      	str	r5, [r4, #24]
 800b398:	2208      	movs	r2, #8
 800b39a:	4629      	mov	r1, r5
 800b39c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3a0:	f7fd fabc 	bl	800891c <memset>
 800b3a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b0:	3468      	adds	r4, #104	; 0x68
 800b3b2:	e7d9      	b.n	800b368 <__sfp+0x1c>
 800b3b4:	2104      	movs	r1, #4
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	f7ff ff62 	bl	800b280 <__sfmoreglue>
 800b3bc:	4604      	mov	r4, r0
 800b3be:	6030      	str	r0, [r6, #0]
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d1d5      	bne.n	800b370 <__sfp+0x24>
 800b3c4:	f7ff ff78 	bl	800b2b8 <__sfp_lock_release>
 800b3c8:	230c      	movs	r3, #12
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	e7ee      	b.n	800b3ac <__sfp+0x60>
 800b3ce:	bf00      	nop
 800b3d0:	080150fc 	.word	0x080150fc
 800b3d4:	ffff0001 	.word	0xffff0001

0800b3d8 <_fwalk_reent>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	4606      	mov	r6, r0
 800b3de:	4688      	mov	r8, r1
 800b3e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b3e4:	2700      	movs	r7, #0
 800b3e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3ea:	f1b9 0901 	subs.w	r9, r9, #1
 800b3ee:	d505      	bpl.n	800b3fc <_fwalk_reent+0x24>
 800b3f0:	6824      	ldr	r4, [r4, #0]
 800b3f2:	2c00      	cmp	r4, #0
 800b3f4:	d1f7      	bne.n	800b3e6 <_fwalk_reent+0xe>
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3fc:	89ab      	ldrh	r3, [r5, #12]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d907      	bls.n	800b412 <_fwalk_reent+0x3a>
 800b402:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b406:	3301      	adds	r3, #1
 800b408:	d003      	beq.n	800b412 <_fwalk_reent+0x3a>
 800b40a:	4629      	mov	r1, r5
 800b40c:	4630      	mov	r0, r6
 800b40e:	47c0      	blx	r8
 800b410:	4307      	orrs	r7, r0
 800b412:	3568      	adds	r5, #104	; 0x68
 800b414:	e7e9      	b.n	800b3ea <_fwalk_reent+0x12>

0800b416 <__swhatbuf_r>:
 800b416:	b570      	push	{r4, r5, r6, lr}
 800b418:	460e      	mov	r6, r1
 800b41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41e:	2900      	cmp	r1, #0
 800b420:	b096      	sub	sp, #88	; 0x58
 800b422:	4614      	mov	r4, r2
 800b424:	461d      	mov	r5, r3
 800b426:	da08      	bge.n	800b43a <__swhatbuf_r+0x24>
 800b428:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	602a      	str	r2, [r5, #0]
 800b430:	061a      	lsls	r2, r3, #24
 800b432:	d410      	bmi.n	800b456 <__swhatbuf_r+0x40>
 800b434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b438:	e00e      	b.n	800b458 <__swhatbuf_r+0x42>
 800b43a:	466a      	mov	r2, sp
 800b43c:	f000 f8fa 	bl	800b634 <_fstat_r>
 800b440:	2800      	cmp	r0, #0
 800b442:	dbf1      	blt.n	800b428 <__swhatbuf_r+0x12>
 800b444:	9a01      	ldr	r2, [sp, #4]
 800b446:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b44a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b44e:	425a      	negs	r2, r3
 800b450:	415a      	adcs	r2, r3
 800b452:	602a      	str	r2, [r5, #0]
 800b454:	e7ee      	b.n	800b434 <__swhatbuf_r+0x1e>
 800b456:	2340      	movs	r3, #64	; 0x40
 800b458:	2000      	movs	r0, #0
 800b45a:	6023      	str	r3, [r4, #0]
 800b45c:	b016      	add	sp, #88	; 0x58
 800b45e:	bd70      	pop	{r4, r5, r6, pc}

0800b460 <__smakebuf_r>:
 800b460:	898b      	ldrh	r3, [r1, #12]
 800b462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b464:	079d      	lsls	r5, r3, #30
 800b466:	4606      	mov	r6, r0
 800b468:	460c      	mov	r4, r1
 800b46a:	d507      	bpl.n	800b47c <__smakebuf_r+0x1c>
 800b46c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	6123      	str	r3, [r4, #16]
 800b474:	2301      	movs	r3, #1
 800b476:	6163      	str	r3, [r4, #20]
 800b478:	b002      	add	sp, #8
 800b47a:	bd70      	pop	{r4, r5, r6, pc}
 800b47c:	ab01      	add	r3, sp, #4
 800b47e:	466a      	mov	r2, sp
 800b480:	f7ff ffc9 	bl	800b416 <__swhatbuf_r>
 800b484:	9900      	ldr	r1, [sp, #0]
 800b486:	4605      	mov	r5, r0
 800b488:	4630      	mov	r0, r6
 800b48a:	f7fd fabb 	bl	8008a04 <_malloc_r>
 800b48e:	b948      	cbnz	r0, 800b4a4 <__smakebuf_r+0x44>
 800b490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b494:	059a      	lsls	r2, r3, #22
 800b496:	d4ef      	bmi.n	800b478 <__smakebuf_r+0x18>
 800b498:	f023 0303 	bic.w	r3, r3, #3
 800b49c:	f043 0302 	orr.w	r3, r3, #2
 800b4a0:	81a3      	strh	r3, [r4, #12]
 800b4a2:	e7e3      	b.n	800b46c <__smakebuf_r+0xc>
 800b4a4:	4b0d      	ldr	r3, [pc, #52]	; (800b4dc <__smakebuf_r+0x7c>)
 800b4a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	6020      	str	r0, [r4, #0]
 800b4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b0:	81a3      	strh	r3, [r4, #12]
 800b4b2:	9b00      	ldr	r3, [sp, #0]
 800b4b4:	6163      	str	r3, [r4, #20]
 800b4b6:	9b01      	ldr	r3, [sp, #4]
 800b4b8:	6120      	str	r0, [r4, #16]
 800b4ba:	b15b      	cbz	r3, 800b4d4 <__smakebuf_r+0x74>
 800b4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f000 f8c9 	bl	800b658 <_isatty_r>
 800b4c6:	b128      	cbz	r0, 800b4d4 <__smakebuf_r+0x74>
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	f023 0303 	bic.w	r3, r3, #3
 800b4ce:	f043 0301 	orr.w	r3, r3, #1
 800b4d2:	81a3      	strh	r3, [r4, #12]
 800b4d4:	89a0      	ldrh	r0, [r4, #12]
 800b4d6:	4305      	orrs	r5, r0
 800b4d8:	81a5      	strh	r5, [r4, #12]
 800b4da:	e7cd      	b.n	800b478 <__smakebuf_r+0x18>
 800b4dc:	0800b275 	.word	0x0800b275

0800b4e0 <_raise_r>:
 800b4e0:	291f      	cmp	r1, #31
 800b4e2:	b538      	push	{r3, r4, r5, lr}
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	460d      	mov	r5, r1
 800b4e8:	d904      	bls.n	800b4f4 <_raise_r+0x14>
 800b4ea:	2316      	movs	r3, #22
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4f6:	b112      	cbz	r2, 800b4fe <_raise_r+0x1e>
 800b4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4fc:	b94b      	cbnz	r3, 800b512 <_raise_r+0x32>
 800b4fe:	4620      	mov	r0, r4
 800b500:	f000 f830 	bl	800b564 <_getpid_r>
 800b504:	462a      	mov	r2, r5
 800b506:	4601      	mov	r1, r0
 800b508:	4620      	mov	r0, r4
 800b50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b50e:	f000 b817 	b.w	800b540 <_kill_r>
 800b512:	2b01      	cmp	r3, #1
 800b514:	d00a      	beq.n	800b52c <_raise_r+0x4c>
 800b516:	1c59      	adds	r1, r3, #1
 800b518:	d103      	bne.n	800b522 <_raise_r+0x42>
 800b51a:	2316      	movs	r3, #22
 800b51c:	6003      	str	r3, [r0, #0]
 800b51e:	2001      	movs	r0, #1
 800b520:	e7e7      	b.n	800b4f2 <_raise_r+0x12>
 800b522:	2400      	movs	r4, #0
 800b524:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b528:	4628      	mov	r0, r5
 800b52a:	4798      	blx	r3
 800b52c:	2000      	movs	r0, #0
 800b52e:	e7e0      	b.n	800b4f2 <_raise_r+0x12>

0800b530 <raise>:
 800b530:	4b02      	ldr	r3, [pc, #8]	; (800b53c <raise+0xc>)
 800b532:	4601      	mov	r1, r0
 800b534:	6818      	ldr	r0, [r3, #0]
 800b536:	f7ff bfd3 	b.w	800b4e0 <_raise_r>
 800b53a:	bf00      	nop
 800b53c:	200006a0 	.word	0x200006a0

0800b540 <_kill_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	; (800b560 <_kill_r+0x20>)
 800b544:	2300      	movs	r3, #0
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	4611      	mov	r1, r2
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	f7f6 ffe1 	bl	8002514 <_kill>
 800b552:	1c43      	adds	r3, r0, #1
 800b554:	d102      	bne.n	800b55c <_kill_r+0x1c>
 800b556:	682b      	ldr	r3, [r5, #0]
 800b558:	b103      	cbz	r3, 800b55c <_kill_r+0x1c>
 800b55a:	6023      	str	r3, [r4, #0]
 800b55c:	bd38      	pop	{r3, r4, r5, pc}
 800b55e:	bf00      	nop
 800b560:	2002477c 	.word	0x2002477c

0800b564 <_getpid_r>:
 800b564:	f7f6 bfce 	b.w	8002504 <_getpid>

0800b568 <__sread>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	460c      	mov	r4, r1
 800b56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b570:	f000 f894 	bl	800b69c <_read_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	bfab      	itete	ge
 800b578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b57a:	89a3      	ldrhlt	r3, [r4, #12]
 800b57c:	181b      	addge	r3, r3, r0
 800b57e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b582:	bfac      	ite	ge
 800b584:	6563      	strge	r3, [r4, #84]	; 0x54
 800b586:	81a3      	strhlt	r3, [r4, #12]
 800b588:	bd10      	pop	{r4, pc}

0800b58a <__swrite>:
 800b58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58e:	461f      	mov	r7, r3
 800b590:	898b      	ldrh	r3, [r1, #12]
 800b592:	05db      	lsls	r3, r3, #23
 800b594:	4605      	mov	r5, r0
 800b596:	460c      	mov	r4, r1
 800b598:	4616      	mov	r6, r2
 800b59a:	d505      	bpl.n	800b5a8 <__swrite+0x1e>
 800b59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f000 f868 	bl	800b678 <_lseek_r>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	463b      	mov	r3, r7
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5be:	f000 b817 	b.w	800b5f0 <_write_r>

0800b5c2 <__sseek>:
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ca:	f000 f855 	bl	800b678 <_lseek_r>
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	bf15      	itete	ne
 800b5d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5de:	81a3      	strheq	r3, [r4, #12]
 800b5e0:	bf18      	it	ne
 800b5e2:	81a3      	strhne	r3, [r4, #12]
 800b5e4:	bd10      	pop	{r4, pc}

0800b5e6 <__sclose>:
 800b5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ea:	f000 b813 	b.w	800b614 <_close_r>
	...

0800b5f0 <_write_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4d07      	ldr	r5, [pc, #28]	; (800b610 <_write_r+0x20>)
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	4608      	mov	r0, r1
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	602a      	str	r2, [r5, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	f7f6 ffbf 	bl	8002582 <_write>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d102      	bne.n	800b60e <_write_r+0x1e>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	b103      	cbz	r3, 800b60e <_write_r+0x1e>
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
 800b610:	2002477c 	.word	0x2002477c

0800b614 <_close_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4d06      	ldr	r5, [pc, #24]	; (800b630 <_close_r+0x1c>)
 800b618:	2300      	movs	r3, #0
 800b61a:	4604      	mov	r4, r0
 800b61c:	4608      	mov	r0, r1
 800b61e:	602b      	str	r3, [r5, #0]
 800b620:	f7f6 ffcb 	bl	80025ba <_close>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d102      	bne.n	800b62e <_close_r+0x1a>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	b103      	cbz	r3, 800b62e <_close_r+0x1a>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	2002477c 	.word	0x2002477c

0800b634 <_fstat_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	; (800b654 <_fstat_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f6 ffc6 	bl	80025d2 <_fstat>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_fstat_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_fstat_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	2002477c 	.word	0x2002477c

0800b658 <_isatty_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d06      	ldr	r5, [pc, #24]	; (800b674 <_isatty_r+0x1c>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	f7f6 ffc5 	bl	80025f2 <_isatty>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_isatty_r+0x1a>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_isatty_r+0x1a>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	2002477c 	.word	0x2002477c

0800b678 <_lseek_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	; (800b698 <_lseek_r+0x20>)
 800b67c:	4604      	mov	r4, r0
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	2200      	movs	r2, #0
 800b684:	602a      	str	r2, [r5, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	f7f6 ffbe 	bl	8002608 <_lseek>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_lseek_r+0x1e>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_lseek_r+0x1e>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	2002477c 	.word	0x2002477c

0800b69c <_read_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d07      	ldr	r5, [pc, #28]	; (800b6bc <_read_r+0x20>)
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	4608      	mov	r0, r1
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	602a      	str	r2, [r5, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f7f6 ff4c 	bl	8002548 <_read>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_read_r+0x1e>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_read_r+0x1e>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	2002477c 	.word	0x2002477c

0800b6c0 <expf>:
 800b6c0:	b508      	push	{r3, lr}
 800b6c2:	ed2d 8b02 	vpush	{d8}
 800b6c6:	eef0 8a40 	vmov.f32	s17, s0
 800b6ca:	f000 f84d 	bl	800b768 <__ieee754_expf>
 800b6ce:	eeb0 8a40 	vmov.f32	s16, s0
 800b6d2:	eeb0 0a68 	vmov.f32	s0, s17
 800b6d6:	f000 f93b 	bl	800b950 <finitef>
 800b6da:	b160      	cbz	r0, 800b6f6 <expf+0x36>
 800b6dc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b71c <expf+0x5c>
 800b6e0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e8:	dd0a      	ble.n	800b700 <expf+0x40>
 800b6ea:	f7fd f8d7 	bl	800889c <__errno>
 800b6ee:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800b720 <expf+0x60>
 800b6f2:	2322      	movs	r3, #34	; 0x22
 800b6f4:	6003      	str	r3, [r0, #0]
 800b6f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b6fa:	ecbd 8b02 	vpop	{d8}
 800b6fe:	bd08      	pop	{r3, pc}
 800b700:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b724 <expf+0x64>
 800b704:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70c:	d5f3      	bpl.n	800b6f6 <expf+0x36>
 800b70e:	f7fd f8c5 	bl	800889c <__errno>
 800b712:	2322      	movs	r3, #34	; 0x22
 800b714:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800b728 <expf+0x68>
 800b718:	6003      	str	r3, [r0, #0]
 800b71a:	e7ec      	b.n	800b6f6 <expf+0x36>
 800b71c:	42b17180 	.word	0x42b17180
 800b720:	7f800000 	.word	0x7f800000
 800b724:	c2cff1b5 	.word	0xc2cff1b5
 800b728:	00000000 	.word	0x00000000

0800b72c <sqrtf>:
 800b72c:	b508      	push	{r3, lr}
 800b72e:	ed2d 8b02 	vpush	{d8}
 800b732:	eeb0 8a40 	vmov.f32	s16, s0
 800b736:	f000 f8e5 	bl	800b904 <__ieee754_sqrtf>
 800b73a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b742:	d60c      	bvs.n	800b75e <sqrtf+0x32>
 800b744:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b764 <sqrtf+0x38>
 800b748:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b750:	d505      	bpl.n	800b75e <sqrtf+0x32>
 800b752:	f7fd f8a3 	bl	800889c <__errno>
 800b756:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b75a:	2321      	movs	r3, #33	; 0x21
 800b75c:	6003      	str	r3, [r0, #0]
 800b75e:	ecbd 8b02 	vpop	{d8}
 800b762:	bd08      	pop	{r3, pc}
 800b764:	00000000 	.word	0x00000000

0800b768 <__ieee754_expf>:
 800b768:	ee10 2a10 	vmov	r2, s0
 800b76c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b770:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b774:	d902      	bls.n	800b77c <__ieee754_expf+0x14>
 800b776:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b77a:	4770      	bx	lr
 800b77c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800b780:	d106      	bne.n	800b790 <__ieee754_expf+0x28>
 800b782:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800b8bc <__ieee754_expf+0x154>
 800b786:	2b00      	cmp	r3, #0
 800b788:	bf18      	it	ne
 800b78a:	eeb0 0a67 	vmovne.f32	s0, s15
 800b78e:	4770      	bx	lr
 800b790:	484b      	ldr	r0, [pc, #300]	; (800b8c0 <__ieee754_expf+0x158>)
 800b792:	4282      	cmp	r2, r0
 800b794:	dd02      	ble.n	800b79c <__ieee754_expf+0x34>
 800b796:	2000      	movs	r0, #0
 800b798:	f000 b8d4 	b.w	800b944 <__math_oflowf>
 800b79c:	2a00      	cmp	r2, #0
 800b79e:	da05      	bge.n	800b7ac <__ieee754_expf+0x44>
 800b7a0:	4a48      	ldr	r2, [pc, #288]	; (800b8c4 <__ieee754_expf+0x15c>)
 800b7a2:	4291      	cmp	r1, r2
 800b7a4:	d902      	bls.n	800b7ac <__ieee754_expf+0x44>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	f000 b8c6 	b.w	800b938 <__math_uflowf>
 800b7ac:	4a46      	ldr	r2, [pc, #280]	; (800b8c8 <__ieee754_expf+0x160>)
 800b7ae:	4291      	cmp	r1, r2
 800b7b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b7b4:	d952      	bls.n	800b85c <__ieee754_expf+0xf4>
 800b7b6:	4a45      	ldr	r2, [pc, #276]	; (800b8cc <__ieee754_expf+0x164>)
 800b7b8:	4291      	cmp	r1, r2
 800b7ba:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b7be:	d834      	bhi.n	800b82a <__ieee754_expf+0xc2>
 800b7c0:	4943      	ldr	r1, [pc, #268]	; (800b8d0 <__ieee754_expf+0x168>)
 800b7c2:	4411      	add	r1, r2
 800b7c4:	ed91 7a00 	vldr	s14, [r1]
 800b7c8:	4942      	ldr	r1, [pc, #264]	; (800b8d4 <__ieee754_expf+0x16c>)
 800b7ca:	440a      	add	r2, r1
 800b7cc:	edd2 7a00 	vldr	s15, [r2]
 800b7d0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b7d4:	f1c3 0201 	rsb	r2, r3, #1
 800b7d8:	1ad2      	subs	r2, r2, r3
 800b7da:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b7de:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b7e2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800b8d8 <__ieee754_expf+0x170>
 800b7e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b8dc <__ieee754_expf+0x174>
 800b7ea:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b7ee:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800b8e0 <__ieee754_expf+0x178>
 800b7f2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b7f6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b8e4 <__ieee754_expf+0x17c>
 800b7fa:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b7fe:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800b8e8 <__ieee754_expf+0x180>
 800b802:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b806:	eef0 6a40 	vmov.f32	s13, s0
 800b80a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b80e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b812:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b816:	bb92      	cbnz	r2, 800b87e <__ieee754_expf+0x116>
 800b818:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b81c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b820:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b824:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b828:	4770      	bx	lr
 800b82a:	4b30      	ldr	r3, [pc, #192]	; (800b8ec <__ieee754_expf+0x184>)
 800b82c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b8f0 <__ieee754_expf+0x188>
 800b830:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b8f4 <__ieee754_expf+0x18c>
 800b834:	4413      	add	r3, r2
 800b836:	edd3 7a00 	vldr	s15, [r3]
 800b83a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b83e:	eeb0 7a40 	vmov.f32	s14, s0
 800b842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b846:	ee17 2a90 	vmov	r2, s15
 800b84a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b84e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b852:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b8f8 <__ieee754_expf+0x190>
 800b856:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b85a:	e7be      	b.n	800b7da <__ieee754_expf+0x72>
 800b85c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800b860:	d20b      	bcs.n	800b87a <__ieee754_expf+0x112>
 800b862:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b8fc <__ieee754_expf+0x194>
 800b866:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b86a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b872:	dd02      	ble.n	800b87a <__ieee754_expf+0x112>
 800b874:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b878:	4770      	bx	lr
 800b87a:	2200      	movs	r2, #0
 800b87c:	e7af      	b.n	800b7de <__ieee754_expf+0x76>
 800b87e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b882:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b886:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b88a:	bfb8      	it	lt
 800b88c:	3264      	addlt	r2, #100	; 0x64
 800b88e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b892:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b896:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800b89a:	ee17 3a90 	vmov	r3, s15
 800b89e:	bfab      	itete	ge
 800b8a0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b8a4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b8a8:	ee00 3a10 	vmovge	s0, r3
 800b8ac:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800b900 <__ieee754_expf+0x198>
 800b8b0:	bfbc      	itt	lt
 800b8b2:	ee00 3a10 	vmovlt	s0, r3
 800b8b6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b8ba:	4770      	bx	lr
 800b8bc:	00000000 	.word	0x00000000
 800b8c0:	42b17217 	.word	0x42b17217
 800b8c4:	42cff1b5 	.word	0x42cff1b5
 800b8c8:	3eb17218 	.word	0x3eb17218
 800b8cc:	3f851591 	.word	0x3f851591
 800b8d0:	080154dc 	.word	0x080154dc
 800b8d4:	080154e4 	.word	0x080154e4
 800b8d8:	3331bb4c 	.word	0x3331bb4c
 800b8dc:	b5ddea0e 	.word	0xb5ddea0e
 800b8e0:	388ab355 	.word	0x388ab355
 800b8e4:	bb360b61 	.word	0xbb360b61
 800b8e8:	3e2aaaab 	.word	0x3e2aaaab
 800b8ec:	080154d4 	.word	0x080154d4
 800b8f0:	3fb8aa3b 	.word	0x3fb8aa3b
 800b8f4:	3f317180 	.word	0x3f317180
 800b8f8:	3717f7d1 	.word	0x3717f7d1
 800b8fc:	7149f2ca 	.word	0x7149f2ca
 800b900:	0d800000 	.word	0x0d800000

0800b904 <__ieee754_sqrtf>:
 800b904:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b908:	4770      	bx	lr

0800b90a <with_errnof>:
 800b90a:	b513      	push	{r0, r1, r4, lr}
 800b90c:	4604      	mov	r4, r0
 800b90e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b912:	f7fc ffc3 	bl	800889c <__errno>
 800b916:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b91a:	6004      	str	r4, [r0, #0]
 800b91c:	b002      	add	sp, #8
 800b91e:	bd10      	pop	{r4, pc}

0800b920 <xflowf>:
 800b920:	b130      	cbz	r0, 800b930 <xflowf+0x10>
 800b922:	eef1 7a40 	vneg.f32	s15, s0
 800b926:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b92a:	2022      	movs	r0, #34	; 0x22
 800b92c:	f7ff bfed 	b.w	800b90a <with_errnof>
 800b930:	eef0 7a40 	vmov.f32	s15, s0
 800b934:	e7f7      	b.n	800b926 <xflowf+0x6>
	...

0800b938 <__math_uflowf>:
 800b938:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b940 <__math_uflowf+0x8>
 800b93c:	f7ff bff0 	b.w	800b920 <xflowf>
 800b940:	10000000 	.word	0x10000000

0800b944 <__math_oflowf>:
 800b944:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b94c <__math_oflowf+0x8>
 800b948:	f7ff bfea 	b.w	800b920 <xflowf>
 800b94c:	70000000 	.word	0x70000000

0800b950 <finitef>:
 800b950:	b082      	sub	sp, #8
 800b952:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b956:	9801      	ldr	r0, [sp, #4]
 800b958:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b95c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b960:	bfac      	ite	ge
 800b962:	2000      	movge	r0, #0
 800b964:	2001      	movlt	r0, #1
 800b966:	b002      	add	sp, #8
 800b968:	4770      	bx	lr
	...

0800b96c <_init>:
 800b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96e:	bf00      	nop
 800b970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b972:	bc08      	pop	{r3}
 800b974:	469e      	mov	lr, r3
 800b976:	4770      	bx	lr

0800b978 <_fini>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	bf00      	nop
 800b97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b97e:	bc08      	pop	{r3}
 800b980:	469e      	mov	lr, r3
 800b982:	4770      	bx	lr
