
CubeMX_SPIv2_timer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c68c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001be04  0800c860  0800c860  0001c860  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028664  08028664  00040730  2**0
                  CONTENTS
  4 .ARM          00000008  08028664  08028664  00038664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802866c  0802866c  00040730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802866c  0802866c  0003866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028670  08028670  00038670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000730  20000000  08028674  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040730  2**0
                  CONTENTS
 10 .bss          0001af4c  20000730  20000730  00040730  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  2001b67c  2001b67c  00040730  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040730  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021708  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000496b  00000000  00000000  00061e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  000667d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011a8  00000000  00000000  00067ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf15  00000000  00000000  00068c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3d8  00000000  00000000  00095b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107356  00000000  00000000  000aff6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c5  00000000  00000000  001b72c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005de8  00000000  00000000  001b7388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003f85  00000000  00000000  001bd170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000730 	.word	0x20000730
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c834 	.word	0x0800c834

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000734 	.word	0x20000734
 80001fc:	0800c834 	.word	0x0800c834

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_CRC_Init+0x20>)
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <MX_CRC_Init+0x24>)
 8000ee4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_CRC_Init+0x20>)
 8000ee8:	f001 fd8b 	bl	8002a02 <HAL_CRC_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ef2:	f001 f85f 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000074c 	.word	0x2000074c
 8000f00:	40023000 	.word	0x40023000

08000f04 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_CRC_MspInit+0x3c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10d      	bne.n	8000f32 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_CRC_MspInit+0x40>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <HAL_CRC_MspInit+0x40>)
 8000f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <HAL_CRC_MspInit+0x40>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023000 	.word	0x40023000
 8000f44:	40023800 	.word	0x40023800

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2010      	movs	r0, #16
 8000f70:	f001 fd11 	bl	8002996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f74:	2010      	movs	r0, #16
 8000f76:	f001 fd2a 	bl	80029ce <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a3e      	ldr	r2, [pc, #248]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a37      	ldr	r2, [pc, #220]	; (80010d8 <MX_GPIO_Init+0x150>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a30      	ldr	r2, [pc, #192]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <MX_GPIO_Init+0x150>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_GPIO_Init+0x150>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2104      	movs	r1, #4
 800104a:	4824      	ldr	r0, [pc, #144]	; (80010dc <MX_GPIO_Init+0x154>)
 800104c:	f002 fa1e 	bl	800348c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001056:	4822      	ldr	r0, [pc, #136]	; (80010e0 <MX_GPIO_Init+0x158>)
 8001058:	f002 fa18 	bl	800348c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG4 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800105c:	2318      	movs	r3, #24
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001060:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <MX_GPIO_Init+0x154>)
 8001072:	f002 f85f 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001076:	2304      	movs	r3, #4
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <MX_GPIO_Init+0x154>)
 800108e:	f002 f851 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_GPIO_Init+0x158>)
 80010ac:	f002 f842 	bl	8003134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2009      	movs	r0, #9
 80010b6:	f001 fc6e 	bl	8002996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010ba:	2009      	movs	r0, #9
 80010bc:	f001 fc87 	bl	80029ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	200a      	movs	r0, #10
 80010c6:	f001 fc66 	bl	8002996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010ca:	200a      	movs	r0, #10
 80010cc:	f001 fc7f 	bl	80029ce <HAL_NVIC_EnableIRQ>

}
 80010d0:	bf00      	nop
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <uprintf>:
float Vettz[DIM];
volatile uint8_t flag_elapsed = 0;
ai_buffer *ai_input;
ai_buffer *ai_output;

void uprintf(char* str){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*)str, strlen(str), 100);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f887 	bl	8000200 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <uprintf+0x24>)
 80010fc:	f004 f957 	bl	80053ae <HAL_UART_Transmit>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2001b4f8 	.word	0x2001b4f8

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	f5ad 4d3d 	sub.w	sp, sp, #48384	; 0xbd00
 8001112:	b095      	sub	sp, #84	; 0x54
 8001114:	af00      	add	r7, sp, #0
 8001116:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800111a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800111e:	f5a3 433d 	sub.w	r3, r3, #48384	; 0xbd00
 8001122:	3b50      	subs	r3, #80	; 0x50
 8001124:	331f      	adds	r3, #31
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	015c      	lsls	r4, r3, #5
  /* USER CODE BEGIN 1 */

		spiSndX[0]=0x29|0x80;
 800112a:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <main+0xc4>)
 800112c:	22a9      	movs	r2, #169	; 0xa9
 800112e:	701a      	strb	r2, [r3, #0]
	    spiSndY[0]=0x2B|0x80;
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <main+0xc8>)
 8001132:	22ab      	movs	r2, #171	; 0xab
 8001134:	701a      	strb	r2, [r3, #0]
		spiSndZ[0]=0x2D|0x80;
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <main+0xcc>)
 8001138:	22ad      	movs	r2, #173	; 0xad
 800113a:	701a      	strb	r2, [r3, #0]
		spiSndXLSB[0]=0x28|0x80;
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <main+0xd0>)
 800113e:	22a8      	movs	r2, #168	; 0xa8
 8001140:	701a      	strb	r2, [r3, #0]
		spiSndYLSB[0]=0x2A|0x80;
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <main+0xd4>)
 8001144:	22aa      	movs	r2, #170	; 0xaa
 8001146:	701a      	strb	r2, [r3, #0]
		spiSndZLSB[0]=0x2C|0x80;
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <main+0xd8>)
 800114a:	22ac      	movs	r2, #172	; 0xac
 800114c:	701a      	strb	r2, [r3, #0]
		uint16_t x[DIM];
		uint16_t y[DIM];
		uint16_t z[DIM];
		int16_t k=0;
 800114e:	2300      	movs	r3, #0
 8001150:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001154:	f102 0212 	add.w	r2, r2, #18
 8001158:	8013      	strh	r3, [r2, #0]
		float acc;
		float typ=0.488;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <main+0xdc>)
 800115c:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001160:	f102 020c 	add.w	r2, r2, #12
 8001164:	6013      	str	r3, [r2, #0]
		int i=0;
 8001166:	2300      	movs	r3, #0
 8001168:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800116c:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001170:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001172:	f001 fac3 	bl	80026fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001176:	f000 feab 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117a:	f7ff ff05 	bl	8000f88 <MX_GPIO_Init>
  MX_DMA_Init();
 800117e:	f7ff fee3 	bl	8000f48 <MX_DMA_Init>
  MX_SPI1_Init();
 8001182:	f000 ff1d 	bl	8001fc0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001186:	f001 f98d 	bl	80024a4 <MX_USART2_UART_Init>
  MX_UART5_Init();
 800118a:	f001 f961 	bl	8002450 <MX_UART5_Init>
  MX_TIM2_Init();
 800118e:	f001 f8eb 	bl	8002368 <MX_TIM2_Init>
  MX_CRC_Init();
 8001192:	f7ff fea3 	bl	8000edc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart5);
 8001196:	4815      	ldr	r0, [pc, #84]	; (80011ec <main+0xe0>)
 8001198:	f001 f9ae 	bl	80024f8 <HAL_UART_MspInit>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2104      	movs	r1, #4
 80011a0:	4813      	ldr	r0, [pc, #76]	; (80011f0 <main+0xe4>)
 80011a2:	f002 f973 	bl	800348c <HAL_GPIO_WritePin>
  spiSnd[0]=0x10;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <main+0xe8>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
  spiSnd[1]=0xA4;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <main+0xe8>)
 80011ae:	22a4      	movs	r2, #164	; 0xa4
 80011b0:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit(&hspi1, spiSnd, 2, 100);
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	2202      	movs	r2, #2
 80011b6:	490f      	ldr	r1, [pc, #60]	; (80011f4 <main+0xe8>)
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <main+0xec>)
 80011ba:	f002 fee2 	bl	8003f82 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2104      	movs	r1, #4
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <main+0xe4>)
 80011c4:	f002 f962 	bl	800348c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim2);
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <main+0xf0>)
 80011ca:	f003 fc49 	bl	8004a60 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (i<DIM)
 80011ce:	e1cd      	b.n	800156c <main+0x460>
 80011d0:	20003878 	.word	0x20003878
 80011d4:	2000387c 	.word	0x2000387c
 80011d8:	20003880 	.word	0x20003880
 80011dc:	20003884 	.word	0x20003884
 80011e0:	20003888 	.word	0x20003888
 80011e4:	2000388c 	.word	0x2000388c
 80011e8:	3ef9db23 	.word	0x3ef9db23
 80011ec:	2001b4f8 	.word	0x2001b4f8
 80011f0:	40021800 	.word	0x40021800
 80011f4:	20003894 	.word	0x20003894
 80011f8:	2001b454 	.word	0x2001b454
 80011fc:	2001b4b0 	.word	0x2001b4b0
   {
 	 if((flag_elapsed=1))											//La funzione di interrupt abilita il flag per ogni n conteggi selezionati
 8001200:	4bcb      	ldr	r3, [pc, #812]	; (8001530 <main+0x424>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
 	 {
 		 flag_elapsed=0;										//flag=0 in modo che non rientro ma aspetto che sia l'interrupt ad alzarlo
 8001206:	4bca      	ldr	r3, [pc, #808]	; (8001530 <main+0x424>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]

 		//Asse X
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito SPI1
 800120c:	2200      	movs	r2, #0
 800120e:	2104      	movs	r1, #4
 8001210:	48c8      	ldr	r0, [pc, #800]	; (8001534 <main+0x428>)
 8001212:	f002 f93b 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndX, 1, 100);				//Trasmetto Indirizzo dove leggere istruzione
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	2201      	movs	r2, #1
 800121a:	49c7      	ldr	r1, [pc, #796]	; (8001538 <main+0x42c>)
 800121c:	48c7      	ldr	r0, [pc, #796]	; (800153c <main+0x430>)
 800121e:	f002 feb0 	bl	8003f82 <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);			//Ricevo Risultato di misura MSB (8bit)
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	2201      	movs	r2, #1
 8001226:	49c6      	ldr	r1, [pc, #792]	; (8001540 <main+0x434>)
 8001228:	48c4      	ldr	r0, [pc, #784]	; (800153c <main+0x430>)
 800122a:	f002 ffe6 	bl	80041fa <HAL_SPI_Receive>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 800122e:	2201      	movs	r2, #1
 8001230:	2104      	movs	r1, #4
 8001232:	48c0      	ldr	r0, [pc, #768]	; (8001534 <main+0x428>)
 8001234:	f002 f92a 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito la comunicazione SPI1 (NON POSSO FARE PIU OPERAZIONI CON UN'UNICA ATTIVAZIONE)
 8001238:	2200      	movs	r2, #0
 800123a:	2104      	movs	r1, #4
 800123c:	48bd      	ldr	r0, [pc, #756]	; (8001534 <main+0x428>)
 800123e:	f002 f925 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndXLSB, 1, 100);			//Trasmetto Indirizzo dove leggere istruzione
 8001242:	2364      	movs	r3, #100	; 0x64
 8001244:	2201      	movs	r2, #1
 8001246:	49bf      	ldr	r1, [pc, #764]	; (8001544 <main+0x438>)
 8001248:	48bc      	ldr	r0, [pc, #752]	; (800153c <main+0x430>)
 800124a:	f002 fe9a 	bl	8003f82 <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);			//Ricevo Risultato di misura LSB (8bit)
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	2201      	movs	r2, #1
 8001252:	49bd      	ldr	r1, [pc, #756]	; (8001548 <main+0x43c>)
 8001254:	48b9      	ldr	r0, [pc, #740]	; (800153c <main+0x430>)
 8001256:	f002 ffd0 	bl	80041fa <HAL_SPI_Receive>
 		x[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];				//Unisco MSB e LSB attraverso un'operazione di shift su 16bit
 800125a:	4bb9      	ldr	r3, [pc, #740]	; (8001540 <main+0x434>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	4bb7      	ldr	r3, [pc, #732]	; (8001540 <main+0x434>)
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	b299      	uxth	r1, r3
 800126e:	f507 430d 	add.w	r3, r7, #36096	; 0x8d00
 8001272:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001276:	f6a3 63cc 	subw	r3, r3, #3788	; 0xecc
 800127a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800127e:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 8001288:	2201      	movs	r2, #1
 800128a:	2104      	movs	r1, #4
 800128c:	48a9      	ldr	r0, [pc, #676]	; (8001534 <main+0x428>)
 800128e:	f002 f8fd 	bl	800348c <HAL_GPIO_WritePin>
 		k=(int16_t)x[i];										//Casting da uint a int (abilitazione del segno, complemento)
 8001292:	f507 430d 	add.w	r3, r7, #36096	; 0x8d00
 8001296:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800129a:	f6a3 63cc 	subw	r3, r3, #3788	; 0xecc
 800129e:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80012a2:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012ac:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80012b0:	f102 0212 	add.w	r2, r2, #18
 80012b4:	8013      	strh	r3, [r2, #0]
 		acc=(k*typ)/1000;										//Da datasheet, il dato letto, lo converto in scala g attraverso questo calcolo
 80012b6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80012ba:	f103 0312 	add.w	r3, r3, #18
 80012be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ca:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80012ce:	f103 030c 	add.w	r3, r3, #12
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012da:	eddf 6a9c 	vldr	s13, [pc, #624]	; 800154c <main+0x440>
 80012de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80012e6:	f103 0304 	add.w	r3, r3, #4
 80012ea:	edc3 7a00 	vstr	s15, [r3]
 		Vettx[i]=acc;											//Aggiungo la misura al vettore delle letture
 80012ee:	4a98      	ldr	r2, [pc, #608]	; (8001550 <main+0x444>)
 80012f0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80012f4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001302:	f102 0204 	add.w	r2, r2, #4
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	601a      	str	r2, [r3, #0]
 		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo


 		spiRcv[0]=0;
 800130a:	4b8d      	ldr	r3, [pc, #564]	; (8001540 <main+0x434>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
 		spiRcv[1]=0;
 8001310:	4b8b      	ldr	r3, [pc, #556]	; (8001540 <main+0x434>)
 8001312:	2200      	movs	r2, #0
 8001314:	705a      	strb	r2, [r3, #1]
 		//Asse Y
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito SPI1
 8001316:	2200      	movs	r2, #0
 8001318:	2104      	movs	r1, #4
 800131a:	4886      	ldr	r0, [pc, #536]	; (8001534 <main+0x428>)
 800131c:	f002 f8b6 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndY, 1, 100);				//Trasmetto Indirizzo dove leggere istruzione
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	2201      	movs	r2, #1
 8001324:	498b      	ldr	r1, [pc, #556]	; (8001554 <main+0x448>)
 8001326:	4885      	ldr	r0, [pc, #532]	; (800153c <main+0x430>)
 8001328:	f002 fe2b 	bl	8003f82 <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);			//Ricevo Risultato di misura MSB (8bit)
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	2201      	movs	r2, #1
 8001330:	4983      	ldr	r1, [pc, #524]	; (8001540 <main+0x434>)
 8001332:	4882      	ldr	r0, [pc, #520]	; (800153c <main+0x430>)
 8001334:	f002 ff61 	bl	80041fa <HAL_SPI_Receive>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 8001338:	2201      	movs	r2, #1
 800133a:	2104      	movs	r1, #4
 800133c:	487d      	ldr	r0, [pc, #500]	; (8001534 <main+0x428>)
 800133e:	f002 f8a5 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito la comunicazione SPI1 (NON POSSO FARE PIU OPERAZIONI CON UN'UNICA ATTIVAZIONE)
 8001342:	2200      	movs	r2, #0
 8001344:	2104      	movs	r1, #4
 8001346:	487b      	ldr	r0, [pc, #492]	; (8001534 <main+0x428>)
 8001348:	f002 f8a0 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndYLSB, 1, 100);			//Trasmetto Indirizzo dove leggere istruzione
 800134c:	2364      	movs	r3, #100	; 0x64
 800134e:	2201      	movs	r2, #1
 8001350:	4981      	ldr	r1, [pc, #516]	; (8001558 <main+0x44c>)
 8001352:	487a      	ldr	r0, [pc, #488]	; (800153c <main+0x430>)
 8001354:	f002 fe15 	bl	8003f82 <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);			//Ricevo Risultato di misura LSB (8bit)
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	2201      	movs	r2, #1
 800135c:	497a      	ldr	r1, [pc, #488]	; (8001548 <main+0x43c>)
 800135e:	4877      	ldr	r0, [pc, #476]	; (800153c <main+0x430>)
 8001360:	f002 ff4b 	bl	80041fa <HAL_SPI_Receive>
 		y[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];				//Unisco MSB e LSB attraverso un'operazione di shift su 16bit
 8001364:	4b76      	ldr	r3, [pc, #472]	; (8001540 <main+0x434>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	4b74      	ldr	r3, [pc, #464]	; (8001540 <main+0x434>)
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	b299      	uxth	r1, r3
 8001378:	f507 439a 	add.w	r3, r7, #19712	; 0x4d00
 800137c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001380:	f6a3 534c 	subw	r3, r3, #3404	; 0xd4c
 8001384:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001388:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 8001392:	2201      	movs	r2, #1
 8001394:	2104      	movs	r1, #4
 8001396:	4867      	ldr	r0, [pc, #412]	; (8001534 <main+0x428>)
 8001398:	f002 f878 	bl	800348c <HAL_GPIO_WritePin>
 		k=(int16_t)y[i];										//Casting da uint a int (abilitazione del segno, complemento)
 800139c:	f507 439a 	add.w	r3, r7, #19712	; 0x4d00
 80013a0:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80013a4:	f6a3 534c 	subw	r3, r3, #3404	; 0xd4c
 80013a8:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80013ac:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013b6:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80013ba:	f102 0212 	add.w	r2, r2, #18
 80013be:	8013      	strh	r3, [r2, #0]
 		acc=(k*typ)/1000;										//Da datasheet, il dato letto, lo converto in scala g attraverso questo calcolo
 80013c0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80013c4:	f103 0312 	add.w	r3, r3, #18
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80013d8:	f103 030c 	add.w	r3, r3, #12
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e4:	eddf 6a59 	vldr	s13, [pc, #356]	; 800154c <main+0x440>
 80013e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ec:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80013f0:	f103 0304 	add.w	r3, r3, #4
 80013f4:	edc3 7a00 	vstr	s15, [r3]
 		Vetty[i]=acc;											//Aggiungo la misura al vettore delle letture
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <main+0x450>)
 80013fa:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80013fe:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800140c:	f102 0204 	add.w	r2, r2, #4
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	601a      	str	r2, [r3, #0]
 		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo

 		spiRcv[0]=0;
 8001414:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <main+0x434>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
 		spiRcv[1]=0;
 800141a:	4b49      	ldr	r3, [pc, #292]	; (8001540 <main+0x434>)
 800141c:	2200      	movs	r2, #0
 800141e:	705a      	strb	r2, [r3, #1]
 		//Asse Z												//Si ripetono gli stessi commenti
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2104      	movs	r1, #4
 8001424:	4843      	ldr	r0, [pc, #268]	; (8001534 <main+0x428>)
 8001426:	f002 f831 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndZ, 1, 100);
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	2201      	movs	r2, #1
 800142e:	494c      	ldr	r1, [pc, #304]	; (8001560 <main+0x454>)
 8001430:	4842      	ldr	r0, [pc, #264]	; (800153c <main+0x430>)
 8001432:	f002 fda6 	bl	8003f82 <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);
 8001436:	2364      	movs	r3, #100	; 0x64
 8001438:	2201      	movs	r2, #1
 800143a:	4941      	ldr	r1, [pc, #260]	; (8001540 <main+0x434>)
 800143c:	483f      	ldr	r0, [pc, #252]	; (800153c <main+0x430>)
 800143e:	f002 fedc 	bl	80041fa <HAL_SPI_Receive>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2104      	movs	r1, #4
 8001446:	483b      	ldr	r0, [pc, #236]	; (8001534 <main+0x428>)
 8001448:	f002 f820 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2104      	movs	r1, #4
 8001450:	4838      	ldr	r0, [pc, #224]	; (8001534 <main+0x428>)
 8001452:	f002 f81b 	bl	800348c <HAL_GPIO_WritePin>
 		HAL_SPI_Transmit(&hspi1, spiSndZLSB, 1, 100);
 8001456:	2364      	movs	r3, #100	; 0x64
 8001458:	2201      	movs	r2, #1
 800145a:	4942      	ldr	r1, [pc, #264]	; (8001564 <main+0x458>)
 800145c:	4837      	ldr	r0, [pc, #220]	; (800153c <main+0x430>)
 800145e:	f002 fd90 	bl	8003f82 <HAL_SPI_Transmit>
 		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);
 8001462:	2364      	movs	r3, #100	; 0x64
 8001464:	2201      	movs	r2, #1
 8001466:	4938      	ldr	r1, [pc, #224]	; (8001548 <main+0x43c>)
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <main+0x430>)
 800146a:	f002 fec6 	bl	80041fa <HAL_SPI_Receive>
 		z[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <main+0x434>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <main+0x434>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	b299      	uxth	r1, r3
 8001482:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001486:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 800148a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800148e:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2104      	movs	r1, #4
 800149c:	4825      	ldr	r0, [pc, #148]	; (8001534 <main+0x428>)
 800149e:	f001 fff5 	bl	800348c <HAL_GPIO_WritePin>
 		k=(int16_t)z[i];
 80014a2:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80014a6:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 80014aa:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80014ae:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014b8:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80014bc:	f102 0212 	add.w	r2, r2, #18
 80014c0:	8013      	strh	r3, [r2, #0]
 		acc=(k*typ)/1000;
 80014c2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80014c6:	f103 0312 	add.w	r3, r3, #18
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80014da:	f103 030c 	add.w	r3, r3, #12
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e6:	eddf 6a19 	vldr	s13, [pc, #100]	; 800154c <main+0x440>
 80014ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ee:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80014f2:	f103 0304 	add.w	r3, r3, #4
 80014f6:	edc3 7a00 	vstr	s15, [r3]
 		Vettz[i]=acc;
 80014fa:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <main+0x45c>)
 80014fc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001500:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800150e:	f102 0204 	add.w	r2, r2, #4
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	601a      	str	r2, [r3, #0]
 		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo

 	    i=i+1;															//Incremento la i per spostare le misure nel buffer
 8001516:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800151a:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001526:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e01e      	b.n	800156c <main+0x460>
 800152e:	bf00      	nop
 8001530:	2001b448 	.word	0x2001b448
 8001534:	40021800 	.word	0x40021800
 8001538:	20003878 	.word	0x20003878
 800153c:	2001b454 	.word	0x2001b454
 8001540:	20003890 	.word	0x20003890
 8001544:	20003884 	.word	0x20003884
 8001548:	20003891 	.word	0x20003891
 800154c:	447a0000 	.word	0x447a0000
 8001550:	20003d48 	.word	0x20003d48
 8001554:	2000387c 	.word	0x2000387c
 8001558:	20003888 	.word	0x20003888
 800155c:	2000ba48 	.word	0x2000ba48
 8001560:	20003880 	.word	0x20003880
 8001564:	2000388c 	.word	0x2000388c
 8001568:	20013748 	.word	0x20013748
  while (i<DIM)
 800156c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001570:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800157a:	f6ff ae41 	blt.w	8001200 <main+0xf4>
  /* USER CODE END WHILE */


  /* USER CODE BEGIN 3 */

  HAL_TIM_Base_Stop(&htim2);											//Completate le n=DIM misure, fermo il timer
 800157e:	48ab      	ldr	r0, [pc, #684]	; (800182c <main+0x720>)
 8001580:	f003 fad6 	bl	8004b30 <HAL_TIM_Base_Stop>
     HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);		//Trasmetto uno spazio per ordine
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	2203      	movs	r2, #3
 800158a:	49a9      	ldr	r1, [pc, #676]	; (8001830 <main+0x724>)
 800158c:	48a9      	ldr	r0, [pc, #676]	; (8001834 <main+0x728>)
 800158e:	f003 ff0e 	bl	80053ae <HAL_UART_Transmit>
     //FFT reale



        	  /*Initialize the RFFT*/
        	  arm_rfft_fast_init_f32(&fft_handler, FFT_SIZE);
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	48a8      	ldr	r0, [pc, #672]	; (8001838 <main+0x72c>)
 8001598:	f006 ffde 	bl	8008558 <arm_rfft_fast_init_f32>
        	  /* Initialize the CFFT/CIFFT module, intFlag = 0, doBitReverse = 1 */
        	  arm_cfft_radix4_init_f32(&fft_handler_cplx, FFT_SIZE, 0, 1);
 800159c:	2301      	movs	r3, #1
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a4:	48a5      	ldr	r0, [pc, #660]	; (800183c <main+0x730>)
 80015a6:	f007 fc79 	bl	8008e9c <arm_cfft_radix4_init_f32>

        	  //Asse X

        	  for (int j = 0; j < FFT_SIZE; j++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80015b0:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01c      	b.n	80015f2 <main+0x4e6>
        		  		fft_in_buf_realX[j]=((float32_t)((float32_t)Vettx[j]));
 80015b8:	4aa1      	ldr	r2, [pc, #644]	; (8001840 <main+0x734>)
 80015ba:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015be:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	499e      	ldr	r1, [pc, #632]	; (8001844 <main+0x738>)
 80015cc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015d0:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	601a      	str	r2, [r3, #0]
        	  for (int j = 0; j < FFT_SIZE; j++) {
 80015dc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015e0:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80015ec:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80015f6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	dddb      	ble.n	80015b8 <main+0x4ac>
        		  		}
        	  arm_rfft_fast_f32(&fft_handler, fft_in_buf_realX, fft_out_buf_realX, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	4a91      	ldr	r2, [pc, #580]	; (8001848 <main+0x73c>)
 8001604:	498f      	ldr	r1, [pc, #572]	; (8001844 <main+0x738>)
 8001606:	488c      	ldr	r0, [pc, #560]	; (8001838 <main+0x72c>)
 8001608:	f007 f88a 	bl	8008720 <arm_rfft_fast_f32>
        	  for (int j = 0; j < SAMPLES; j += 2) {
 800160c:	2300      	movs	r3, #0
 800160e:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001612:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e02b      	b.n	8001672 <main+0x566>
        		  		  			fft_in_buf_realX[j]=(float32_t)((float32_t)Vettx[j/2]);
 800161a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800161e:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0fda      	lsrs	r2, r3, #31
 8001626:	4413      	add	r3, r2
 8001628:	105b      	asrs	r3, r3, #1
 800162a:	4a85      	ldr	r2, [pc, #532]	; (8001840 <main+0x734>)
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4984      	ldr	r1, [pc, #528]	; (8001844 <main+0x738>)
 8001634:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001638:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	601a      	str	r2, [r3, #0]
        		  		  		    //parte immaginaria
        		  		  			fft_in_buf_realX[(j + 1)] = 0;
 8001644:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001648:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	4a7c      	ldr	r2, [pc, #496]	; (8001844 <main+0x738>)
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
        	  for (int j = 0; j < SAMPLES; j += 2) {
 800165c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001660:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3302      	adds	r3, #2
 8001668:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800166c:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001676:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001680:	dbcb      	blt.n	800161a <main+0x50e>
          	 	 	 	 	 }
          arm_cfft_f32(&fft_handler, fft_in_buf_realX, 0, 1);
 8001682:	2301      	movs	r3, #1
 8001684:	2200      	movs	r2, #0
 8001686:	496f      	ldr	r1, [pc, #444]	; (8001844 <main+0x738>)
 8001688:	486b      	ldr	r0, [pc, #428]	; (8001838 <main+0x72c>)
 800168a:	f007 fb8f 	bl	8008dac <arm_cfft_f32>
          arm_cmplx_mag_f32(fft_in_buf_realX, fft_out_buf_realX, FFT_SIZE);
 800168e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001692:	496d      	ldr	r1, [pc, #436]	; (8001848 <main+0x73c>)
 8001694:	486b      	ldr	r0, [pc, #428]	; (8001844 <main+0x738>)
 8001696:	f007 fc7f 	bl	8008f98 <arm_cmplx_mag_f32>


          //Stampa sulla com
          for(int j = 0; j < FFT_SIZE;j++){
 800169a:	2300      	movs	r3, #0
 800169c:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80016a0:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e00a      	b.n	80016be <main+0x5b2>
 80016a8:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80016ac:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80016b8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80016c2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	dded      	ble.n	80016a8 <main+0x59c>
          }

          //Asse Y


          for (int j = 0; j < FFT_SIZE; j++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80016d2:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e01c      	b.n	8001714 <main+0x608>
             		  		fft_in_buf_realY[j]=((float32_t)((float32_t)Vetty[j]));
 80016da:	4a5c      	ldr	r2, [pc, #368]	; (800184c <main+0x740>)
 80016dc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80016e0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4958      	ldr	r1, [pc, #352]	; (8001850 <main+0x744>)
 80016ee:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80016f2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	601a      	str	r2, [r3, #0]
          for (int j = 0; j < FFT_SIZE; j++) {
 80016fe:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001702:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800170e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001718:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	dddb      	ble.n	80016da <main+0x5ce>
             		  		}
             	  arm_rfft_fast_f32(&fft_handler, fft_in_buf_realX, fft_out_buf_realY, 0);
 8001722:	2300      	movs	r3, #0
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <main+0x748>)
 8001726:	4947      	ldr	r1, [pc, #284]	; (8001844 <main+0x738>)
 8001728:	4843      	ldr	r0, [pc, #268]	; (8001838 <main+0x72c>)
 800172a:	f006 fff9 	bl	8008720 <arm_rfft_fast_f32>
             	  for (int j = 0; j < SAMPLES; j += 2) {
 800172e:	2300      	movs	r3, #0
 8001730:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001734:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e02b      	b.n	8001794 <main+0x688>
             		  		  			fft_in_buf_realY[j]=(float32_t)((float32_t)Vetty[j/2]);
 800173c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001740:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	0fda      	lsrs	r2, r3, #31
 8001748:	4413      	add	r3, r2
 800174a:	105b      	asrs	r3, r3, #1
 800174c:	4a3f      	ldr	r2, [pc, #252]	; (800184c <main+0x740>)
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	493e      	ldr	r1, [pc, #248]	; (8001850 <main+0x744>)
 8001756:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800175a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	601a      	str	r2, [r3, #0]
             		  		  		    //parte immaginaria
             		  		  			fft_in_buf_realY[(j + 1)] = 0;
 8001766:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800176a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	4a37      	ldr	r2, [pc, #220]	; (8001850 <main+0x744>)
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
             	  for (int j = 0; j < SAMPLES; j += 2) {
 800177e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001782:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3302      	adds	r3, #2
 800178a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 800178e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001798:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a2:	dbcb      	blt.n	800173c <main+0x630>
               	 	 	 	 	 }
               arm_cfft_f32(&fft_handler, fft_in_buf_realY, 0, 1);
 80017a4:	2301      	movs	r3, #1
 80017a6:	2200      	movs	r2, #0
 80017a8:	4929      	ldr	r1, [pc, #164]	; (8001850 <main+0x744>)
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <main+0x72c>)
 80017ac:	f007 fafe 	bl	8008dac <arm_cfft_f32>
               arm_cmplx_mag_f32(fft_in_buf_realY, fft_out_buf_realY, FFT_SIZE);
 80017b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b4:	4927      	ldr	r1, [pc, #156]	; (8001854 <main+0x748>)
 80017b6:	4826      	ldr	r0, [pc, #152]	; (8001850 <main+0x744>)
 80017b8:	f007 fbee 	bl	8008f98 <arm_cmplx_mag_f32>

           //Asse Z

            for (int j = 0; j < FFT_SIZE; j++) {
 80017bc:	2300      	movs	r3, #0
 80017be:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80017c2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e01c      	b.n	8001804 <main+0x6f8>
                  		  		fft_in_buf_realZ[j]=((float32_t)((float32_t)Vettz[j]));
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <main+0x74c>)
 80017cc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80017d0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	491f      	ldr	r1, [pc, #124]	; (800185c <main+0x750>)
 80017de:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80017e2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	601a      	str	r2, [r3, #0]
            for (int j = 0; j < FFT_SIZE; j++) {
 80017ee:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80017f2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80017fe:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001808:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	dddb      	ble.n	80017ca <main+0x6be>
                  		  		}
                  	  arm_rfft_fast_f32(&fft_handler, fft_in_buf_realZ, fft_out_buf_realZ, 0);
 8001812:	2300      	movs	r3, #0
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <main+0x754>)
 8001816:	4911      	ldr	r1, [pc, #68]	; (800185c <main+0x750>)
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <main+0x72c>)
 800181a:	f006 ff81 	bl	8008720 <arm_rfft_fast_f32>
                  	  for (int j = 0; j < SAMPLES; j += 2) {
 800181e:	2300      	movs	r3, #0
 8001820:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001824:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e047      	b.n	80018bc <main+0x7b0>
 800182c:	2001b4b0 	.word	0x2001b4b0
 8001830:	0800c860 	.word	0x0800c860
 8001834:	2001b4f8 	.word	0x2001b4f8
 8001838:	20003754 	.word	0x20003754
 800183c:	2000376c 	.word	0x2000376c
 8001840:	20003d48 	.word	0x20003d48
 8001844:	20000754 	.word	0x20000754
 8001848:	20002b54 	.word	0x20002b54
 800184c:	2000ba48 	.word	0x2000ba48
 8001850:	20000f54 	.word	0x20000f54
 8001854:	20002f54 	.word	0x20002f54
 8001858:	20013748 	.word	0x20013748
 800185c:	20001754 	.word	0x20001754
 8001860:	20003354 	.word	0x20003354
                  		  		  			fft_in_buf_realZ[j]=(float32_t)((float32_t)Vettz[j/2]);
 8001864:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001868:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0fda      	lsrs	r2, r3, #31
 8001870:	4413      	add	r3, r2
 8001872:	105b      	asrs	r3, r3, #1
 8001874:	4abc      	ldr	r2, [pc, #752]	; (8001b68 <main+0xa5c>)
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	49bb      	ldr	r1, [pc, #748]	; (8001b6c <main+0xa60>)
 800187e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001882:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	601a      	str	r2, [r3, #0]
                  		  		  		    //parte immaginaria
                  		  		  			fft_in_buf_realZ[(j + 1)] = 0;
 800188e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001892:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	4ab4      	ldr	r2, [pc, #720]	; (8001b6c <main+0xa60>)
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
                  	  for (int j = 0; j < SAMPLES; j += 2) {
 80018a6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80018aa:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3302      	adds	r3, #2
 80018b2:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80018b6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80018c0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ca:	dbcb      	blt.n	8001864 <main+0x758>
                    	 	 	 	 	 }
                    arm_cfft_f32(&fft_handler, fft_in_buf_realZ, 0, 1);
 80018cc:	2301      	movs	r3, #1
 80018ce:	2200      	movs	r2, #0
 80018d0:	49a6      	ldr	r1, [pc, #664]	; (8001b6c <main+0xa60>)
 80018d2:	48a7      	ldr	r0, [pc, #668]	; (8001b70 <main+0xa64>)
 80018d4:	f007 fa6a 	bl	8008dac <arm_cfft_f32>
                    arm_cmplx_mag_f32(fft_in_buf_realZ, fft_out_buf_realZ, FFT_SIZE);
 80018d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018dc:	49a5      	ldr	r1, [pc, #660]	; (8001b74 <main+0xa68>)
 80018de:	48a3      	ldr	r0, [pc, #652]	; (8001b6c <main+0xa60>)
 80018e0:	f007 fb5a 	bl	8008f98 <arm_cmplx_mag_f32>



          //Prendo le 10 armoniche a magnitude maggiore di X

          for(int j = 0; j<FFT_SIZE;j++){
 80018e4:	2300      	movs	r3, #0
 80018e6:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 80018ea:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e01c      	b.n	800192c <main+0x820>
         	 tempX[j] = (float32_t)fft_out_buf_realX[j];
 80018f2:	4aa1      	ldr	r2, [pc, #644]	; (8001b78 <main+0xa6c>)
 80018f4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80018f8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	499d      	ldr	r1, [pc, #628]	; (8001b7c <main+0xa70>)
 8001906:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800190a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	601a      	str	r2, [r3, #0]
          for(int j = 0; j<FFT_SIZE;j++){
 8001916:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800191a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001926:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001930:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	dddb      	ble.n	80018f2 <main+0x7e6>
          }

          for(int j = 0; j<5;j++){
 800193a:	2300      	movs	r3, #0
 800193c:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001940:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e066      	b.n	8001a16 <main+0x90a>

         	 arm_max_f32(tempX, FFT_SIZE, &massimo, &indmax);
 8001948:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <main+0xa74>)
 800194a:	4a8e      	ldr	r2, [pc, #568]	; (8001b84 <main+0xa78>)
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	488a      	ldr	r0, [pc, #552]	; (8001b7c <main+0xa70>)
 8001952:	f006 fccd 	bl	80082f0 <arm_max_f32>
         	 valMassimiX[j] = massimo;
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <main+0xa78>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	498b      	ldr	r1, [pc, #556]	; (8001b88 <main+0xa7c>)
 800195c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001960:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	601a      	str	r2, [r3, #0]
         	 indX[j] = indmax*passo_f;
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <main+0xa74>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f242 7210 	movw	r2, #10000	; 0x2710
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	da00      	bge.n	800197e <main+0x872>
 800197c:	33ff      	adds	r3, #255	; 0xff
 800197e:	121b      	asrs	r3, r3, #8
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001988:	4a80      	ldr	r2, [pc, #512]	; (8001b8c <main+0xa80>)
 800198a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 800198e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	edc3 7a00 	vstr	s15, [r3]
         	 tempX[indmax] = 0;
 800199c:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <main+0xa74>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a76      	ldr	r2, [pc, #472]	; (8001b7c <main+0xa70>)
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
         	 sprintf(buffer3,"%f \n \r",valMassimiX[j]);
 80019ac:	4a76      	ldr	r2, [pc, #472]	; (8001b88 <main+0xa7c>)
 80019ae:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80019b2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdda 	bl	8000578 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4971      	ldr	r1, [pc, #452]	; (8001b90 <main+0xa84>)
 80019ca:	4872      	ldr	r0, [pc, #456]	; (8001b94 <main+0xa88>)
 80019cc:	f008 fc6a 	bl	800a2a4 <siprintf>
         	 uprintf(buffer3);
 80019d0:	4870      	ldr	r0, [pc, #448]	; (8001b94 <main+0xa88>)
 80019d2:	f7ff fb87 	bl	80010e4 <uprintf>
         	 sprintf(buffer2,"%f \n \r",indX[j]);
 80019d6:	4a6d      	ldr	r2, [pc, #436]	; (8001b8c <main+0xa80>)
 80019d8:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 80019dc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdc5 	bl	8000578 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4967      	ldr	r1, [pc, #412]	; (8001b90 <main+0xa84>)
 80019f4:	4868      	ldr	r0, [pc, #416]	; (8001b98 <main+0xa8c>)
 80019f6:	f008 fc55 	bl	800a2a4 <siprintf>
         	 uprintf(buffer2);
 80019fa:	4867      	ldr	r0, [pc, #412]	; (8001b98 <main+0xa8c>)
 80019fc:	f7ff fb72 	bl	80010e4 <uprintf>
          for(int j = 0; j<5;j++){
 8001a00:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a04:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001a10:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a1a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	dd91      	ble.n	8001948 <main+0x83c>
          }

          //Prendo le 10 armoniche a magnitude maggiore di Y

          for(int j = 0; j<FFT_SIZE;j++){
 8001a24:	2300      	movs	r3, #0
 8001a26:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001a2a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e01c      	b.n	8001a6c <main+0x960>
              	 tempY[j] = (float32_t)fft_out_buf_realY[j];
 8001a32:	4a5a      	ldr	r2, [pc, #360]	; (8001b9c <main+0xa90>)
 8001a34:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a38:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4956      	ldr	r1, [pc, #344]	; (8001ba0 <main+0xa94>)
 8001a46:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a4a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	601a      	str	r2, [r3, #0]
          for(int j = 0; j<FFT_SIZE;j++){
 8001a56:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a5a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001a66:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001a70:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2bff      	cmp	r3, #255	; 0xff
 8001a78:	dddb      	ble.n	8001a32 <main+0x926>
               }

               for(int j = 0; j<10;j++){
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001a80:	f102 0220 	add.w	r2, r2, #32
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e060      	b.n	8001b4a <main+0xa3e>

              	 arm_max_f32(tempY, FFT_SIZE, &massimo, &indmax);
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <main+0xa74>)
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <main+0xa78>)
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	4843      	ldr	r0, [pc, #268]	; (8001ba0 <main+0xa94>)
 8001a92:	f006 fc2d 	bl	80082f0 <arm_max_f32>
              	 valMassimiY[j] = massimo;
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <main+0xa78>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4942      	ldr	r1, [pc, #264]	; (8001ba4 <main+0xa98>)
 8001a9c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001aa0:	f103 0320 	add.w	r3, r3, #32
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	601a      	str	r2, [r3, #0]
              	 indY[j] = indmax*passo_f;
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <main+0xa74>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da00      	bge.n	8001abe <main+0x9b2>
 8001abc:	33ff      	adds	r3, #255	; 0xff
 8001abe:	121b      	asrs	r3, r3, #8
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <main+0xa9c>)
 8001aca:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001ace:	f103 0320 	add.w	r3, r3, #32
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	edc3 7a00 	vstr	s15, [r3]
              	 tempY[indmax] = 0;
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <main+0xa74>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <main+0xa94>)
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
              	 sprintf(buffer3,"%f \n \r",valMassimiY[j]);
 8001aec:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <main+0xa98>)
 8001aee:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001af2:	f103 0320 	add.w	r3, r3, #32
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd3a 	bl	8000578 <__aeabi_f2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4921      	ldr	r1, [pc, #132]	; (8001b90 <main+0xa84>)
 8001b0a:	4822      	ldr	r0, [pc, #136]	; (8001b94 <main+0xa88>)
 8001b0c:	f008 fbca 	bl	800a2a4 <siprintf>
              	 //uprintf(buffer3);
              	 sprintf(buffer2,"%f \n \r",indY[j]);
 8001b10:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <main+0xa9c>)
 8001b12:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001b16:	f103 0320 	add.w	r3, r3, #32
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd28 	bl	8000578 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4918      	ldr	r1, [pc, #96]	; (8001b90 <main+0xa84>)
 8001b2e:	481a      	ldr	r0, [pc, #104]	; (8001b98 <main+0xa8c>)
 8001b30:	f008 fbb8 	bl	800a2a4 <siprintf>
               for(int j = 0; j<10;j++){
 8001b34:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001b38:	f103 0320 	add.w	r3, r3, #32
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001b44:	f102 0220 	add.w	r2, r2, #32
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001b4e:	f103 0320 	add.w	r3, r3, #32
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	dd97      	ble.n	8001a88 <main+0x97c>
              	 //uprintf(buffer2);
               }

            //Prendo le 10 armoniche a magnitude maggiore di Z

            for(int j = 0; j<FFT_SIZE;j++){
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001b5e:	f102 021c 	add.w	r2, r2, #28
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e03f      	b.n	8001be6 <main+0xada>
 8001b66:	bf00      	nop
 8001b68:	20013748 	.word	0x20013748
 8001b6c:	20001754 	.word	0x20001754
 8001b70:	20003754 	.word	0x20003754
 8001b74:	20003354 	.word	0x20003354
 8001b78:	20002b54 	.word	0x20002b54
 8001b7c:	20001f54 	.word	0x20001f54
 8001b80:	20003874 	.word	0x20003874
 8001b84:	20003780 	.word	0x20003780
 8001b88:	20003784 	.word	0x20003784
 8001b8c:	200037ac 	.word	0x200037ac
 8001b90:	0800c864 	.word	0x0800c864
 8001b94:	20003af0 	.word	0x20003af0
 8001b98:	20003898 	.word	0x20003898
 8001b9c:	20002f54 	.word	0x20002f54
 8001ba0:	20002354 	.word	0x20002354
 8001ba4:	200037d4 	.word	0x200037d4
 8001ba8:	200037fc 	.word	0x200037fc
                   	 tempZ[j] = (float32_t)fft_out_buf_realZ[j];
 8001bac:	4ab9      	ldr	r2, [pc, #740]	; (8001e94 <main+0xd88>)
 8001bae:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001bb2:	f103 031c 	add.w	r3, r3, #28
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	49b6      	ldr	r1, [pc, #728]	; (8001e98 <main+0xd8c>)
 8001bc0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001bc4:	f103 031c 	add.w	r3, r3, #28
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	601a      	str	r2, [r3, #0]
            for(int j = 0; j<FFT_SIZE;j++){
 8001bd0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001bd4:	f103 031c 	add.w	r3, r3, #28
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001be0:	f102 021c 	add.w	r2, r2, #28
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001bea:	f103 031c 	add.w	r3, r3, #28
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2bff      	cmp	r3, #255	; 0xff
 8001bf2:	dddb      	ble.n	8001bac <main+0xaa0>
                    }

                    for(int j = 0; j<10;j++){
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001bfa:	f102 0218 	add.w	r2, r2, #24
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e060      	b.n	8001cc4 <main+0xbb8>

                   	 arm_max_f32(tempZ, FFT_SIZE, &massimo, &indmax);
 8001c02:	4ba6      	ldr	r3, [pc, #664]	; (8001e9c <main+0xd90>)
 8001c04:	4aa6      	ldr	r2, [pc, #664]	; (8001ea0 <main+0xd94>)
 8001c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0a:	48a3      	ldr	r0, [pc, #652]	; (8001e98 <main+0xd8c>)
 8001c0c:	f006 fb70 	bl	80082f0 <arm_max_f32>
                   	 valMassimiZ[j] = massimo;
 8001c10:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <main+0xd94>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	49a3      	ldr	r1, [pc, #652]	; (8001ea4 <main+0xd98>)
 8001c16:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c1a:	f103 0318 	add.w	r3, r3, #24
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	601a      	str	r2, [r3, #0]
                   	 indZ[j] = indmax*passo_f;
 8001c26:	4b9d      	ldr	r3, [pc, #628]	; (8001e9c <main+0xd90>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da00      	bge.n	8001c38 <main+0xb2c>
 8001c36:	33ff      	adds	r3, #255	; 0xff
 8001c38:	121b      	asrs	r3, r3, #8
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	4a99      	ldr	r2, [pc, #612]	; (8001ea8 <main+0xd9c>)
 8001c44:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c48:	f103 0318 	add.w	r3, r3, #24
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	edc3 7a00 	vstr	s15, [r3]
                   	 tempZ[indmax] = 0;
 8001c56:	4b91      	ldr	r3, [pc, #580]	; (8001e9c <main+0xd90>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a8f      	ldr	r2, [pc, #572]	; (8001e98 <main+0xd8c>)
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
                   	 sprintf(buffer3,"%f \n \r",valMassimiZ[j]);
 8001c66:	4a8f      	ldr	r2, [pc, #572]	; (8001ea4 <main+0xd98>)
 8001c68:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c6c:	f103 0318 	add.w	r3, r3, #24
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc7d 	bl	8000578 <__aeabi_f2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	498a      	ldr	r1, [pc, #552]	; (8001eac <main+0xda0>)
 8001c84:	488a      	ldr	r0, [pc, #552]	; (8001eb0 <main+0xda4>)
 8001c86:	f008 fb0d 	bl	800a2a4 <siprintf>
                   	 //uprintf(buffer3);
                   	 sprintf(buffer2,"%f \n \r",indZ[j]);
 8001c8a:	4a87      	ldr	r2, [pc, #540]	; (8001ea8 <main+0xd9c>)
 8001c8c:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001c90:	f103 0318 	add.w	r3, r3, #24
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc6b 	bl	8000578 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4981      	ldr	r1, [pc, #516]	; (8001eac <main+0xda0>)
 8001ca8:	4882      	ldr	r0, [pc, #520]	; (8001eb4 <main+0xda8>)
 8001caa:	f008 fafb 	bl	800a2a4 <siprintf>
                    for(int j = 0; j<10;j++){
 8001cae:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001cb2:	f103 0318 	add.w	r3, r3, #24
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001cbe:	f102 0218 	add.w	r2, r2, #24
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001cc8:	f103 0318 	add.w	r3, r3, #24
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b09      	cmp	r3, #9
 8001cd0:	dd97      	ble.n	8001c02 <main+0xaf6>
  AI_ALIGNED(32) ai_u32 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

  //Ricavo i pesi e i bias dal modello

  ai_network_params ai_params = {
		  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8001cd2:	f004 fceb 	bl	80066ac <ai_network_data_weights_get>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001cdc:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 fcae 	bl	8006644 <ai_network_data_weights_buffer_get>
		  AI_NETWORK_DATA_ACTIVATIONS(activations)
 8001ce8:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001cec:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8001cf0:	331c      	adds	r3, #28
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fc71 	bl	80065dc <ai_network_data_activations_buffer_get>
  AI_ALIGNED(32) ai_i8 input_data[AI_NETWORK_IN_1_SIZE_BYTES];
  AI_ALIGNED(32) ai_i8 output_data[AI_NETWORK_OUT_1_SIZE_BYTES];

  //Puntatore al modello

  ai_handle  network = AI_HANDLE_NULL;
 8001cfa:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001cfe:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]


  //Creo un'istanza del NN

  ai_error ai_err;
  ai_err = ai_network_create(&network,AI_NETWORK_DATA_CONFIG);
 8001d06:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001d0a:	3b08      	subs	r3, #8
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 fbce 	bl	80064b0 <ai_network_create>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001d1a:	f6a3 430c 	subw	r3, r3, #3084	; 0xc0c
 8001d1e:	601a      	str	r2, [r3, #0]

  //Verifico che il NN sia stato istanziato ed inizializzato correttamente

  if(ai_err.type != AI_ERROR_NONE){
 8001d20:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001d24:	f6a3 430c 	subw	r3, r3, #3084	; 0xc0c
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <main+0xc30>
	  sprintf(buffer2,"Errore creazione NN");
 8001d2e:	4962      	ldr	r1, [pc, #392]	; (8001eb8 <main+0xdac>)
 8001d30:	4860      	ldr	r0, [pc, #384]	; (8001eb4 <main+0xda8>)
 8001d32:	f008 fab7 	bl	800a2a4 <siprintf>
  	  uprintf(buffer2);
 8001d36:	485f      	ldr	r0, [pc, #380]	; (8001eb4 <main+0xda8>)
 8001d38:	f7ff f9d4 	bl	80010e4 <uprintf>
  }

  //Verifico che il NN sia inizializzato correttamente

   if(!ai_network_init(network, &ai_params)){
 8001d3c:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001d40:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f004 fbf8 	bl	8006544 <ai_network_init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <main+0xc62>

	   sprintf(buffer2,"Errore inizializzazione NN");
 8001d60:	4956      	ldr	r1, [pc, #344]	; (8001ebc <main+0xdb0>)
 8001d62:	4854      	ldr	r0, [pc, #336]	; (8001eb4 <main+0xda8>)
 8001d64:	f008 fa9e 	bl	800a2a4 <siprintf>
	   uprintf(buffer2);
 8001d68:	4852      	ldr	r0, [pc, #328]	; (8001eb4 <main+0xda8>)
 8001d6a:	f7ff f9bb 	bl	80010e4 <uprintf>
   }

   ai_input = ai_network_inputs_get(network, NULL);
 8001d6e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001d72:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fbae 	bl	80064dc <ai_network_inputs_get>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4a4f      	ldr	r2, [pc, #316]	; (8001ec0 <main+0xdb4>)
 8001d84:	6013      	str	r3, [r2, #0]
   ai_output = ai_network_outputs_get(network, NULL);
 8001d86:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001d8a:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fbbc 	bl	8006510 <ai_network_outputs_get>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4a4a      	ldr	r2, [pc, #296]	; (8001ec4 <main+0xdb8>)
 8001d9c:	6013      	str	r3, [r2, #0]

   ai_input->data = AI_HANDLE_PTR(input_data);
 8001d9e:	4b48      	ldr	r3, [pc, #288]	; (8001ec0 <main+0xdb4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8001da6:	605a      	str	r2, [r3, #4]
   ai_output->data = AI_HANDLE_PTR(output_data);
 8001da8:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <main+0xdb8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8001db0:	605a      	str	r2, [r3, #4]

   //Riempio il buffer di input

   for(int j=0;j<AI_NETWORK_IN_1_SIZE;j++){
 8001db2:	2300      	movs	r3, #0
 8001db4:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001db8:	f102 0214 	add.w	r2, r2, #20
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e02b      	b.n	8001e18 <main+0xd0c>

	  ((ai_float*)input_data)[j] = (ai_float)5;
 8001dc0:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001dc4:	f103 0314 	add.w	r3, r3, #20
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <main+0xdbc>)
 8001dd4:	601a      	str	r2, [r3, #0]
	  sprintf(buffer2,"%f \n \r",((ai_float*)input_data)[j]);
 8001dd6:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001dda:	f103 0314 	add.w	r3, r3, #20
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8001de6:	4413      	add	r3, r2
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbc4 	bl	8000578 <__aeabi_f2d>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	492d      	ldr	r1, [pc, #180]	; (8001eac <main+0xda0>)
 8001df6:	482f      	ldr	r0, [pc, #188]	; (8001eb4 <main+0xda8>)
 8001df8:	f008 fa54 	bl	800a2a4 <siprintf>
	  uprintf(buffer2);
 8001dfc:	482d      	ldr	r0, [pc, #180]	; (8001eb4 <main+0xda8>)
 8001dfe:	f7ff f971 	bl	80010e4 <uprintf>
   for(int j=0;j<AI_NETWORK_IN_1_SIZE;j++){
 8001e02:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e06:	f103 0314 	add.w	r3, r3, #20
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f507 423d 	add.w	r2, r7, #48384	; 0xbd00
 8001e12:	f102 0214 	add.w	r2, r2, #20
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e1c:	f103 0314 	add.w	r3, r3, #20
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	ddcc      	ble.n	8001dc0 <main+0xcb4>
   }

   ai_i32 inference = ai_network_run(network,ai_input,ai_output);
 8001e26:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8001e2a:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <main+0xdb4>)
 8001e32:	6811      	ldr	r1, [r2, #0]
 8001e34:	4a23      	ldr	r2, [pc, #140]	; (8001ec4 <main+0xdb8>)
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 fbbf 	bl	80065bc <ai_network_run>
 8001e3e:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e42:	f103 0308 	add.w	r3, r3, #8
 8001e46:	6018      	str	r0, [r3, #0]

   if(inference != 1){
 8001e48:	f507 433d 	add.w	r3, r7, #48384	; 0xbd00
 8001e4c:	f103 0308 	add.w	r3, r3, #8
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d006      	beq.n	8001e64 <main+0xd58>

   	  	  sprintf(buffer2,"Errore nell'eseguire l'inferenza");
 8001e56:	491d      	ldr	r1, [pc, #116]	; (8001ecc <main+0xdc0>)
 8001e58:	4816      	ldr	r0, [pc, #88]	; (8001eb4 <main+0xda8>)
 8001e5a:	f008 fa23 	bl	800a2a4 <siprintf>
   	  	  uprintf(buffer2);
 8001e5e:	4815      	ldr	r0, [pc, #84]	; (8001eb4 <main+0xda8>)
 8001e60:	f7ff f940 	bl	80010e4 <uprintf>
   }

   sprintf(buffer2,"%f \n \r",((ai_float*)output_data)[2]);
 8001e64:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8001e68:	3308      	adds	r3, #8
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb83 	bl	8000578 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	490d      	ldr	r1, [pc, #52]	; (8001eac <main+0xda0>)
 8001e78:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <main+0xda8>)
 8001e7a:	f008 fa13 	bl	800a2a4 <siprintf>
   uprintf(buffer2);
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <main+0xda8>)
 8001e80:	f7ff f930 	bl	80010e4 <uprintf>
 8001e84:	2300      	movs	r3, #0




  /* USER CODE END 3 */
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	f507 473d 	add.w	r7, r7, #48384	; 0xbd00
 8001e8c:	3754      	adds	r7, #84	; 0x54
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20003354 	.word	0x20003354
 8001e98:	20002754 	.word	0x20002754
 8001e9c:	20003874 	.word	0x20003874
 8001ea0:	20003780 	.word	0x20003780
 8001ea4:	20003824 	.word	0x20003824
 8001ea8:	2000384c 	.word	0x2000384c
 8001eac:	0800c864 	.word	0x0800c864
 8001eb0:	20003af0 	.word	0x20003af0
 8001eb4:	20003898 	.word	0x20003898
 8001eb8:	0800c86c 	.word	0x0800c86c
 8001ebc:	0800c880 	.word	0x0800c880
 8001ec0:	2001b44c 	.word	0x2001b44c
 8001ec4:	2001b450 	.word	0x2001b450
 8001ec8:	40a00000 	.word	0x40a00000
 8001ecc:	0800c89c 	.word	0x0800c89c

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	; 0x50
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	2234      	movs	r2, #52	; 0x34
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f007 fc7e 	bl	80097e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <SystemClock_Config+0xdc>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <SystemClock_Config+0xdc>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <SystemClock_Config+0xdc>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f10:	2300      	movs	r3, #0
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <SystemClock_Config+0xe0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <SystemClock_Config+0xe0>)
 8001f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <SystemClock_Config+0xe0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001f40:	230c      	movs	r3, #12
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f44:	23b4      	movs	r3, #180	; 0xb4
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 fd05 	bl	8003968 <HAL_RCC_OscConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f64:	f000 f826 	bl	8001fb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f68:	f001 face 	bl	8003508 <HAL_PWREx_EnableOverDrive>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f72:	f000 f81f 	bl	8001fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f76:	230f      	movs	r3, #15
 8001f78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	2105      	movs	r1, #5
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fb07 	bl	80035a8 <HAL_RCC_ClockConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001fa0:	f000 f808 	bl	8001fb4 <Error_Handler>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3750      	adds	r7, #80	; 0x50
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <Error_Handler+0x8>
	...

08001fc0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fc6:	4a18      	ldr	r2, [pc, #96]	; (8002028 <MX_SPI1_Init+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_SPI1_Init+0x64>)
 8001ff4:	2218      	movs	r2, #24
 8001ff6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <MX_SPI1_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_SPI1_Init+0x64>)
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <MX_SPI1_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_SPI1_Init+0x64>)
 800200c:	220a      	movs	r2, #10
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <MX_SPI1_Init+0x64>)
 8002012:	f001 ff2d 	bl	8003e70 <HAL_SPI_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800201c:	f7ff ffca 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2001b454 	.word	0x2001b454
 8002028:	40013000 	.word	0x40013000

0800202c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_SPI_MspInit+0x84>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12b      	bne.n	80020a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 8002086:	2338      	movs	r3, #56	; 0x38
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002096:	2305      	movs	r3, #5
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4805      	ldr	r0, [pc, #20]	; (80020b8 <HAL_SPI_MspInit+0x8c>)
 80020a2:	f001 f847 	bl	8003134 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40013000 	.word	0x40013000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020400 	.word	0x40020400

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <NMI_Handler+0x4>

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002158:	f000 fb22 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002164:	2008      	movs	r0, #8
 8002166:	f001 f9ab 	bl	80034c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}

0800216e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002172:	2010      	movs	r0, #16
 8002174:	f001 f9a4 	bl	80034c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <DMA1_Stream5_IRQHandler+0x10>)
 8002182:	f000 fd9b 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2001b580 	.word	0x2001b580

08002190 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM2_IRQHandler+0x10>)
 8002196:	f002 fcf2 	bl	8004b7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2001b4b0 	.word	0x2001b4b0

080021a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <USART2_IRQHandler+0x10>)
 80021aa:	f003 f993 	bl	80054d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2001b53c 	.word	0x2001b53c

080021b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return 1;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_kill>:

int _kill(int pid, int sig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021d2:	f007 fac5 	bl	8009760 <__errno>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2216      	movs	r2, #22
 80021da:	601a      	str	r2, [r3, #0]
  return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_exit>:

void _exit (int status)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffe7 	bl	80021c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021fa:	e7fe      	b.n	80021fa <_exit+0x12>

080021fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e00a      	b.n	8002224 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800220e:	f3af 8000 	nop.w
 8002212:	4601      	mov	r1, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	60ba      	str	r2, [r7, #8]
 800221a:	b2ca      	uxtb	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbf0      	blt.n	800220e <_read+0x12>
  }

  return len;
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e009      	b.n	800225c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	dbf1      	blt.n	8002248 <_write+0x12>
  }
  return len;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_close>:

int _close(int file)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002296:	605a      	str	r2, [r3, #4]
  return 0;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_isatty>:

int _isatty(int file)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <_sbrk+0x5c>)
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <_sbrk+0x60>)
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <_sbrk+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <_sbrk+0x64>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <_sbrk+0x68>)
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	429a      	cmp	r2, r3
 8002306:	d207      	bcs.n	8002318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002308:	f007 fa2a 	bl	8009760 <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	220c      	movs	r2, #12
 8002310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	e009      	b.n	800232c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <_sbrk+0x64>)
 8002328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20050000 	.word	0x20050000
 8002338:	00000800 	.word	0x00000800
 800233c:	2001b4ac 	.word	0x2001b4ac
 8002340:	2001b680 	.word	0x2001b680

08002344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <SystemInit+0x20>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <SystemInit+0x20>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236e:	f107 0308 	add.w	r3, r7, #8
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <MX_TIM2_Init+0x98>)
 8002386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800238a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 800238c:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <MX_TIM2_Init+0x98>)
 800238e:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8002392:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <MX_TIM2_Init+0x98>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <MX_TIM2_Init+0x98>)
 800239c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <MX_TIM2_Init+0x98>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <MX_TIM2_Init+0x98>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023ae:	4814      	ldr	r0, [pc, #80]	; (8002400 <MX_TIM2_Init+0x98>)
 80023b0:	f002 fb06 	bl	80049c0 <HAL_TIM_Base_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023ba:	f7ff fdfb 	bl	8001fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	4619      	mov	r1, r3
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <MX_TIM2_Init+0x98>)
 80023cc:	f002 fcdf 	bl	8004d8e <HAL_TIM_ConfigClockSource>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80023d6:	f7ff fded 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023e2:	463b      	mov	r3, r7
 80023e4:	4619      	mov	r1, r3
 80023e6:	4806      	ldr	r0, [pc, #24]	; (8002400 <MX_TIM2_Init+0x98>)
 80023e8:	f002 ff04 	bl	80051f4 <HAL_TIMEx_MasterConfigSynchronization>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80023f2:	f7ff fddf 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2001b4b0 	.word	0x2001b4b0

08002404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d115      	bne.n	8002442 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_TIM_Base_MspInit+0x48>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_TIM_Base_MspInit+0x48>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_TIM_Base_MspInit+0x48>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	201c      	movs	r0, #28
 8002438:	f000 faad 	bl	8002996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800243c:	201c      	movs	r0, #28
 800243e:	f000 fac6 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <MX_UART5_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_UART5_Init+0x4c>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <MX_UART5_Init+0x50>)
 8002458:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_UART5_Init+0x4c>)
 800245c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002460:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_UART5_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_UART5_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_UART5_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_UART5_Init+0x4c>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_UART5_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_UART5_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_UART5_Init+0x4c>)
 8002488:	f002 ff44 	bl	8005314 <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002492:	f7ff fd8f 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2001b4f8 	.word	0x2001b4f8
 80024a0:	40005000 	.word	0x40005000

080024a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <MX_USART2_UART_Init+0x50>)
 80024ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024b0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80024b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024ca:	220c      	movs	r2, #12
 80024cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_USART2_UART_Init+0x4c>)
 80024dc:	f002 ff1a 	bl	8005314 <HAL_UART_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024e6:	f7ff fd65 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2001b53c 	.word	0x2001b53c
 80024f4:	40004400 	.word	0x40004400

080024f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	; 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 031c 	add.w	r3, r7, #28
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a5d      	ldr	r2, [pc, #372]	; (800268c <HAL_UART_MspInit+0x194>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d14b      	bne.n	80025b2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_UART_MspInit+0x198>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_UART_MspInit+0x198>)
 8002524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_UART_MspInit+0x198>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	4b55      	ldr	r3, [pc, #340]	; (8002690 <HAL_UART_MspInit+0x198>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_UART_MspInit+0x198>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b52      	ldr	r3, [pc, #328]	; (8002690 <HAL_UART_MspInit+0x198>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <HAL_UART_MspInit+0x198>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <HAL_UART_MspInit+0x198>)
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_UART_MspInit+0x198>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800256e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002580:	2308      	movs	r3, #8
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	4842      	ldr	r0, [pc, #264]	; (8002694 <HAL_UART_MspInit+0x19c>)
 800258c:	f000 fdd2 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002590:	2304      	movs	r3, #4
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80025a0:	2308      	movs	r3, #8
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	483b      	ldr	r0, [pc, #236]	; (8002698 <HAL_UART_MspInit+0x1a0>)
 80025ac:	f000 fdc2 	bl	8003134 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025b0:	e067      	b.n	8002682 <HAL_UART_MspInit+0x18a>
  else if(uartHandle->Instance==USART2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a39      	ldr	r2, [pc, #228]	; (800269c <HAL_UART_MspInit+0x1a4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d162      	bne.n	8002682 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	4b33      	ldr	r3, [pc, #204]	; (8002690 <HAL_UART_MspInit+0x198>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4a32      	ldr	r2, [pc, #200]	; (8002690 <HAL_UART_MspInit+0x198>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ca:	6413      	str	r3, [r2, #64]	; 0x40
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_UART_MspInit+0x198>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <HAL_UART_MspInit+0x198>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <HAL_UART_MspInit+0x198>)
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	6313      	str	r3, [r2, #48]	; 0x30
 80025e8:	4b29      	ldr	r3, [pc, #164]	; (8002690 <HAL_UART_MspInit+0x198>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025f4:	2360      	movs	r3, #96	; 0x60
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002604:	2307      	movs	r3, #7
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	4822      	ldr	r0, [pc, #136]	; (8002698 <HAL_UART_MspInit+0x1a0>)
 8002610:	f000 fd90 	bl	8003134 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_UART_MspInit+0x1ac>)
 8002618:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 800261c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002620:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 8002630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002634:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 8002644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002648:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 800264c:	2200      	movs	r2, #0
 800264e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 8002652:	2200      	movs	r2, #0
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002656:	4812      	ldr	r0, [pc, #72]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 8002658:	f000 f9f0 	bl	8002a3c <HAL_DMA_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002662:	f7ff fca7 	bl	8001fb4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <HAL_UART_MspInit+0x1a8>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	2026      	movs	r0, #38	; 0x26
 8002678:	f000 f98d 	bl	8002996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800267c:	2026      	movs	r0, #38	; 0x26
 800267e:	f000 f9a6 	bl	80029ce <HAL_NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3730      	adds	r7, #48	; 0x30
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40005000 	.word	0x40005000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020800 	.word	0x40020800
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40004400 	.word	0x40004400
 80026a0:	2001b580 	.word	0x2001b580
 80026a4:	40026088 	.word	0x40026088

080026a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026ac:	480d      	ldr	r0, [pc, #52]	; (80026e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ae:	490e      	ldr	r1, [pc, #56]	; (80026e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026b0:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026c4:	4c0b      	ldr	r4, [pc, #44]	; (80026f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026d2:	f7ff fe37 	bl	8002344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d6:	f007 f849 	bl	800976c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026da:	f7fe fd17 	bl	800110c <main>
  bx  lr    
 80026de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e8:	20000730 	.word	0x20000730
  ldr r2, =_sidata
 80026ec:	08028674 	.word	0x08028674
  ldr r2, =_sbss
 80026f0:	20000730 	.word	0x20000730
  ldr r4, =_ebss
 80026f4:	2001b67c 	.word	0x2001b67c

080026f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC_IRQHandler>
	...

080026fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_Init+0x40>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <HAL_Init+0x40>)
 8002706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_Init+0x40>)
 8002712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_Init+0x40>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002724:	2003      	movs	r0, #3
 8002726:	f000 f92b 	bl	8002980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272a:	200f      	movs	r0, #15
 800272c:	f000 f808 	bl	8002740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002730:	f7ff fcc4 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023c00 	.word	0x40023c00

08002740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_InitTick+0x54>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_InitTick+0x58>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002756:	fbb3 f3f1 	udiv	r3, r3, r1
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f943 	bl	80029ea <HAL_SYSTICK_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e00e      	b.n	800278c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b0f      	cmp	r3, #15
 8002772:	d80a      	bhi.n	800278a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002774:	2200      	movs	r2, #0
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f000 f90b 	bl	8002996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_InitTick+0x5c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000000 	.word	0x20000000
 8002798:	20000008 	.word	0x20000008
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_IncTick+0x20>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_IncTick+0x24>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_IncTick+0x24>)
 80027b2:	6013      	str	r3, [r2, #0]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000008 	.word	0x20000008
 80027c4:	2001b5e0 	.word	0x2001b5e0

080027c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return uwTick;
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_GetTick+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	2001b5e0 	.word	0x2001b5e0

080027e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <__NVIC_GetPriorityGrouping+0x18>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	f003 0307 	and.w	r3, r3, #7
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	2b00      	cmp	r3, #0
 8002854:	db0b      	blt.n	800286e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	4907      	ldr	r1, [pc, #28]	; (800287c <__NVIC_EnableIRQ+0x38>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2001      	movs	r0, #1
 8002866:	fa00 f202 	lsl.w	r2, r0, r2
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000e100 	.word	0xe000e100

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f1c3 0307 	rsb	r3, r3, #7
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	bf28      	it	cs
 80028f2:	2304      	movcs	r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <NVIC_EncodePriority+0x30>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b03      	subs	r3, #3
 8002902:	e000      	b.n	8002906 <NVIC_EncodePriority+0x32>
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	401a      	ands	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43d9      	mvns	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	4313      	orrs	r3, r2
         );
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800294c:	d301      	bcc.n	8002952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294e:	2301      	movs	r3, #1
 8002950:	e00f      	b.n	8002972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <SysTick_Config+0x40>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295a:	210f      	movs	r1, #15
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f7ff ff8e 	bl	8002880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <SysTick_Config+0x40>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <SysTick_Config+0x40>)
 800296c:	2207      	movs	r2, #7
 800296e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	e000e010 	.word	0xe000e010

08002980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff29 	bl	80027e0 <__NVIC_SetPriorityGrouping>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a8:	f7ff ff3e 	bl	8002828 <__NVIC_GetPriorityGrouping>
 80029ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7ff ff8e 	bl	80028d4 <NVIC_EncodePriority>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff5d 	bl	8002880 <__NVIC_SetPriority>
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff31 	bl	8002844 <__NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffa2 	bl	800293c <SysTick_Config>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e00e      	b.n	8002a32 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	795b      	ldrb	r3, [r3, #5]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7fe fa6d 	bl	8000f04 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff febe 	bl	80027c8 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e099      	b.n	8002b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a78:	e00f      	b.n	8002a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7a:	f7ff fea5 	bl	80027c8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d908      	bls.n	8002a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e078      	b.n	8002b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e8      	bne.n	8002a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <HAL_DMA_Init+0x158>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d107      	bne.n	8002b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4313      	orrs	r3, r2
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0307 	bic.w	r3, r3, #7
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d117      	bne.n	8002b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa7b 	bl	800303c <DMA_CheckFifoParam>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa32 	bl	8002fd0 <DMA_CalcBaseAndBitshift>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	223f      	movs	r2, #63	; 0x3f
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	f010803f 	.word	0xf010803f

08002b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ba6:	f7ff fe0f 	bl	80027c8 <HAL_GetTick>
 8002baa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d008      	beq.n	8002bca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e052      	b.n	8002c70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0216 	bic.w	r2, r2, #22
 8002bd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d103      	bne.n	8002bfa <HAL_DMA_Abort+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0208 	bic.w	r2, r2, #8
 8002c08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1a:	e013      	b.n	8002c44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c1c:	f7ff fdd4 	bl	80027c8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d90c      	bls.n	8002c44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2203      	movs	r2, #3
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e015      	b.n	8002c70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e4      	bne.n	8002c1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	223f      	movs	r2, #63	; 0x3f
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d004      	beq.n	8002c96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00c      	b.n	8002cb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2205      	movs	r2, #5
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cc8:	4b8e      	ldr	r3, [pc, #568]	; (8002f04 <HAL_DMA_IRQHandler+0x248>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a8e      	ldr	r2, [pc, #568]	; (8002f08 <HAL_DMA_IRQHandler+0x24c>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a9b      	lsrs	r3, r3, #10
 8002cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	2208      	movs	r2, #8
 8002d16:	409a      	lsls	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d012      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	2204      	movs	r2, #4
 8002d64:	409a      	lsls	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	2204      	movs	r2, #4
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2210      	movs	r2, #16
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d043      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03c      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2210      	movs	r2, #16
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d024      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
 8002dea:	e01f      	b.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e016      	b.n	8002e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0208 	bic.w	r2, r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	2220      	movs	r2, #32
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 808f 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8087 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	2220      	movs	r2, #32
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d136      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0216 	bic.w	r2, r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x1da>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	223f      	movs	r2, #63	; 0x3f
 8002eac:	409a      	lsls	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d07e      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4798      	blx	r3
        }
        return;
 8002ed2:	e079      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e02c      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000
 8002f08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d023      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e01e      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0210 	bic.w	r2, r2, #16
 8002f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d032      	beq.n	8002fca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2205      	movs	r2, #5
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d307      	bcc.n	8002fa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f2      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x2cc>
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
 8002fc6:	e000      	b.n	8002fca <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fc8:	bf00      	nop
    }
  }
}
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b10      	subs	r3, #16
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <DMA_CalcBaseAndBitshift+0x64>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <DMA_CalcBaseAndBitshift+0x68>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d909      	bls.n	8003012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	; 0x58
 8003010:	e007      	b.n	8003022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	aaaaaaab 	.word	0xaaaaaaab
 8003038:	0800c908 	.word	0x0800c908

0800303c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11f      	bne.n	8003096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d856      	bhi.n	800310a <DMA_CheckFifoParam+0xce>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <DMA_CheckFifoParam+0x28>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003087 	.word	0x08003087
 800306c:	08003075 	.word	0x08003075
 8003070:	0800310b 	.word	0x0800310b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d046      	beq.n	800310e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e043      	b.n	800310e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800308e:	d140      	bne.n	8003112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e03d      	b.n	8003112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309e:	d121      	bne.n	80030e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d837      	bhi.n	8003116 <DMA_CheckFifoParam+0xda>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <DMA_CheckFifoParam+0x70>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c3 	.word	0x080030c3
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	080030d5 	.word	0x080030d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e030      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d025      	beq.n	800311a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d2:	e022      	b.n	800311a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030dc:	d11f      	bne.n	800311e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e2:	e01c      	b.n	800311e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d903      	bls.n	80030f2 <DMA_CheckFifoParam+0xb6>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d003      	beq.n	80030f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f0:	e018      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      break;
 80030f6:	e015      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e00b      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 800310a:	bf00      	nop
 800310c:	e00a      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e008      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e006      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e004      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;   
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
    }
  } 
  
  return status; 
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	e177      	b.n	8003440 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	429a      	cmp	r2, r3
 800316a:	f040 8166 	bne.w	800343a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d005      	beq.n	8003186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	2b02      	cmp	r3, #2
 8003184:	d130      	bne.n	80031e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0201 	and.w	r2, r3, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d017      	beq.n	8003224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d123      	bne.n	8003278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	08da      	lsrs	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3208      	adds	r2, #8
 8003238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	220f      	movs	r2, #15
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80c0 	beq.w	800343a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b66      	ldr	r3, [pc, #408]	; (8003458 <HAL_GPIO_Init+0x324>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	4a65      	ldr	r2, [pc, #404]	; (8003458 <HAL_GPIO_Init+0x324>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_GPIO_Init+0x324>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d6:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_GPIO_Init+0x328>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_GPIO_Init+0x32c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d037      	beq.n	8003372 <HAL_GPIO_Init+0x23e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a57      	ldr	r2, [pc, #348]	; (8003464 <HAL_GPIO_Init+0x330>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d031      	beq.n	800336e <HAL_GPIO_Init+0x23a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a56      	ldr	r2, [pc, #344]	; (8003468 <HAL_GPIO_Init+0x334>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02b      	beq.n	800336a <HAL_GPIO_Init+0x236>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a55      	ldr	r2, [pc, #340]	; (800346c <HAL_GPIO_Init+0x338>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d025      	beq.n	8003366 <HAL_GPIO_Init+0x232>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a54      	ldr	r2, [pc, #336]	; (8003470 <HAL_GPIO_Init+0x33c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01f      	beq.n	8003362 <HAL_GPIO_Init+0x22e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a53      	ldr	r2, [pc, #332]	; (8003474 <HAL_GPIO_Init+0x340>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d019      	beq.n	800335e <HAL_GPIO_Init+0x22a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a52      	ldr	r2, [pc, #328]	; (8003478 <HAL_GPIO_Init+0x344>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_GPIO_Init+0x226>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a51      	ldr	r2, [pc, #324]	; (800347c <HAL_GPIO_Init+0x348>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00d      	beq.n	8003356 <HAL_GPIO_Init+0x222>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a50      	ldr	r2, [pc, #320]	; (8003480 <HAL_GPIO_Init+0x34c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <HAL_GPIO_Init+0x21e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4f      	ldr	r2, [pc, #316]	; (8003484 <HAL_GPIO_Init+0x350>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_GPIO_Init+0x21a>
 800334a:	2309      	movs	r3, #9
 800334c:	e012      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800334e:	230a      	movs	r3, #10
 8003350:	e010      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003352:	2308      	movs	r3, #8
 8003354:	e00e      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003356:	2307      	movs	r3, #7
 8003358:	e00c      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800335a:	2306      	movs	r3, #6
 800335c:	e00a      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800335e:	2305      	movs	r3, #5
 8003360:	e008      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003362:	2304      	movs	r3, #4
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003366:	2303      	movs	r3, #3
 8003368:	e004      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800336a:	2302      	movs	r3, #2
 800336c:	e002      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003372:	2300      	movs	r3, #0
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f002 0203 	and.w	r2, r2, #3
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	4093      	lsls	r3, r2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003384:	4935      	ldr	r1, [pc, #212]	; (800345c <HAL_GPIO_Init+0x328>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <HAL_GPIO_Init+0x354>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b6:	4a34      	ldr	r2, [pc, #208]	; (8003488 <HAL_GPIO_Init+0x354>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033bc:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_GPIO_Init+0x354>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e0:	4a29      	ldr	r2, [pc, #164]	; (8003488 <HAL_GPIO_Init+0x354>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033e6:	4b28      	ldr	r3, [pc, #160]	; (8003488 <HAL_GPIO_Init+0x354>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <HAL_GPIO_Init+0x354>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_GPIO_Init+0x354>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003434:	4a14      	ldr	r2, [pc, #80]	; (8003488 <HAL_GPIO_Init+0x354>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	f67f ae84 	bls.w	8003150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40013800 	.word	0x40013800
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400
 8003468:	40020800 	.word	0x40020800
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40021000 	.word	0x40021000
 8003474:	40021400 	.word	0x40021400
 8003478:	40021800 	.word	0x40021800
 800347c:	40021c00 	.word	0x40021c00
 8003480:	40022000 	.word	0x40022000
 8003484:	40022400 	.word	0x40022400
 8003488:	40013c00 	.word	0x40013c00

0800348c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
 8003498:	4613      	mov	r3, r2
 800349a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800349c:	787b      	ldrb	r3, [r7, #1]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a2:	887a      	ldrh	r2, [r7, #2]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034a8:	e003      	b.n	80034b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	041a      	lsls	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	619a      	str	r2, [r3, #24]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034d6:	4a05      	ldr	r2, [pc, #20]	; (80034ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f806 	bl	80034f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40013c00 	.word	0x40013c00

080034f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_PWREx_EnableOverDrive+0x94>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003534:	f7ff f948 	bl	80027c8 <HAL_GetTick>
 8003538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800353a:	e009      	b.n	8003550 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800353c:	f7ff f944 	bl	80027c8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354a:	d901      	bls.n	8003550 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e01f      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d1ee      	bne.n	800353c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7ff f930 	bl	80027c8 <HAL_GetTick>
 8003568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800356a:	e009      	b.n	8003580 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800356c:	f7ff f92c 	bl	80027c8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800357a:	d901      	bls.n	8003580 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e007      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358c:	d1ee      	bne.n	800356c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	420e0040 	.word	0x420e0040
 80035a0:	40007000 	.word	0x40007000
 80035a4:	420e0044 	.word	0x420e0044

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cc      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b68      	ldr	r3, [pc, #416]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d90c      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d044      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d003      	beq.n	8003666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e067      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4934      	ldr	r1, [pc, #208]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7ff f896 	bl	80027c8 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7ff f892 	bl	80027c8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e04f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 020c 	and.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1eb      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20c      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f821 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fff6 	bl	8002740 <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	40023800 	.word	0x40023800
 8003768:	0800c8f0 	.word	0x0800c8f0
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003778:	b090      	sub	sp, #64	; 0x40
 800377a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
 8003780:	2300      	movs	r3, #0
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003784:	2300      	movs	r3, #0
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b08      	cmp	r3, #8
 8003796:	d00d      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003798:	2b08      	cmp	r3, #8
 800379a:	f200 80a1 	bhi.w	80038e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x34>
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x3a>
 80037a6:	e09b      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80037aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037ac:	e09b      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_GetSysClockFreq+0x188>)
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037b2:	e098      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037be:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d028      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	2200      	movs	r2, #0
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	627a      	str	r2, [r7, #36]	; 0x24
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037dc:	2100      	movs	r1, #0
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_GetSysClockFreq+0x188>)
 80037e0:	fb03 f201 	mul.w	r2, r3, r1
 80037e4:	2300      	movs	r3, #0
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	4a43      	ldr	r2, [pc, #268]	; (80038fc <HAL_RCC_GetSysClockFreq+0x188>)
 80037ee:	fba0 1202 	umull	r1, r2, r0, r2
 80037f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f4:	460a      	mov	r2, r1
 80037f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80037f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fa:	4413      	add	r3, r2
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003800:	2200      	movs	r2, #0
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	61fa      	str	r2, [r7, #28]
 8003806:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800380a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800380e:	f7fd f9e3 	bl	8000bd8 <__aeabi_uldivmod>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4613      	mov	r3, r2
 8003818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381a:	e053      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381c:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	2200      	movs	r2, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	617a      	str	r2, [r7, #20]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800382e:	f04f 0b00 	mov.w	fp, #0
 8003832:	4652      	mov	r2, sl
 8003834:	465b      	mov	r3, fp
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	0159      	lsls	r1, r3, #5
 8003840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003844:	0150      	lsls	r0, r2, #5
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	ebb2 080a 	subs.w	r8, r2, sl
 800384e:	eb63 090b 	sbc.w	r9, r3, fp
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800385e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003862:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003866:	ebb2 0408 	subs.w	r4, r2, r8
 800386a:	eb63 0509 	sbc.w	r5, r3, r9
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	00eb      	lsls	r3, r5, #3
 8003878:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800387c:	00e2      	lsls	r2, r4, #3
 800387e:	4614      	mov	r4, r2
 8003880:	461d      	mov	r5, r3
 8003882:	eb14 030a 	adds.w	r3, r4, sl
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	eb45 030b 	adc.w	r3, r5, fp
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800389a:	4629      	mov	r1, r5
 800389c:	028b      	lsls	r3, r1, #10
 800389e:	4621      	mov	r1, r4
 80038a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a4:	4621      	mov	r1, r4
 80038a6:	028a      	lsls	r2, r1, #10
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ae:	2200      	movs	r2, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	60fa      	str	r2, [r7, #12]
 80038b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b8:	f7fd f98e 	bl	8000bd8 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4613      	mov	r3, r2
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	3301      	adds	r3, #1
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038de:	e002      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80038e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3740      	adds	r7, #64	; 0x40
 80038ec:	46bd      	mov	sp, r7
 80038ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	00f42400 	.word	0x00f42400
 80038fc:	016e3600 	.word	0x016e3600

08003900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_RCC_GetHCLKFreq+0x14>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000

08003918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800391c:	f7ff fff0 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	0a9b      	lsrs	r3, r3, #10
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4903      	ldr	r1, [pc, #12]	; (800393c <HAL_RCC_GetPCLK1Freq+0x24>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	0800c900 	.word	0x0800c900

08003940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003944:	f7ff ffdc 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0b5b      	lsrs	r3, r3, #13
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	0800c900 	.word	0x0800c900

08003968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e273      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d075      	beq.n	8003a72 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003986:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d00c      	beq.n	80039ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800399a:	2b08      	cmp	r3, #8
 800399c:	d112      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b82      	ldr	r3, [pc, #520]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b7e      	ldr	r3, [pc, #504]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05b      	beq.n	8003a70 <HAL_RCC_OscConfig+0x108>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d157      	bne.n	8003a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e24e      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x74>
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a75      	ldr	r2, [pc, #468]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x98>
 80039e6:	4b70      	ldr	r3, [pc, #448]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6f      	ldr	r2, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b6d      	ldr	r3, [pc, #436]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6c      	ldr	r2, [pc, #432]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 8003a00:	4b69      	ldr	r3, [pc, #420]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a68      	ldr	r2, [pc, #416]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b66      	ldr	r3, [pc, #408]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a65      	ldr	r2, [pc, #404]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fed2 	bl	80027c8 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe fece 	bl	80027c8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e213      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xc0>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe febe 	bl	80027c8 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe feba 	bl	80027c8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e1ff      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0xe8>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d063      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1d3      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4937      	ldr	r1, [pc, #220]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e03a      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x244>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe fe73 	bl	80027c8 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fe6f 	bl	80027c8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1b4      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4925      	ldr	r1, [pc, #148]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	e015      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_OscConfig+0x244>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fe fe52 	bl	80027c8 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b28:	f7fe fe4e 	bl	80027c8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e193      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d036      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_RCC_OscConfig+0x248>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fe fe32 	bl	80027c8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b68:	f7fe fe2e 	bl	80027c8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e173      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x200>
 8003b86:	e01b      	b.n	8003bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_OscConfig+0x248>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8e:	f7fe fe1b 	bl	80027c8 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	e00e      	b.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fe fe17 	bl	80027c8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d907      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e15c      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	42470000 	.word	0x42470000
 8003bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	4b8a      	ldr	r3, [pc, #552]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ea      	bne.n	8003b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8097 	beq.w	8003cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd2:	4b83      	ldr	r3, [pc, #524]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	4b7f      	ldr	r3, [pc, #508]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a7e      	ldr	r2, [pc, #504]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
 8003bee:	4b7c      	ldr	r3, [pc, #496]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b79      	ldr	r3, [pc, #484]	; (8003de4 <HAL_RCC_OscConfig+0x47c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d118      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0a:	4b76      	ldr	r3, [pc, #472]	; (8003de4 <HAL_RCC_OscConfig+0x47c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a75      	ldr	r2, [pc, #468]	; (8003de4 <HAL_RCC_OscConfig+0x47c>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c16:	f7fe fdd7 	bl	80027c8 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1e:	f7fe fdd3 	bl	80027c8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e118      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b6c      	ldr	r3, [pc, #432]	; (8003de4 <HAL_RCC_OscConfig+0x47c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2ea>
 8003c44:	4b66      	ldr	r3, [pc, #408]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a65      	ldr	r2, [pc, #404]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x324>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x30c>
 8003c5a:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a60      	ldr	r2, [pc, #384]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	4b5e      	ldr	r3, [pc, #376]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a5d      	ldr	r2, [pc, #372]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0x324>
 8003c74:	4b5a      	ldr	r3, [pc, #360]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a59      	ldr	r2, [pc, #356]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c80:	4b57      	ldr	r3, [pc, #348]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4a56      	ldr	r2, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003c86:	f023 0304 	bic.w	r3, r3, #4
 8003c8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fe fd98 	bl	80027c8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fe fd94 	bl	80027c8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0d7      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ee      	beq.n	8003c9c <HAL_RCC_OscConfig+0x334>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fd82 	bl	80027c8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fd7e 	bl	80027c8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0c1      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cde:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ee      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	4a3a      	ldr	r2, [pc, #232]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80ad 	beq.w	8003e60 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d06:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d060      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d145      	bne.n	8003da6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b33      	ldr	r3, [pc, #204]	; (8003de8 <HAL_RCC_OscConfig+0x480>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe fd52 	bl	80027c8 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fe fd4e 	bl	80027c8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e093      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	019b      	lsls	r3, r3, #6
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	071b      	lsls	r3, r3, #28
 8003d72:	491b      	ldr	r1, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCC_OscConfig+0x480>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fe fd23 	bl	80027c8 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fe fd1f 	bl	80027c8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e064      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d98:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x41e>
 8003da4:	e05c      	b.n	8003e60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_RCC_OscConfig+0x480>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe fd0c 	bl	80027c8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fe fd08 	bl	80027c8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e04d      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x44c>
 8003dd2:	e045      	b.n	8003e60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e040      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40007000 	.word	0x40007000
 8003de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dec:	4b1f      	ldr	r3, [pc, #124]	; (8003e6c <HAL_RCC_OscConfig+0x504>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d030      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d129      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d122      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d119      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	3b01      	subs	r3, #1
 8003e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d10f      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800

08003e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07b      	b.n	8003f7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e92:	d009      	beq.n	8003ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
 8003e9a:	e005      	b.n	8003ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fe f8b2 	bl	800202c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	ea42 0103 	orr.w	r1, r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0104 	and.w	r1, r3, #4
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	f003 0210 	and.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b088      	sub	sp, #32
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_SPI_Transmit+0x22>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e126      	b.n	80041f2 <HAL_SPI_Transmit+0x270>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fac:	f7fe fc0c 	bl	80027c8 <HAL_GetTick>
 8003fb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fc6:	e10b      	b.n	80041e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_Transmit+0x52>
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fd8:	e102      	b.n	80041e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004020:	d10f      	bne.n	8004042 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d007      	beq.n	8004060 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004068:	d14b      	bne.n	8004102 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_SPI_Transmit+0xf6>
 8004072:	8afb      	ldrh	r3, [r7, #22]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d13e      	bne.n	80040f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	881a      	ldrh	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800409c:	e02b      	b.n	80040f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d112      	bne.n	80040d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80040d0:	e011      	b.n	80040f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040d2:	f7fe fb79 	bl	80027c8 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d803      	bhi.n	80040ea <HAL_SPI_Transmit+0x168>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_Transmit+0x16e>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040f4:	e074      	b.n	80041e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ce      	bne.n	800409e <HAL_SPI_Transmit+0x11c>
 8004100:	e04c      	b.n	800419c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SPI_Transmit+0x18e>
 800410a:	8afb      	ldrh	r3, [r7, #22]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d140      	bne.n	8004192 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004136:	e02c      	b.n	8004192 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d113      	bne.n	800416e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	86da      	strh	r2, [r3, #54]	; 0x36
 800416c:	e011      	b.n	8004192 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416e:	f7fe fb2b 	bl	80027c8 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d803      	bhi.n	8004186 <HAL_SPI_Transmit+0x204>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d102      	bne.n	800418c <HAL_SPI_Transmit+0x20a>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004190:	e026      	b.n	80041e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1cd      	bne.n	8004138 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fbcb 	bl	800493c <SPI_EndRxTxTransaction>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e000      	b.n	80041e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b088      	sub	sp, #32
 80041fe:	af02      	add	r7, sp, #8
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004216:	d112      	bne.n	800423e <HAL_SPI_Receive+0x44>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10e      	bne.n	800423e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2204      	movs	r2, #4
 8004224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f8f1 	bl	800441c <HAL_SPI_TransmitReceive>
 800423a:	4603      	mov	r3, r0
 800423c:	e0ea      	b.n	8004414 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_SPI_Receive+0x52>
 8004248:	2302      	movs	r3, #2
 800424a:	e0e3      	b.n	8004414 <HAL_SPI_Receive+0x21a>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004254:	f7fe fab8 	bl	80027c8 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d002      	beq.n	800426c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004266:	2302      	movs	r3, #2
 8004268:	75fb      	strb	r3, [r7, #23]
    goto error;
 800426a:	e0ca      	b.n	8004402 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_SPI_Receive+0x7e>
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800427c:	e0c1      	b.n	8004402 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2204      	movs	r2, #4
 8004282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c4:	d10f      	bne.n	80042e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d007      	beq.n	8004304 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d162      	bne.n	80043d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800430c:	e02e      	b.n	800436c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d115      	bne.n	8004348 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f103 020c 	add.w	r2, r3, #12
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004346:	e011      	b.n	800436c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004348:	f7fe fa3e 	bl	80027c8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d803      	bhi.n	8004360 <HAL_SPI_Receive+0x166>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d102      	bne.n	8004366 <HAL_SPI_Receive+0x16c>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	75fb      	strb	r3, [r7, #23]
          goto error;
 800436a:	e04a      	b.n	8004402 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1cb      	bne.n	800430e <HAL_SPI_Receive+0x114>
 8004376:	e031      	b.n	80043dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d113      	bne.n	80043ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	b292      	uxth	r2, r2
 8004392:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	1c9a      	adds	r2, r3, #2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043ac:	e011      	b.n	80043d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ae:	f7fe fa0b 	bl	80027c8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d803      	bhi.n	80043c6 <HAL_SPI_Receive+0x1cc>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d102      	bne.n	80043cc <HAL_SPI_Receive+0x1d2>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043d0:	e017      	b.n	8004402 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1cd      	bne.n	8004378 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	6839      	ldr	r1, [r7, #0]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fa45 	bl	8004870 <SPI_EndRxTransaction>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
 80043fe:	e000      	b.n	8004402 <HAL_SPI_Receive+0x208>
  }

error :
 8004400:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004412:	7dfb      	ldrb	r3, [r7, #23]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	; 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800442a:	2301      	movs	r3, #1
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x26>
 800443e:	2302      	movs	r3, #2
 8004440:	e18a      	b.n	8004758 <HAL_SPI_TransmitReceive+0x33c>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800444a:	f7fe f9bd 	bl	80027c8 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004460:	887b      	ldrh	r3, [r7, #2]
 8004462:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004468:	2b01      	cmp	r3, #1
 800446a:	d00f      	beq.n	800448c <HAL_SPI_TransmitReceive+0x70>
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004472:	d107      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d103      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x68>
 800447c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004480:	2b04      	cmp	r3, #4
 8004482:	d003      	beq.n	800448c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800448a:	e15b      	b.n	8004744 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_SPI_TransmitReceive+0x82>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_SPI_TransmitReceive+0x82>
 8004498:	887b      	ldrh	r3, [r7, #2]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044a4:	e14e      	b.n	8004744 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d003      	beq.n	80044ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2205      	movs	r2, #5
 80044b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	887a      	ldrh	r2, [r7, #2]
 80044ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	887a      	ldrh	r2, [r7, #2]
 80044d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	887a      	ldrh	r2, [r7, #2]
 80044e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d007      	beq.n	800450e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004516:	d178      	bne.n	800460a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x10a>
 8004520:	8b7b      	ldrh	r3, [r7, #26]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d166      	bne.n	80045f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	881a      	ldrh	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	1c9a      	adds	r2, r3, #2
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800454a:	e053      	b.n	80045f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b02      	cmp	r3, #2
 8004558:	d11b      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x176>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d016      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x176>
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d113      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	1c9a      	adds	r2, r3, #2
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d119      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x1b8>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d014      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	b292      	uxth	r2, r2
 80045b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045d0:	2301      	movs	r3, #1
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045d4:	f7fe f8f8 	bl	80027c8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d807      	bhi.n	80045f4 <HAL_SPI_TransmitReceive+0x1d8>
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d003      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045f2:	e0a7      	b.n	8004744 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1a6      	bne.n	800454c <HAL_SPI_TransmitReceive+0x130>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1a1      	bne.n	800454c <HAL_SPI_TransmitReceive+0x130>
 8004608:	e07c      	b.n	8004704 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_TransmitReceive+0x1fc>
 8004612:	8b7b      	ldrh	r3, [r7, #26]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d16b      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800463e:	e057      	b.n	80046f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d11c      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x26c>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d017      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x26c>
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	2b01      	cmp	r3, #1
 800465c:	d114      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d119      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x2ae>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d014      	beq.n	80046ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c6:	2301      	movs	r3, #1
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046ca:	f7fe f87d 	bl	80027c8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d803      	bhi.n	80046e2 <HAL_SPI_TransmitReceive+0x2c6>
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d102      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x2cc>
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046ee:	e029      	b.n	8004744 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1a2      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x224>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d19d      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f917 	bl	800493c <SPI_EndRxTxTransaction>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004720:	e010      	b.n	8004744 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	e000      	b.n	8004744 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004742:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004758:	4618      	mov	r0, r3
 800475a:	3730      	adds	r7, #48	; 0x30
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004770:	f7fe f82a 	bl	80027c8 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4413      	add	r3, r2
 800477e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004780:	f7fe f822 	bl	80027c8 <HAL_GetTick>
 8004784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004786:	4b39      	ldr	r3, [pc, #228]	; (800486c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	015b      	lsls	r3, r3, #5
 800478c:	0d1b      	lsrs	r3, r3, #20
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	fb02 f303 	mul.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004796:	e054      	b.n	8004842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d050      	beq.n	8004842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047a0:	f7fe f812 	bl	80027c8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d902      	bls.n	80047b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d13d      	bne.n	8004832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ce:	d111      	bne.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d8:	d004      	beq.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e2:	d107      	bne.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fc:	d10f      	bne.n	800481e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800481c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e017      	b.n	8004862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	3b01      	subs	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	429a      	cmp	r2, r3
 800485e:	d19b      	bne.n	8004798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000000 	.word	0x20000000

08004870 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004884:	d111      	bne.n	80048aa <SPI_EndRxTransaction+0x3a>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488e:	d004      	beq.n	800489a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004898:	d107      	bne.n	80048aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b2:	d12a      	bne.n	800490a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048bc:	d012      	beq.n	80048e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2200      	movs	r2, #0
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff ff49 	bl	8004760 <SPI_WaitFlagStateUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d02d      	beq.n	8004930 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f043 0220 	orr.w	r2, r3, #32
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e026      	b.n	8004932 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2200      	movs	r2, #0
 80048ec:	2101      	movs	r1, #1
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff ff36 	bl	8004760 <SPI_WaitFlagStateUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01a      	beq.n	8004930 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e013      	b.n	8004932 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2200      	movs	r2, #0
 8004912:	2101      	movs	r1, #1
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff ff23 	bl	8004760 <SPI_WaitFlagStateUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e000      	b.n	8004932 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <SPI_EndRxTxTransaction+0x7c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <SPI_EndRxTxTransaction+0x80>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	0d5b      	lsrs	r3, r3, #21
 8004954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004958:	fb02 f303 	mul.w	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004966:	d112      	bne.n	800498e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2200      	movs	r2, #0
 8004970:	2180      	movs	r1, #128	; 0x80
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff fef4 	bl	8004760 <SPI_WaitFlagStateUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e00f      	b.n	80049ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	3b01      	subs	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b80      	cmp	r3, #128	; 0x80
 80049a6:	d0f2      	beq.n	800498e <SPI_EndRxTxTransaction+0x52>
 80049a8:	e000      	b.n	80049ac <SPI_EndRxTxTransaction+0x70>
        break;
 80049aa:	bf00      	nop
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000000 	.word	0x20000000
 80049bc:	165e9f81 	.word	0x165e9f81

080049c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e041      	b.n	8004a56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fd fd0c 	bl	8002404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f000 fabe 	bl	8004f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d001      	beq.n	8004a78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e046      	b.n	8004b06 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <HAL_TIM_Base_Start+0xb4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d022      	beq.n	8004ad0 <HAL_TIM_Base_Start+0x70>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d01d      	beq.n	8004ad0 <HAL_TIM_Base_Start+0x70>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <HAL_TIM_Base_Start+0xb8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d018      	beq.n	8004ad0 <HAL_TIM_Base_Start+0x70>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <HAL_TIM_Base_Start+0xbc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <HAL_TIM_Base_Start+0x70>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <HAL_TIM_Base_Start+0xc0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00e      	beq.n	8004ad0 <HAL_TIM_Base_Start+0x70>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_TIM_Base_Start+0xc4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <HAL_TIM_Base_Start+0x70>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_TIM_Base_Start+0xc8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <HAL_TIM_Base_Start+0x70>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <HAL_TIM_Base_Start+0xcc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d111      	bne.n	8004af4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b06      	cmp	r3, #6
 8004ae0:	d010      	beq.n	8004b04 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af2:	e007      	b.n	8004b04 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40010400 	.word	0x40010400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40001800 	.word	0x40001800

08004b30 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a1a      	ldr	r2, [r3, #32]
 8004b3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <HAL_TIM_Base_Stop+0x38>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	f240 4344 	movw	r3, #1092	; 0x444
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <HAL_TIM_Base_Stop+0x38>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d122      	bne.n	8004bda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d11b      	bne.n	8004bda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0202 	mvn.w	r2, #2
 8004baa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f9bf 	bl	8004f44 <HAL_TIM_IC_CaptureCallback>
 8004bc6:	e005      	b.n	8004bd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f9b1 	bl	8004f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9c2 	bl	8004f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d122      	bne.n	8004c2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d11b      	bne.n	8004c2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0204 	mvn.w	r2, #4
 8004bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f995 	bl	8004f44 <HAL_TIM_IC_CaptureCallback>
 8004c1a:	e005      	b.n	8004c28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f987 	bl	8004f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f998 	bl	8004f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d122      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d11b      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f06f 0208 	mvn.w	r2, #8
 8004c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2204      	movs	r2, #4
 8004c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f96b 	bl	8004f44 <HAL_TIM_IC_CaptureCallback>
 8004c6e:	e005      	b.n	8004c7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f95d 	bl	8004f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f96e 	bl	8004f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d122      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d11b      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0210 	mvn.w	r2, #16
 8004ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2208      	movs	r2, #8
 8004cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f941 	bl	8004f44 <HAL_TIM_IC_CaptureCallback>
 8004cc2:	e005      	b.n	8004cd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f933 	bl	8004f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f944 	bl	8004f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10e      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d107      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f06f 0201 	mvn.w	r2, #1
 8004cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f90d 	bl	8004f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d10e      	bne.n	8004d2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d107      	bne.n	8004d2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fae9 	bl	8005300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d10e      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d107      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f909 	bl	8004f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d10e      	bne.n	8004d86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d107      	bne.n	8004d86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f06f 0220 	mvn.w	r2, #32
 8004d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fab3 	bl	80052ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_TIM_ConfigClockSource+0x1c>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e0b4      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x186>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	d03e      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0xd4>
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	f200 8087 	bhi.w	8004efa <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df0:	f000 8086 	beq.w	8004f00 <HAL_TIM_ConfigClockSource+0x172>
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d87f      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x16c>
 8004dfa:	2b70      	cmp	r3, #112	; 0x70
 8004dfc:	d01a      	beq.n	8004e34 <HAL_TIM_ConfigClockSource+0xa6>
 8004dfe:	2b70      	cmp	r3, #112	; 0x70
 8004e00:	d87b      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x16c>
 8004e02:	2b60      	cmp	r3, #96	; 0x60
 8004e04:	d050      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0x11a>
 8004e06:	2b60      	cmp	r3, #96	; 0x60
 8004e08:	d877      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x16c>
 8004e0a:	2b50      	cmp	r3, #80	; 0x50
 8004e0c:	d03c      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0xfa>
 8004e0e:	2b50      	cmp	r3, #80	; 0x50
 8004e10:	d873      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x16c>
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d058      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0x13a>
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d86f      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x16c>
 8004e1a:	2b30      	cmp	r3, #48	; 0x30
 8004e1c:	d064      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x15a>
 8004e1e:	2b30      	cmp	r3, #48	; 0x30
 8004e20:	d86b      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x16c>
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d060      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x15a>
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d867      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x16c>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d05c      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x15a>
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d05a      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x15a>
 8004e32:	e062      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f000 f9b6 	bl	80051b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
      break;
 8004e60:	e04f      	b.n	8004f02 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6899      	ldr	r1, [r3, #8]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f000 f99f 	bl	80051b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e84:	609a      	str	r2, [r3, #8]
      break;
 8004e86:	e03c      	b.n	8004f02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	461a      	mov	r2, r3
 8004e96:	f000 f913 	bl	80050c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2150      	movs	r1, #80	; 0x50
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f96c 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004ea6:	e02c      	b.n	8004f02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f000 f932 	bl	800511e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2160      	movs	r1, #96	; 0x60
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f95c 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004ec6:	e01c      	b.n	8004f02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f000 f8f3 	bl	80050c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2140      	movs	r1, #64	; 0x40
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f94c 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004ee6:	e00c      	b.n	8004f02 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f000 f943 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004ef8:	e003      	b.n	8004f02 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
      break;
 8004efe:	e000      	b.n	8004f02 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a40      	ldr	r2, [pc, #256]	; (8005094 <TIM_Base_SetConfig+0x114>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d00f      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3d      	ldr	r2, [pc, #244]	; (8005098 <TIM_Base_SetConfig+0x118>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3c      	ldr	r2, [pc, #240]	; (800509c <TIM_Base_SetConfig+0x11c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3b      	ldr	r2, [pc, #236]	; (80050a0 <TIM_Base_SetConfig+0x120>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a3a      	ldr	r2, [pc, #232]	; (80050a4 <TIM_Base_SetConfig+0x124>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d108      	bne.n	8004fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2f      	ldr	r2, [pc, #188]	; (8005094 <TIM_Base_SetConfig+0x114>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d02b      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d027      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	; (8005098 <TIM_Base_SetConfig+0x118>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d023      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2b      	ldr	r2, [pc, #172]	; (800509c <TIM_Base_SetConfig+0x11c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01f      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <TIM_Base_SetConfig+0x120>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01b      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <TIM_Base_SetConfig+0x124>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d017      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <TIM_Base_SetConfig+0x128>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <TIM_Base_SetConfig+0x12c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00f      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <TIM_Base_SetConfig+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00b      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <TIM_Base_SetConfig+0x134>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a24      	ldr	r2, [pc, #144]	; (80050b8 <TIM_Base_SetConfig+0x138>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a23      	ldr	r2, [pc, #140]	; (80050bc <TIM_Base_SetConfig+0x13c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d108      	bne.n	8005044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <TIM_Base_SetConfig+0x114>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0xf8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0c      	ldr	r2, [pc, #48]	; (80050a4 <TIM_Base_SetConfig+0x124>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	615a      	str	r2, [r3, #20]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40010400 	.word	0x40010400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800
 80050b4:	40001800 	.word	0x40001800
 80050b8:	40001c00 	.word	0x40001c00
 80050bc:	40002000 	.word	0x40002000

080050c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0201 	bic.w	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 030a 	bic.w	r3, r3, #10
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0210 	bic.w	r2, r3, #16
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800515a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	f043 0307 	orr.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005208:	2302      	movs	r3, #2
 800520a:	e05a      	b.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d022      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005258:	d01d      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d018      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a17      	ldr	r2, [pc, #92]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10c      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800529c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40001800 	.word	0x40001800

080052ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e03f      	b.n	80053a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fd f8dc 	bl	80024f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fd7b 	bl	8005e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800538c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b08a      	sub	sp, #40	; 0x28
 80053b2:	af02      	add	r7, sp, #8
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d17c      	bne.n	80054c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <HAL_UART_Transmit+0x2c>
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e075      	b.n	80054ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_UART_Transmit+0x3e>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e06e      	b.n	80054ca <HAL_UART_Transmit+0x11c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2221      	movs	r2, #33	; 0x21
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005402:	f7fd f9e1 	bl	80027c8 <HAL_GetTick>
 8005406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541c:	d108      	bne.n	8005430 <HAL_UART_Transmit+0x82>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	e003      	b.n	8005438 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005440:	e02a      	b.n	8005498 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2200      	movs	r2, #0
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 faf9 	bl	8005a44 <UART_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e036      	b.n	80054ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10b      	bne.n	800547a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005470:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	3302      	adds	r3, #2
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e007      	b.n	800548a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	3301      	adds	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1cf      	bne.n	8005442 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2200      	movs	r2, #0
 80054aa:	2140      	movs	r1, #64	; 0x40
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fac9 	bl	8005a44 <UART_WaitOnFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e006      	b.n	80054ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b0ba      	sub	sp, #232	; 0xe8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005500:	2300      	movs	r3, #0
 8005502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <HAL_UART_IRQHandler+0x66>
 8005526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fbd3 	bl	8005cde <UART_Receive_IT>
      return;
 8005538:	e256      	b.n	80059e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800553a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80de 	beq.w	8005700 <HAL_UART_IRQHandler+0x22c>
 8005544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005554:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80d1 	beq.w	8005700 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <HAL_UART_IRQHandler+0xae>
 800556a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	f043 0201 	orr.w	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <HAL_UART_IRQHandler+0xd2>
 800558e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f043 0202 	orr.w	r2, r3, #2
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <HAL_UART_IRQHandler+0xf6>
 80055b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f043 0204 	orr.w	r2, r3, #4
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d011      	beq.n	80055fa <HAL_UART_IRQHandler+0x126>
 80055d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d105      	bne.n	80055ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0208 	orr.w	r2, r3, #8
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 81ed 	beq.w	80059de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_UART_IRQHandler+0x14e>
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fb5e 	bl	8005cde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <HAL_UART_IRQHandler+0x17a>
 8005646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d04f      	beq.n	80056ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa66 	bl	8005b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b40      	cmp	r3, #64	; 0x40
 8005660:	d141      	bne.n	80056e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3314      	adds	r3, #20
 8005668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800567c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800568e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800569a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1d9      	bne.n	8005662 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d013      	beq.n	80056de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	4a7d      	ldr	r2, [pc, #500]	; (80058b0 <HAL_UART_IRQHandler+0x3dc>)
 80056bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fd fad8 	bl	8002c78 <HAL_DMA_Abort_IT>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d016      	beq.n	80056fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056d8:	4610      	mov	r0, r2
 80056da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	e00e      	b.n	80056fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f99a 	bl	8005a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e00a      	b.n	80056fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f996 	bl	8005a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e006      	b.n	80056fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f992 	bl	8005a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056fa:	e170      	b.n	80059de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	bf00      	nop
    return;
 80056fe:	e16e      	b.n	80059de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	2b01      	cmp	r3, #1
 8005706:	f040 814a 	bne.w	800599e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800570a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8143 	beq.w	800599e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 813c 	beq.w	800599e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	f040 80b4 	bne.w	80058b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005758:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8140 	beq.w	80059e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800576a:	429a      	cmp	r2, r3
 800576c:	f080 8139 	bcs.w	80059e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005776:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	f000 8088 	beq.w	8005896 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800579c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1d9      	bne.n	8005786 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3314      	adds	r3, #20
 80057d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3314      	adds	r3, #20
 80057f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e1      	bne.n	80057d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800581e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005832:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005834:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e3      	bne.n	800580e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005878:	65ba      	str	r2, [r7, #88]	; 0x58
 800587a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800587e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e3      	bne.n	8005854 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	4618      	mov	r0, r3
 8005892:	f7fd f981 	bl	8002b98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8c0 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058ac:	e099      	b.n	80059e2 <HAL_UART_IRQHandler+0x50e>
 80058ae:	bf00      	nop
 80058b0:	08005be7 	.word	0x08005be7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 808b 	beq.w	80059e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8086 	beq.w	80059e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80058fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005900:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e3      	bne.n	80058da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3314      	adds	r3, #20
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	623b      	str	r3, [r7, #32]
   return(result);
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3314      	adds	r3, #20
 8005932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005936:	633a      	str	r2, [r7, #48]	; 0x30
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e3      	bne.n	8005912 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	60fb      	str	r3, [r7, #12]
   return(result);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0310 	bic.w	r3, r3, #16
 800596e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	330c      	adds	r3, #12
 8005978:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800597c:	61fa      	str	r2, [r7, #28]
 800597e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	617b      	str	r3, [r7, #20]
   return(result);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e3      	bne.n	8005958 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f848 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800599c:	e023      	b.n	80059e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <HAL_UART_IRQHandler+0x4ea>
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f929 	bl	8005c0e <UART_Transmit_IT>
    return;
 80059bc:	e014      	b.n	80059e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00e      	beq.n	80059e8 <HAL_UART_IRQHandler+0x514>
 80059ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f969 	bl	8005cae <UART_EndTransmit_IT>
    return;
 80059dc:	e004      	b.n	80059e8 <HAL_UART_IRQHandler+0x514>
    return;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <HAL_UART_IRQHandler+0x514>
      return;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <HAL_UART_IRQHandler+0x514>
      return;
 80059e6:	bf00      	nop
  }
}
 80059e8:	37e8      	adds	r7, #232	; 0xe8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop

080059f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b090      	sub	sp, #64	; 0x40
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	4613      	mov	r3, r2
 8005a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a54:	e050      	b.n	8005af8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d04c      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a64:	f7fc feb0 	bl	80027c8 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d241      	bcs.n	8005af8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a94:	637a      	str	r2, [r7, #52]	; 0x34
 8005a96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3314      	adds	r3, #20
 8005ac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ac8:	623a      	str	r2, [r7, #32]
 8005aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	69f9      	ldr	r1, [r7, #28]
 8005ace:	6a3a      	ldr	r2, [r7, #32]
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e00f      	b.n	8005b18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d09f      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3740      	adds	r7, #64	; 0x40
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b095      	sub	sp, #84	; 0x54
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b48:	643a      	str	r2, [r7, #64]	; 0x40
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3314      	adds	r3, #20
 8005b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e5      	bne.n	8005b5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d119      	bne.n	8005bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bb8:	61ba      	str	r2, [r7, #24]
 8005bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e5      	bne.n	8005b98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bda:	bf00      	nop
 8005bdc:	3754      	adds	r7, #84	; 0x54
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff ff09 	bl	8005a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b21      	cmp	r3, #33	; 0x21
 8005c20:	d13e      	bne.n	8005ca0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2a:	d114      	bne.n	8005c56 <UART_Transmit_IT+0x48>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d110      	bne.n	8005c56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	1c9a      	adds	r2, r3, #2
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	621a      	str	r2, [r3, #32]
 8005c54:	e008      	b.n	8005c68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	1c59      	adds	r1, r3, #1
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6211      	str	r1, [r2, #32]
 8005c60:	781a      	ldrb	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4619      	mov	r1, r3
 8005c76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10f      	bne.n	8005c9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e000      	b.n	8005ca2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ca0:	2302      	movs	r3, #2
  }
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fe8e 	bl	80059f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b08c      	sub	sp, #48	; 0x30
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b22      	cmp	r3, #34	; 0x22
 8005cf0:	f040 80ab 	bne.w	8005e4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfc:	d117      	bne.n	8005d2e <UART_Receive_IT+0x50>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d113      	bne.n	8005d2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	1c9a      	adds	r2, r3, #2
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d2c:	e026      	b.n	8005d7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d40:	d007      	beq.n	8005d52 <UART_Receive_IT+0x74>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <UART_Receive_IT+0x82>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e008      	b.n	8005d72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d15a      	bne.n	8005e46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0220 	bic.w	r2, r2, #32
 8005d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695a      	ldr	r2, [r3, #20]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d135      	bne.n	8005e3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	613b      	str	r3, [r7, #16]
   return(result);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f023 0310 	bic.w	r3, r3, #16
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df6:	623a      	str	r2, [r7, #32]
 8005df8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	69f9      	ldr	r1, [r7, #28]
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e5      	bne.n	8005dd6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d10a      	bne.n	8005e2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fdf9 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
 8005e3a:	e002      	b.n	8005e42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fde1 	bl	8005a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e002      	b.n	8005e4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e000      	b.n	8005e4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e4a:	2302      	movs	r3, #2
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3730      	adds	r7, #48	; 0x30
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e58:	b0c0      	sub	sp, #256	; 0x100
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	68d9      	ldr	r1, [r3, #12]
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	ea40 0301 	orr.w	r3, r0, r1
 8005e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005eac:	f021 010c 	bic.w	r1, r1, #12
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ece:	6999      	ldr	r1, [r3, #24]
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	ea40 0301 	orr.w	r3, r0, r1
 8005eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b8f      	ldr	r3, [pc, #572]	; (8006120 <UART_SetConfig+0x2cc>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d005      	beq.n	8005ef4 <UART_SetConfig+0xa0>
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b8d      	ldr	r3, [pc, #564]	; (8006124 <UART_SetConfig+0x2d0>)
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d104      	bne.n	8005efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ef4:	f7fd fd24 	bl	8003940 <HAL_RCC_GetPCLK2Freq>
 8005ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005efc:	e003      	b.n	8005f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005efe:	f7fd fd0b 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8005f02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f10:	f040 810c 	bne.w	800612c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f26:	4622      	mov	r2, r4
 8005f28:	462b      	mov	r3, r5
 8005f2a:	1891      	adds	r1, r2, r2
 8005f2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f2e:	415b      	adcs	r3, r3
 8005f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f36:	4621      	mov	r1, r4
 8005f38:	eb12 0801 	adds.w	r8, r2, r1
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	eb43 0901 	adc.w	r9, r3, r1
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f56:	4690      	mov	r8, r2
 8005f58:	4699      	mov	r9, r3
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	eb18 0303 	adds.w	r3, r8, r3
 8005f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f64:	462b      	mov	r3, r5
 8005f66:	eb49 0303 	adc.w	r3, r9, r3
 8005f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f82:	460b      	mov	r3, r1
 8005f84:	18db      	adds	r3, r3, r3
 8005f86:	653b      	str	r3, [r7, #80]	; 0x50
 8005f88:	4613      	mov	r3, r2
 8005f8a:	eb42 0303 	adc.w	r3, r2, r3
 8005f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f98:	f7fa fe1e 	bl	8000bd8 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4b61      	ldr	r3, [pc, #388]	; (8006128 <UART_SetConfig+0x2d4>)
 8005fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	011c      	lsls	r4, r3, #4
 8005faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	1891      	adds	r1, r2, r2
 8005fc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fc4:	415b      	adcs	r3, r3
 8005fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fcc:	4641      	mov	r1, r8
 8005fce:	eb12 0a01 	adds.w	sl, r2, r1
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fec:	4692      	mov	sl, r2
 8005fee:	469b      	mov	fp, r3
 8005ff0:	4643      	mov	r3, r8
 8005ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8006000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006010:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006018:	460b      	mov	r3, r1
 800601a:	18db      	adds	r3, r3, r3
 800601c:	643b      	str	r3, [r7, #64]	; 0x40
 800601e:	4613      	mov	r3, r2
 8006020:	eb42 0303 	adc.w	r3, r2, r3
 8006024:	647b      	str	r3, [r7, #68]	; 0x44
 8006026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800602a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800602e:	f7fa fdd3 	bl	8000bd8 <__aeabi_uldivmod>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4611      	mov	r1, r2
 8006038:	4b3b      	ldr	r3, [pc, #236]	; (8006128 <UART_SetConfig+0x2d4>)
 800603a:	fba3 2301 	umull	r2, r3, r3, r1
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	2264      	movs	r2, #100	; 0x64
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	1acb      	subs	r3, r1, r3
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800604e:	4b36      	ldr	r3, [pc, #216]	; (8006128 <UART_SetConfig+0x2d4>)
 8006050:	fba3 2302 	umull	r2, r3, r3, r2
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800605c:	441c      	add	r4, r3
 800605e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006062:	2200      	movs	r2, #0
 8006064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006068:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800606c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	1891      	adds	r1, r2, r2
 8006076:	63b9      	str	r1, [r7, #56]	; 0x38
 8006078:	415b      	adcs	r3, r3
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800607c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006080:	4641      	mov	r1, r8
 8006082:	1851      	adds	r1, r2, r1
 8006084:	6339      	str	r1, [r7, #48]	; 0x30
 8006086:	4649      	mov	r1, r9
 8006088:	414b      	adcs	r3, r1
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006098:	4659      	mov	r1, fp
 800609a:	00cb      	lsls	r3, r1, #3
 800609c:	4651      	mov	r1, sl
 800609e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a2:	4651      	mov	r1, sl
 80060a4:	00ca      	lsls	r2, r1, #3
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	4642      	mov	r2, r8
 80060ae:	189b      	adds	r3, r3, r2
 80060b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060b4:	464b      	mov	r3, r9
 80060b6:	460a      	mov	r2, r1
 80060b8:	eb42 0303 	adc.w	r3, r2, r3
 80060bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060d4:	460b      	mov	r3, r1
 80060d6:	18db      	adds	r3, r3, r3
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060da:	4613      	mov	r3, r2
 80060dc:	eb42 0303 	adc.w	r3, r2, r3
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060ea:	f7fa fd75 	bl	8000bd8 <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <UART_SetConfig+0x2d4>)
 80060f4:	fba3 1302 	umull	r1, r3, r3, r2
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	2164      	movs	r1, #100	; 0x64
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	3332      	adds	r3, #50	; 0x32
 8006106:	4a08      	ldr	r2, [pc, #32]	; (8006128 <UART_SetConfig+0x2d4>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f003 0207 	and.w	r2, r3, #7
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4422      	add	r2, r4
 800611a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800611c:	e105      	b.n	800632a <UART_SetConfig+0x4d6>
 800611e:	bf00      	nop
 8006120:	40011000 	.word	0x40011000
 8006124:	40011400 	.word	0x40011400
 8006128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800612c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006130:	2200      	movs	r2, #0
 8006132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006136:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800613a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800613e:	4642      	mov	r2, r8
 8006140:	464b      	mov	r3, r9
 8006142:	1891      	adds	r1, r2, r2
 8006144:	6239      	str	r1, [r7, #32]
 8006146:	415b      	adcs	r3, r3
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
 800614a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800614e:	4641      	mov	r1, r8
 8006150:	1854      	adds	r4, r2, r1
 8006152:	4649      	mov	r1, r9
 8006154:	eb43 0501 	adc.w	r5, r3, r1
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	00eb      	lsls	r3, r5, #3
 8006162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006166:	00e2      	lsls	r2, r4, #3
 8006168:	4614      	mov	r4, r2
 800616a:	461d      	mov	r5, r3
 800616c:	4643      	mov	r3, r8
 800616e:	18e3      	adds	r3, r4, r3
 8006170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006174:	464b      	mov	r3, r9
 8006176:	eb45 0303 	adc.w	r3, r5, r3
 800617a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800618a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800619a:	4629      	mov	r1, r5
 800619c:	008b      	lsls	r3, r1, #2
 800619e:	4621      	mov	r1, r4
 80061a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a4:	4621      	mov	r1, r4
 80061a6:	008a      	lsls	r2, r1, #2
 80061a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061ac:	f7fa fd14 	bl	8000bd8 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b60      	ldr	r3, [pc, #384]	; (8006338 <UART_SetConfig+0x4e4>)
 80061b6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	011c      	lsls	r4, r3, #4
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	61b9      	str	r1, [r7, #24]
 80061d8:	415b      	adcs	r3, r3
 80061da:	61fb      	str	r3, [r7, #28]
 80061dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061e0:	4641      	mov	r1, r8
 80061e2:	1851      	adds	r1, r2, r1
 80061e4:	6139      	str	r1, [r7, #16]
 80061e6:	4649      	mov	r1, r9
 80061e8:	414b      	adcs	r3, r1
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061f8:	4659      	mov	r1, fp
 80061fa:	00cb      	lsls	r3, r1, #3
 80061fc:	4651      	mov	r1, sl
 80061fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006202:	4651      	mov	r1, sl
 8006204:	00ca      	lsls	r2, r1, #3
 8006206:	4610      	mov	r0, r2
 8006208:	4619      	mov	r1, r3
 800620a:	4603      	mov	r3, r0
 800620c:	4642      	mov	r2, r8
 800620e:	189b      	adds	r3, r3, r2
 8006210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006214:	464b      	mov	r3, r9
 8006216:	460a      	mov	r2, r1
 8006218:	eb42 0303 	adc.w	r3, r2, r3
 800621c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	67bb      	str	r3, [r7, #120]	; 0x78
 800622a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006238:	4649      	mov	r1, r9
 800623a:	008b      	lsls	r3, r1, #2
 800623c:	4641      	mov	r1, r8
 800623e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006242:	4641      	mov	r1, r8
 8006244:	008a      	lsls	r2, r1, #2
 8006246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800624a:	f7fa fcc5 	bl	8000bd8 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4b39      	ldr	r3, [pc, #228]	; (8006338 <UART_SetConfig+0x4e4>)
 8006254:	fba3 1302 	umull	r1, r3, r3, r2
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	2164      	movs	r1, #100	; 0x64
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	3332      	adds	r3, #50	; 0x32
 8006266:	4a34      	ldr	r2, [pc, #208]	; (8006338 <UART_SetConfig+0x4e4>)
 8006268:	fba2 2303 	umull	r2, r3, r2, r3
 800626c:	095b      	lsrs	r3, r3, #5
 800626e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006272:	441c      	add	r4, r3
 8006274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006278:	2200      	movs	r2, #0
 800627a:	673b      	str	r3, [r7, #112]	; 0x70
 800627c:	677a      	str	r2, [r7, #116]	; 0x74
 800627e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006282:	4642      	mov	r2, r8
 8006284:	464b      	mov	r3, r9
 8006286:	1891      	adds	r1, r2, r2
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	415b      	adcs	r3, r3
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006292:	4641      	mov	r1, r8
 8006294:	1851      	adds	r1, r2, r1
 8006296:	6039      	str	r1, [r7, #0]
 8006298:	4649      	mov	r1, r9
 800629a:	414b      	adcs	r3, r1
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062aa:	4659      	mov	r1, fp
 80062ac:	00cb      	lsls	r3, r1, #3
 80062ae:	4651      	mov	r1, sl
 80062b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b4:	4651      	mov	r1, sl
 80062b6:	00ca      	lsls	r2, r1, #3
 80062b8:	4610      	mov	r0, r2
 80062ba:	4619      	mov	r1, r3
 80062bc:	4603      	mov	r3, r0
 80062be:	4642      	mov	r2, r8
 80062c0:	189b      	adds	r3, r3, r2
 80062c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c4:	464b      	mov	r3, r9
 80062c6:	460a      	mov	r2, r1
 80062c8:	eb42 0303 	adc.w	r3, r2, r3
 80062cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	663b      	str	r3, [r7, #96]	; 0x60
 80062d8:	667a      	str	r2, [r7, #100]	; 0x64
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062e6:	4649      	mov	r1, r9
 80062e8:	008b      	lsls	r3, r1, #2
 80062ea:	4641      	mov	r1, r8
 80062ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f0:	4641      	mov	r1, r8
 80062f2:	008a      	lsls	r2, r1, #2
 80062f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062f8:	f7fa fc6e 	bl	8000bd8 <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <UART_SetConfig+0x4e4>)
 8006302:	fba3 1302 	umull	r1, r3, r3, r2
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	2164      	movs	r1, #100	; 0x64
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	3332      	adds	r3, #50	; 0x32
 8006314:	4a08      	ldr	r2, [pc, #32]	; (8006338 <UART_SetConfig+0x4e4>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4422      	add	r2, r4
 8006328:	609a      	str	r2, [r3, #8]
}
 800632a:	bf00      	nop
 800632c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006330:	46bd      	mov	sp, r7
 8006332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006336:	bf00      	nop
 8006338:	51eb851f 	.word	0x51eb851f

0800633c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	2101      	movs	r1, #1
 800634a:	4820      	ldr	r0, [pc, #128]	; (80063cc <network_configure_activations+0x90>)
 800634c:	f000 fa4e 	bl	80067ec <ai_platform_get_activations_map>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02f      	beq.n	80063b6 <network_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <network_configure_activations+0x90>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <network_configure_activations+0x94>)
 800635c:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800635e:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <network_configure_activations+0x90>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <network_configure_activations+0x94>)
 8006364:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 8006366:	4b19      	ldr	r3, [pc, #100]	; (80063cc <network_configure_activations+0x90>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3318      	adds	r3, #24
 800636c:	4a19      	ldr	r2, [pc, #100]	; (80063d4 <network_configure_activations+0x98>)
 800636e:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 8006370:	4b16      	ldr	r3, [pc, #88]	; (80063cc <network_configure_activations+0x90>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3318      	adds	r3, #24
 8006376:	4a17      	ldr	r2, [pc, #92]	; (80063d4 <network_configure_activations+0x98>)
 8006378:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 800637a:	4b14      	ldr	r3, [pc, #80]	; (80063cc <network_configure_activations+0x90>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3318      	adds	r3, #24
 8006380:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <network_configure_activations+0x9c>)
 8006382:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <network_configure_activations+0x90>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3318      	adds	r3, #24
 800638a:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <network_configure_activations+0x9c>)
 800638c:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800638e:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <network_configure_activations+0x90>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a12      	ldr	r2, [pc, #72]	; (80063dc <network_configure_activations+0xa0>)
 8006394:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <network_configure_activations+0x90>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a10      	ldr	r2, [pc, #64]	; (80063dc <network_configure_activations+0xa0>)
 800639c:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 800639e:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <network_configure_activations+0x90>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <network_configure_activations+0xa4>)
 80063a6:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 80063a8:	4b08      	ldr	r3, [pc, #32]	; (80063cc <network_configure_activations+0x90>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <network_configure_activations+0xa4>)
 80063b0:	60d3      	str	r3, [r2, #12]
    
    return true;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e005      	b.n	80063c2 <network_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80063b6:	2213      	movs	r2, #19
 80063b8:	2130      	movs	r1, #48	; 0x30
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa6a 	bl	8006894 <ai_platform_network_set_error>
  return false;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	2001b5e4 	.word	0x2001b5e4
 80063d0:	2000008c 	.word	0x2000008c
 80063d4:	2000000c 	.word	0x2000000c
 80063d8:	2000001c 	.word	0x2000001c
 80063dc:	2000002c 	.word	0x2000002c
 80063e0:	2000003c 	.word	0x2000003c

080063e4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	2101      	movs	r1, #1
 80063f2:	482a      	ldr	r0, [pc, #168]	; (800649c <network_configure_weights+0xb8>)
 80063f4:	f000 f9a6 	bl	8006744 <ai_platform_get_weights_map>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d043      	beq.n	8006486 <network_configure_weights+0xa2>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80063fe:	4b28      	ldr	r3, [pc, #160]	; (80064a0 <network_configure_weights+0xbc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006406:	4a26      	ldr	r2, [pc, #152]	; (80064a0 <network_configure_weights+0xbc>)
 8006408:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800640a:	4b24      	ldr	r3, [pc, #144]	; (800649c <network_configure_weights+0xb8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <network_configure_weights+0xbc>)
 8006410:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8006412:	4b22      	ldr	r3, [pc, #136]	; (800649c <network_configure_weights+0xb8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a22      	ldr	r2, [pc, #136]	; (80064a0 <network_configure_weights+0xbc>)
 8006418:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800641a:	4b22      	ldr	r3, [pc, #136]	; (80064a4 <network_configure_weights+0xc0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006422:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <network_configure_weights+0xc0>)
 8006424:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 240);
 8006426:	4b1d      	ldr	r3, [pc, #116]	; (800649c <network_configure_weights+0xb8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	33f0      	adds	r3, #240	; 0xf0
 800642c:	4a1d      	ldr	r2, [pc, #116]	; (80064a4 <network_configure_weights+0xc0>)
 800642e:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 240);
 8006430:	4b1a      	ldr	r3, [pc, #104]	; (800649c <network_configure_weights+0xb8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	33f0      	adds	r3, #240	; 0xf0
 8006436:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <network_configure_weights+0xc0>)
 8006438:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800643a:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <network_configure_weights+0xc4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006442:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <network_configure_weights+0xc4>)
 8006444:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 280);
 8006446:	4b15      	ldr	r3, [pc, #84]	; (800649c <network_configure_weights+0xb8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800644e:	4a16      	ldr	r2, [pc, #88]	; (80064a8 <network_configure_weights+0xc4>)
 8006450:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 280);
 8006452:	4b12      	ldr	r3, [pc, #72]	; (800649c <network_configure_weights+0xb8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800645a:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <network_configure_weights+0xc4>)
 800645c:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <network_configure_weights+0xc8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006466:	4a11      	ldr	r2, [pc, #68]	; (80064ac <network_configure_weights+0xc8>)
 8006468:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 320);
 800646a:	4b0c      	ldr	r3, [pc, #48]	; (800649c <network_configure_weights+0xb8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <network_configure_weights+0xc8>)
 8006474:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 320);
 8006476:	4b09      	ldr	r3, [pc, #36]	; (800649c <network_configure_weights+0xb8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800647e:	4a0b      	ldr	r2, [pc, #44]	; (80064ac <network_configure_weights+0xc8>)
 8006480:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006482:	2301      	movs	r3, #1
 8006484:	e005      	b.n	8006492 <network_configure_weights+0xae>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006486:	2212      	movs	r2, #18
 8006488:	2130      	movs	r1, #48	; 0x30
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa02 	bl	8006894 <ai_platform_network_set_error>
  return false;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	2001b5e8 	.word	0x2001b5e8
 80064a0:	2000004c 	.word	0x2000004c
 80064a4:	2000005c 	.word	0x2000005c
 80064a8:	2000006c 	.word	0x2000006c
 80064ac:	2000007c 	.word	0x2000007c

080064b0 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80064ba:	2300      	movs	r3, #0
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	2305      	movs	r3, #5
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	2301      	movs	r3, #1
 80064c4:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <ai_network_create+0x28>)
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fb8f 	bl	8006bec <ai_platform_network_create>
 80064ce:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	200004b0 	.word	0x200004b0

080064dc <ai_network_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <ai_network_inputs_get+0x2c>)
 80064ee:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a06      	ldr	r2, [pc, #24]	; (800650c <ai_network_inputs_get+0x30>)
 80064f4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f9d1 	bl	80068a0 <ai_platform_inputs_get>
 80064fe:	4603      	mov	r3, r0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200004b0 	.word	0x200004b0
 800650c:	a1c00100 	.word	0xa1c00100

08006510 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <ai_network_outputs_get+0x2c>)
 8006522:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a06      	ldr	r2, [pc, #24]	; (8006540 <ai_network_outputs_get+0x30>)
 8006528:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fa8d 	bl	8006a4c <ai_platform_outputs_get>
 8006532:	4603      	mov	r3, r0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	200004b0 	.word	0x200004b0
 8006540:	a1c00100 	.word	0xa1c00100

08006544 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fc21 	bl	8006d98 <ai_platform_network_init>
 8006556:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <ai_network_init+0x1e>
 800655e:	2300      	movs	r3, #0
 8006560:	e028      	b.n	80065b4 <ai_network_init+0x70>

  ai_bool ok = true;
 8006562:	2301      	movs	r3, #1
 8006564:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff ff3b 	bl	80063e4 <network_configure_weights>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	bf14      	ite	ne
 800657a:	2301      	movne	r3, #1
 800657c:	2300      	moveq	r3, #0
 800657e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff feda 	bl	800633c <network_configure_activations>
 8006588:	4603      	mov	r3, r0
 800658a:	461a      	mov	r2, r3
 800658c:	7afb      	ldrb	r3, [r7, #11]
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fcea 	bl	8006f74 <ai_platform_network_post_init>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	7afb      	ldrb	r3, [r7, #11]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bf14      	ite	ne
 80065ac:	2301      	movne	r3, #1
 80065ae:	2300      	moveq	r3, #0
 80065b0:	72fb      	strb	r3, [r7, #11]

  return ok;
 80065b2:	7afb      	ldrb	r3, [r7, #11]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fd59 	bl	8007084 <ai_platform_network_process>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 80065dc:	b4b0      	push	{r4, r5, r7}
 80065de:	b08f      	sub	sp, #60	; 0x3c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80065e6:	4b15      	ldr	r3, [pc, #84]	; (800663c <ai_network_data_activations_buffer_get+0x60>)
 80065e8:	61fb      	str	r3, [r7, #28]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	623b      	str	r3, [r7, #32]
 80065ee:	2300      	movs	r3, #0
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
 80065f2:	2300      	movs	r3, #0
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f6:	2340      	movs	r3, #64	; 0x40
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	2204      	movs	r2, #4
 8006604:	f362 231f 	bfi	r3, r2, #8, #24
 8006608:	633b      	str	r3, [r7, #48]	; 0x30
 800660a:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <ai_network_data_activations_buffer_get+0x64>)
 800660c:	f107 040c 	add.w	r4, r7, #12
 8006610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006616:	f107 030c 	add.w	r3, r7, #12
 800661a:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	461d      	mov	r5, r3
 8006620:	f107 041c 	add.w	r4, r7, #28
 8006624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006628:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800662c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	373c      	adds	r7, #60	; 0x3c
 8006634:	46bd      	mov	sp, r7
 8006636:	bcb0      	pop	{r4, r5, r7}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	00040440 	.word	0x00040440
 8006640:	0800c8c0 	.word	0x0800c8c0

08006644 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8006644:	b4b0      	push	{r4, r5, r7}
 8006646:	b08f      	sub	sp, #60	; 0x3c
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800664e:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <ai_network_data_weights_buffer_get+0x60>)
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	623b      	str	r3, [r7, #32]
 8006656:	2300      	movs	r3, #0
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
 800665a:	2300      	movs	r3, #0
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006664:	2301      	movs	r3, #1
 8006666:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2204      	movs	r2, #4
 800666e:	f362 231f 	bfi	r3, r2, #8, #24
 8006672:	633b      	str	r3, [r7, #48]	; 0x30
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <ai_network_data_weights_buffer_get+0x64>)
 8006676:	f107 040c 	add.w	r4, r7, #12
 800667a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800667c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	461d      	mov	r5, r3
 800668a:	f107 041c 	add.w	r4, r7, #28
 800668e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006692:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006696:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	373c      	adds	r7, #60	; 0x3c
 800669e:	46bd      	mov	sp, r7
 80066a0:	bcb0      	pop	{r4, r5, r7}
 80066a2:	4770      	bx	lr
 80066a4:	40040440 	.word	0x40040440
 80066a8:	0800c8d0 	.word	0x0800c8d0

080066ac <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 80066b0:	4b02      	ldr	r3, [pc, #8]	; (80066bc <ai_network_data_weights_get+0x10>)

}
 80066b2:	4618      	mov	r0, r3
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	20000554 	.word	0x20000554

080066c0 <ai_buffer_get_size>:
 80066c0:	b378      	cbz	r0, 8006722 <ai_buffer_get_size+0x62>
 80066c2:	b410      	push	{r4}
 80066c4:	6803      	ldr	r3, [r0, #0]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <ai_buffer_get_size+0x64>)
 80066c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80066cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d01e      	beq.n	8006712 <ai_buffer_get_size+0x52>
 80066d4:	6984      	ldr	r4, [r0, #24]
 80066d6:	6862      	ldr	r2, [r4, #4]
 80066d8:	7d03      	ldrb	r3, [r0, #20]
 80066da:	6941      	ldr	r1, [r0, #20]
 80066dc:	f1a3 0301 	sub.w	r3, r3, #1
 80066e0:	fab3 f383 	clz	r3, r3
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80066ea:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80066ee:	da0b      	bge.n	8006708 <ai_buffer_get_size+0x48>
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d102      	bne.n	80066fa <ai_buffer_get_size+0x3a>
 80066f4:	2802      	cmp	r0, #2
 80066f6:	d007      	beq.n	8006708 <ai_buffer_get_size+0x48>
 80066f8:	2302      	movs	r3, #2
 80066fa:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80066fe:	3301      	adds	r3, #1
 8006700:	4298      	cmp	r0, r3
 8006702:	fb01 f202 	mul.w	r2, r1, r2
 8006706:	d1f3      	bne.n	80066f0 <ai_buffer_get_size+0x30>
 8006708:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800670c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	2900      	cmp	r1, #0
 8006714:	d0de      	beq.n	80066d4 <ai_buffer_get_size+0x14>
 8006716:	6984      	ldr	r4, [r0, #24]
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	331f      	adds	r3, #31
 800671c:	f023 021f 	bic.w	r2, r3, #31
 8006720:	e7da      	b.n	80066d8 <ai_buffer_get_size+0x18>
 8006722:	4770      	bx	lr
 8006724:	000400c0 	.word	0x000400c0

08006728 <ai_buffer_array_sane>:
 8006728:	b138      	cbz	r0, 800673a <ai_buffer_array_sane+0x12>
 800672a:	6843      	ldr	r3, [r0, #4]
 800672c:	b123      	cbz	r3, 8006738 <ai_buffer_array_sane+0x10>
 800672e:	8840      	ldrh	r0, [r0, #2]
 8006730:	3800      	subs	r0, #0
 8006732:	bf18      	it	ne
 8006734:	2001      	movne	r0, #1
 8006736:	4770      	bx	lr
 8006738:	4618      	mov	r0, r3
 800673a:	4770      	bx	lr

0800673c <_ai_platform_acquire_crc>:
 800673c:	2001      	movs	r0, #1
 800673e:	4770      	bx	lr

08006740 <_ai_platform_release_crc>:
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop

08006744 <ai_platform_get_weights_map>:
 8006744:	2a00      	cmp	r2, #0
 8006746:	d037      	beq.n	80067b8 <ai_platform_get_weights_map+0x74>
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	4604      	mov	r4, r0
 800674c:	b1a0      	cbz	r0, 8006778 <ai_platform_get_weights_map+0x34>
 800674e:	460f      	mov	r7, r1
 8006750:	b191      	cbz	r1, 8006778 <ai_platform_get_weights_map+0x34>
 8006752:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <ai_platform_get_weights_map+0xa4>)
 8006754:	6810      	ldr	r0, [r2, #0]
 8006756:	4298      	cmp	r0, r3
 8006758:	4615      	mov	r5, r2
 800675a:	d00f      	beq.n	800677c <ai_platform_get_weights_map+0x38>
 800675c:	6855      	ldr	r5, [r2, #4]
 800675e:	b15d      	cbz	r5, 8006778 <ai_platform_get_weights_map+0x34>
 8006760:	682e      	ldr	r6, [r5, #0]
 8006762:	429e      	cmp	r6, r3
 8006764:	d02a      	beq.n	80067bc <ai_platform_get_weights_map+0x78>
 8006766:	f1a1 0001 	sub.w	r0, r1, #1
 800676a:	6025      	str	r5, [r4, #0]
 800676c:	fab0 f080 	clz	r0, r0
 8006770:	0940      	lsrs	r0, r0, #5
 8006772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006774:	42a7      	cmp	r7, r4
 8006776:	d034      	beq.n	80067e2 <ai_platform_get_weights_map+0x9e>
 8006778:	2000      	movs	r0, #0
 800677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677c:	1d10      	adds	r0, r2, #4
 800677e:	f7ff ffd3 	bl	8006728 <ai_buffer_array_sane>
 8006782:	2800      	cmp	r0, #0
 8006784:	d0f8      	beq.n	8006778 <ai_platform_get_weights_map+0x34>
 8006786:	88eb      	ldrh	r3, [r5, #6]
 8006788:	429f      	cmp	r7, r3
 800678a:	d1f5      	bne.n	8006778 <ai_platform_get_weights_map+0x34>
 800678c:	f04f 0e00 	mov.w	lr, #0
 8006790:	1f23      	subs	r3, r4, #4
 8006792:	4670      	mov	r0, lr
 8006794:	68aa      	ldr	r2, [r5, #8]
 8006796:	eb02 0c0e 	add.w	ip, r2, lr
 800679a:	f10e 0e1c 	add.w	lr, lr, #28
 800679e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80067a2:	b124      	cbz	r4, 80067ae <ai_platform_get_weights_map+0x6a>
 80067a4:	3001      	adds	r0, #1
 80067a6:	4287      	cmp	r7, r0
 80067a8:	f843 4f04 	str.w	r4, [r3, #4]!
 80067ac:	d1f2      	bne.n	8006794 <ai_platform_get_weights_map+0x50>
 80067ae:	1a38      	subs	r0, r7, r0
 80067b0:	fab0 f080 	clz	r0, r0
 80067b4:	0940      	lsrs	r0, r0, #5
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	2000      	movs	r0, #0
 80067ba:	4770      	bx	lr
 80067bc:	1f23      	subs	r3, r4, #4
 80067be:	4628      	mov	r0, r5
 80067c0:	2400      	movs	r4, #0
 80067c2:	e000      	b.n	80067c6 <ai_platform_get_weights_map+0x82>
 80067c4:	4614      	mov	r4, r2
 80067c6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80067ca:	42b2      	cmp	r2, r6
 80067cc:	d0d2      	beq.n	8006774 <ai_platform_get_weights_map+0x30>
 80067ce:	f843 2f04 	str.w	r2, [r3, #4]!
 80067d2:	1c62      	adds	r2, r4, #1
 80067d4:	4297      	cmp	r7, r2
 80067d6:	d1f5      	bne.n	80067c4 <ai_platform_get_weights_map+0x80>
 80067d8:	3402      	adds	r4, #2
 80067da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80067de:	42b3      	cmp	r3, r6
 80067e0:	d1ca      	bne.n	8006778 <ai_platform_get_weights_map+0x34>
 80067e2:	2001      	movs	r0, #1
 80067e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e6:	bf00      	nop
 80067e8:	a1facade 	.word	0xa1facade

080067ec <ai_platform_get_activations_map>:
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	d038      	beq.n	8006862 <ai_platform_get_activations_map+0x76>
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	b1a0      	cbz	r0, 8006820 <ai_platform_get_activations_map+0x34>
 80067f6:	460f      	mov	r7, r1
 80067f8:	b191      	cbz	r1, 8006820 <ai_platform_get_activations_map+0x34>
 80067fa:	4b25      	ldr	r3, [pc, #148]	; (8006890 <ai_platform_get_activations_map+0xa4>)
 80067fc:	6810      	ldr	r0, [r2, #0]
 80067fe:	4298      	cmp	r0, r3
 8006800:	4615      	mov	r5, r2
 8006802:	d00f      	beq.n	8006824 <ai_platform_get_activations_map+0x38>
 8006804:	6a15      	ldr	r5, [r2, #32]
 8006806:	b15d      	cbz	r5, 8006820 <ai_platform_get_activations_map+0x34>
 8006808:	682e      	ldr	r6, [r5, #0]
 800680a:	429e      	cmp	r6, r3
 800680c:	d02b      	beq.n	8006866 <ai_platform_get_activations_map+0x7a>
 800680e:	f1a1 0001 	sub.w	r0, r1, #1
 8006812:	6025      	str	r5, [r4, #0]
 8006814:	fab0 f080 	clz	r0, r0
 8006818:	0940      	lsrs	r0, r0, #5
 800681a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800681c:	42a7      	cmp	r7, r4
 800681e:	d035      	beq.n	800688c <ai_platform_get_activations_map+0xa0>
 8006820:	2000      	movs	r0, #0
 8006822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006824:	f102 000c 	add.w	r0, r2, #12
 8006828:	f7ff ff7e 	bl	8006728 <ai_buffer_array_sane>
 800682c:	2800      	cmp	r0, #0
 800682e:	d0f7      	beq.n	8006820 <ai_platform_get_activations_map+0x34>
 8006830:	89eb      	ldrh	r3, [r5, #14]
 8006832:	429f      	cmp	r7, r3
 8006834:	d1f4      	bne.n	8006820 <ai_platform_get_activations_map+0x34>
 8006836:	f04f 0e00 	mov.w	lr, #0
 800683a:	1f23      	subs	r3, r4, #4
 800683c:	4670      	mov	r0, lr
 800683e:	692a      	ldr	r2, [r5, #16]
 8006840:	eb02 0c0e 	add.w	ip, r2, lr
 8006844:	f10e 0e1c 	add.w	lr, lr, #28
 8006848:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800684c:	b124      	cbz	r4, 8006858 <ai_platform_get_activations_map+0x6c>
 800684e:	3001      	adds	r0, #1
 8006850:	4287      	cmp	r7, r0
 8006852:	f843 4f04 	str.w	r4, [r3, #4]!
 8006856:	d1f2      	bne.n	800683e <ai_platform_get_activations_map+0x52>
 8006858:	1a38      	subs	r0, r7, r0
 800685a:	fab0 f080 	clz	r0, r0
 800685e:	0940      	lsrs	r0, r0, #5
 8006860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006862:	2000      	movs	r0, #0
 8006864:	4770      	bx	lr
 8006866:	1f23      	subs	r3, r4, #4
 8006868:	4628      	mov	r0, r5
 800686a:	2400      	movs	r4, #0
 800686c:	e000      	b.n	8006870 <ai_platform_get_activations_map+0x84>
 800686e:	4614      	mov	r4, r2
 8006870:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006874:	42b2      	cmp	r2, r6
 8006876:	d0d1      	beq.n	800681c <ai_platform_get_activations_map+0x30>
 8006878:	f843 2f04 	str.w	r2, [r3, #4]!
 800687c:	1c62      	adds	r2, r4, #1
 800687e:	4297      	cmp	r7, r2
 8006880:	d1f5      	bne.n	800686e <ai_platform_get_activations_map+0x82>
 8006882:	3402      	adds	r4, #2
 8006884:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006888:	42b3      	cmp	r3, r6
 800688a:	d1c9      	bne.n	8006820 <ai_platform_get_activations_map+0x34>
 800688c:	2001      	movs	r0, #1
 800688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006890:	a1facade 	.word	0xa1facade

08006894 <ai_platform_network_set_error>:
 8006894:	b110      	cbz	r0, 800689c <ai_platform_network_set_error+0x8>
 8006896:	3010      	adds	r0, #16
 8006898:	f000 be7c 	b.w	8007594 <core_set_error>
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop

080068a0 <ai_platform_inputs_get>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	b085      	sub	sp, #20
 80068a6:	9102      	str	r1, [sp, #8]
 80068a8:	b1f0      	cbz	r0, 80068e8 <ai_platform_inputs_get+0x48>
 80068aa:	4b62      	ldr	r3, [pc, #392]	; (8006a34 <ai_platform_inputs_get+0x194>)
 80068ac:	6802      	ldr	r2, [r0, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	4607      	mov	r7, r0
 80068b2:	d119      	bne.n	80068e8 <ai_platform_inputs_get+0x48>
 80068b4:	f7ff ff42 	bl	800673c <_ai_platform_acquire_crc>
 80068b8:	4b5f      	ldr	r3, [pc, #380]	; (8006a38 <ai_platform_inputs_get+0x198>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c4:	d03d      	beq.n	8006942 <ai_platform_inputs_get+0xa2>
 80068c6:	4a5d      	ldr	r2, [pc, #372]	; (8006a3c <ai_platform_inputs_get+0x19c>)
 80068c8:	2301      	movs	r3, #1
 80068ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80068ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1fb      	bne.n	80068ce <ai_platform_inputs_get+0x2e>
 80068d6:	4b5a      	ldr	r3, [pc, #360]	; (8006a40 <ai_platform_inputs_get+0x1a0>)
 80068d8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80068dc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80068e0:	4b58      	ldr	r3, [pc, #352]	; (8006a44 <ai_platform_inputs_get+0x1a4>)
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d039      	beq.n	800695a <ai_platform_inputs_get+0xba>
 80068e6:	e7fe      	b.n	80068e6 <ai_platform_inputs_get+0x46>
 80068e8:	f7ff ff28 	bl	800673c <_ai_platform_acquire_crc>
 80068ec:	4b52      	ldr	r3, [pc, #328]	; (8006a38 <ai_platform_inputs_get+0x198>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f8:	d010      	beq.n	800691c <ai_platform_inputs_get+0x7c>
 80068fa:	4a50      	ldr	r2, [pc, #320]	; (8006a3c <ai_platform_inputs_get+0x19c>)
 80068fc:	2301      	movs	r3, #1
 80068fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006902:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1fb      	bne.n	8006902 <ai_platform_inputs_get+0x62>
 800690a:	4b4d      	ldr	r3, [pc, #308]	; (8006a40 <ai_platform_inputs_get+0x1a0>)
 800690c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006910:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006914:	4b4b      	ldr	r3, [pc, #300]	; (8006a44 <ai_platform_inputs_get+0x1a4>)
 8006916:	429a      	cmp	r2, r3
 8006918:	d00d      	beq.n	8006936 <ai_platform_inputs_get+0x96>
 800691a:	e7fe      	b.n	800691a <ai_platform_inputs_get+0x7a>
 800691c:	4a4a      	ldr	r2, [pc, #296]	; (8006a48 <ai_platform_inputs_get+0x1a8>)
 800691e:	2301      	movs	r3, #1
 8006920:	6093      	str	r3, [r2, #8]
 8006922:	6893      	ldr	r3, [r2, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1fc      	bne.n	8006922 <ai_platform_inputs_get+0x82>
 8006928:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <ai_platform_inputs_get+0x1a0>)
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	4b45      	ldr	r3, [pc, #276]	; (8006a44 <ai_platform_inputs_get+0x1a4>)
 8006930:	429a      	cmp	r2, r3
 8006932:	d000      	beq.n	8006936 <ai_platform_inputs_get+0x96>
 8006934:	e7fe      	b.n	8006934 <ai_platform_inputs_get+0x94>
 8006936:	f7ff ff03 	bl	8006740 <_ai_platform_release_crc>
 800693a:	2000      	movs	r0, #0
 800693c:	b005      	add	sp, #20
 800693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006942:	4a41      	ldr	r2, [pc, #260]	; (8006a48 <ai_platform_inputs_get+0x1a8>)
 8006944:	2301      	movs	r3, #1
 8006946:	6093      	str	r3, [r2, #8]
 8006948:	6893      	ldr	r3, [r2, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1fc      	bne.n	8006948 <ai_platform_inputs_get+0xa8>
 800694e:	4b3c      	ldr	r3, [pc, #240]	; (8006a40 <ai_platform_inputs_get+0x1a0>)
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	4b3b      	ldr	r3, [pc, #236]	; (8006a44 <ai_platform_inputs_get+0x1a4>)
 8006956:	429a      	cmp	r2, r3
 8006958:	d155      	bne.n	8006a06 <ai_platform_inputs_get+0x166>
 800695a:	f7ff fef1 	bl	8006740 <_ai_platform_release_crc>
 800695e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d051      	beq.n	8006a08 <ai_platform_inputs_get+0x168>
 8006964:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8006968:	f1ba 0f00 	cmp.w	sl, #0
 800696c:	d04c      	beq.n	8006a08 <ai_platform_inputs_get+0x168>
 800696e:	f04f 0b00 	mov.w	fp, #0
 8006972:	465d      	mov	r5, fp
 8006974:	9703      	str	r7, [sp, #12]
 8006976:	e016      	b.n	80069a6 <ai_platform_inputs_get+0x106>
 8006978:	9901      	ldr	r1, [sp, #4]
 800697a:	2301      	movs	r3, #1
 800697c:	507b      	str	r3, [r7, r1]
 800697e:	69b1      	ldr	r1, [r6, #24]
 8006980:	6849      	ldr	r1, [r1, #4]
 8006982:	6121      	str	r1, [r4, #16]
 8006984:	f04f 0301 	mov.w	r3, #1
 8006988:	7523      	strb	r3, [r4, #20]
 800698a:	e9c4 c200 	strd	ip, r2, [r4]
 800698e:	6962      	ldr	r2, [r4, #20]
 8006990:	60a0      	str	r0, [r4, #8]
 8006992:	2300      	movs	r3, #0
 8006994:	f369 221f 	bfi	r2, r9, #8, #24
 8006998:	f8c4 8018 	str.w	r8, [r4, #24]
 800699c:	60e3      	str	r3, [r4, #12]
 800699e:	3501      	adds	r5, #1
 80069a0:	f10b 0b1c 	add.w	fp, fp, #28
 80069a4:	6162      	str	r2, [r4, #20]
 80069a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80069aa:	42ab      	cmp	r3, r5
 80069ac:	b2aa      	uxth	r2, r5
 80069ae:	d93a      	bls.n	8006a26 <ai_platform_inputs_get+0x186>
 80069b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80069b4:	00e9      	lsls	r1, r5, #3
 80069b6:	9101      	str	r1, [sp, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d034      	beq.n	8006a26 <ai_platform_inputs_get+0x186>
 80069bc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	d030      	beq.n	8006a26 <ai_platform_inputs_get+0x186>
 80069c4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80069c8:	69b2      	ldr	r2, [r6, #24]
 80069ca:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80069ce:	6810      	ldr	r0, [r2, #0]
 80069d0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80069d4:	68b3      	ldr	r3, [r6, #8]
 80069d6:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80069da:	f001 fbe3 	bl	80081a4 <ai_array_to_buffer_fmt>
 80069de:	69b1      	ldr	r1, [r6, #24]
 80069e0:	4684      	mov	ip, r0
 80069e2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80069e6:	688a      	ldr	r2, [r1, #8]
 80069e8:	445c      	add	r4, fp
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d0c8      	beq.n	8006980 <ai_platform_inputs_get+0xe0>
 80069ee:	2100      	movs	r1, #0
 80069f0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80069f4:	6831      	ldr	r1, [r6, #0]
 80069f6:	6041      	str	r1, [r0, #4]
 80069f8:	b111      	cbz	r1, 8006a00 <ai_platform_inputs_get+0x160>
 80069fa:	8849      	ldrh	r1, [r1, #2]
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d1bb      	bne.n	8006978 <ai_platform_inputs_get+0xd8>
 8006a00:	69b1      	ldr	r1, [r6, #24]
 8006a02:	2000      	movs	r0, #0
 8006a04:	e7bc      	b.n	8006980 <ai_platform_inputs_get+0xe0>
 8006a06:	e7fe      	b.n	8006a06 <ai_platform_inputs_get+0x166>
 8006a08:	2218      	movs	r2, #24
 8006a0a:	2111      	movs	r1, #17
 8006a0c:	f107 0010 	add.w	r0, r7, #16
 8006a10:	f000 fdc0 	bl	8007594 <core_set_error>
 8006a14:	2200      	movs	r2, #0
 8006a16:	4610      	mov	r0, r2
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d08e      	beq.n	800693c <ai_platform_inputs_get+0x9c>
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	b005      	add	sp, #20
 8006a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a26:	9f03      	ldr	r7, [sp, #12]
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d0ed      	beq.n	8006a08 <ai_platform_inputs_get+0x168>
 8006a2c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006a30:	6858      	ldr	r0, [r3, #4]
 8006a32:	e7f1      	b.n	8006a18 <ai_platform_inputs_get+0x178>
 8006a34:	a1c00100 	.word	0xa1c00100
 8006a38:	e0042000 	.word	0xe0042000
 8006a3c:	58024000 	.word	0x58024000
 8006a40:	f407a5c2 	.word	0xf407a5c2
 8006a44:	b5e8b5cd 	.word	0xb5e8b5cd
 8006a48:	40023000 	.word	0x40023000

08006a4c <ai_platform_outputs_get>:
 8006a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a50:	b085      	sub	sp, #20
 8006a52:	9102      	str	r1, [sp, #8]
 8006a54:	b1f0      	cbz	r0, 8006a94 <ai_platform_outputs_get+0x48>
 8006a56:	4b5f      	ldr	r3, [pc, #380]	; (8006bd4 <ai_platform_outputs_get+0x188>)
 8006a58:	6802      	ldr	r2, [r0, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	d119      	bne.n	8006a94 <ai_platform_outputs_get+0x48>
 8006a60:	f7ff fe6c 	bl	800673c <_ai_platform_acquire_crc>
 8006a64:	4b5c      	ldr	r3, [pc, #368]	; (8006bd8 <ai_platform_outputs_get+0x18c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d03d      	beq.n	8006aee <ai_platform_outputs_get+0xa2>
 8006a72:	4a5a      	ldr	r2, [pc, #360]	; (8006bdc <ai_platform_outputs_get+0x190>)
 8006a74:	2301      	movs	r3, #1
 8006a76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006a7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1fb      	bne.n	8006a7a <ai_platform_outputs_get+0x2e>
 8006a82:	4b57      	ldr	r3, [pc, #348]	; (8006be0 <ai_platform_outputs_get+0x194>)
 8006a84:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006a88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006a8c:	4b55      	ldr	r3, [pc, #340]	; (8006be4 <ai_platform_outputs_get+0x198>)
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d039      	beq.n	8006b06 <ai_platform_outputs_get+0xba>
 8006a92:	e7fe      	b.n	8006a92 <ai_platform_outputs_get+0x46>
 8006a94:	f7ff fe52 	bl	800673c <_ai_platform_acquire_crc>
 8006a98:	4b4f      	ldr	r3, [pc, #316]	; (8006bd8 <ai_platform_outputs_get+0x18c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa4:	d010      	beq.n	8006ac8 <ai_platform_outputs_get+0x7c>
 8006aa6:	4a4d      	ldr	r2, [pc, #308]	; (8006bdc <ai_platform_outputs_get+0x190>)
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006aae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1fb      	bne.n	8006aae <ai_platform_outputs_get+0x62>
 8006ab6:	4b4a      	ldr	r3, [pc, #296]	; (8006be0 <ai_platform_outputs_get+0x194>)
 8006ab8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006abc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ac0:	4b48      	ldr	r3, [pc, #288]	; (8006be4 <ai_platform_outputs_get+0x198>)
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d00d      	beq.n	8006ae2 <ai_platform_outputs_get+0x96>
 8006ac6:	e7fe      	b.n	8006ac6 <ai_platform_outputs_get+0x7a>
 8006ac8:	4a47      	ldr	r2, [pc, #284]	; (8006be8 <ai_platform_outputs_get+0x19c>)
 8006aca:	2301      	movs	r3, #1
 8006acc:	6093      	str	r3, [r2, #8]
 8006ace:	6893      	ldr	r3, [r2, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1fc      	bne.n	8006ace <ai_platform_outputs_get+0x82>
 8006ad4:	4b42      	ldr	r3, [pc, #264]	; (8006be0 <ai_platform_outputs_get+0x194>)
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <ai_platform_outputs_get+0x198>)
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d000      	beq.n	8006ae2 <ai_platform_outputs_get+0x96>
 8006ae0:	e7fe      	b.n	8006ae0 <ai_platform_outputs_get+0x94>
 8006ae2:	f7ff fe2d 	bl	8006740 <_ai_platform_release_crc>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	b005      	add	sp, #20
 8006aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aee:	4a3e      	ldr	r2, [pc, #248]	; (8006be8 <ai_platform_outputs_get+0x19c>)
 8006af0:	2301      	movs	r3, #1
 8006af2:	6093      	str	r3, [r2, #8]
 8006af4:	6893      	ldr	r3, [r2, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1fc      	bne.n	8006af4 <ai_platform_outputs_get+0xa8>
 8006afa:	4b39      	ldr	r3, [pc, #228]	; (8006be0 <ai_platform_outputs_get+0x194>)
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	4b38      	ldr	r3, [pc, #224]	; (8006be4 <ai_platform_outputs_get+0x198>)
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d150      	bne.n	8006ba8 <ai_platform_outputs_get+0x15c>
 8006b06:	f7ff fe1b 	bl	8006740 <_ai_platform_release_crc>
 8006b0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d958      	bls.n	8006bc2 <ai_platform_outputs_get+0x176>
 8006b10:	f04f 0b00 	mov.w	fp, #0
 8006b14:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8006b18:	9703      	str	r7, [sp, #12]
 8006b1a:	465d      	mov	r5, fp
 8006b1c:	e016      	b.n	8006b4c <ai_platform_outputs_get+0x100>
 8006b1e:	9901      	ldr	r1, [sp, #4]
 8006b20:	2301      	movs	r3, #1
 8006b22:	507b      	str	r3, [r7, r1]
 8006b24:	69b1      	ldr	r1, [r6, #24]
 8006b26:	6849      	ldr	r1, [r1, #4]
 8006b28:	6121      	str	r1, [r4, #16]
 8006b2a:	f04f 0301 	mov.w	r3, #1
 8006b2e:	7523      	strb	r3, [r4, #20]
 8006b30:	e9c4 c200 	strd	ip, r2, [r4]
 8006b34:	6962      	ldr	r2, [r4, #20]
 8006b36:	60a0      	str	r0, [r4, #8]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f369 221f 	bfi	r2, r9, #8, #24
 8006b3e:	f8c4 8018 	str.w	r8, [r4, #24]
 8006b42:	60e3      	str	r3, [r4, #12]
 8006b44:	3501      	adds	r5, #1
 8006b46:	f10b 0b1c 	add.w	fp, fp, #28
 8006b4a:	6162      	str	r2, [r4, #20]
 8006b4c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	b2aa      	uxth	r2, r5
 8006b54:	d929      	bls.n	8006baa <ai_platform_outputs_get+0x15e>
 8006b56:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006b5a:	00e9      	lsls	r1, r5, #3
 8006b5c:	9101      	str	r1, [sp, #4]
 8006b5e:	b323      	cbz	r3, 8006baa <ai_platform_outputs_get+0x15e>
 8006b60:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006b64:	b30e      	cbz	r6, 8006baa <ai_platform_outputs_get+0x15e>
 8006b66:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006b6a:	69b2      	ldr	r2, [r6, #24]
 8006b6c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8006b70:	6810      	ldr	r0, [r2, #0]
 8006b72:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006b76:	68b3      	ldr	r3, [r6, #8]
 8006b78:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8006b7c:	f001 fb12 	bl	80081a4 <ai_array_to_buffer_fmt>
 8006b80:	69b1      	ldr	r1, [r6, #24]
 8006b82:	4684      	mov	ip, r0
 8006b84:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8006b88:	688a      	ldr	r2, [r1, #8]
 8006b8a:	445c      	add	r4, fp
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d0ca      	beq.n	8006b26 <ai_platform_outputs_get+0xda>
 8006b90:	2100      	movs	r1, #0
 8006b92:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006b96:	6831      	ldr	r1, [r6, #0]
 8006b98:	6041      	str	r1, [r0, #4]
 8006b9a:	b111      	cbz	r1, 8006ba2 <ai_platform_outputs_get+0x156>
 8006b9c:	8849      	ldrh	r1, [r1, #2]
 8006b9e:	2900      	cmp	r1, #0
 8006ba0:	d1bd      	bne.n	8006b1e <ai_platform_outputs_get+0xd2>
 8006ba2:	69b1      	ldr	r1, [r6, #24]
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e7be      	b.n	8006b26 <ai_platform_outputs_get+0xda>
 8006ba8:	e7fe      	b.n	8006ba8 <ai_platform_outputs_get+0x15c>
 8006baa:	9f03      	ldr	r7, [sp, #12]
 8006bac:	b14a      	cbz	r2, 8006bc2 <ai_platform_outputs_get+0x176>
 8006bae:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006bb2:	6858      	ldr	r0, [r3, #4]
 8006bb4:	9b02      	ldr	r3, [sp, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d096      	beq.n	8006ae8 <ai_platform_outputs_get+0x9c>
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	b005      	add	sp, #20
 8006bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc2:	2218      	movs	r2, #24
 8006bc4:	2111      	movs	r1, #17
 8006bc6:	f107 0010 	add.w	r0, r7, #16
 8006bca:	f000 fce3 	bl	8007594 <core_set_error>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	e7ef      	b.n	8006bb4 <ai_platform_outputs_get+0x168>
 8006bd4:	a1c00100 	.word	0xa1c00100
 8006bd8:	e0042000 	.word	0xe0042000
 8006bdc:	58024000 	.word	0x58024000
 8006be0:	f407a5c2 	.word	0xf407a5c2
 8006be4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006be8:	40023000 	.word	0x40023000

08006bec <ai_platform_network_create>:
 8006bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8006bf8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8006bfc:	4615      	mov	r5, r2
 8006bfe:	461f      	mov	r7, r3
 8006c00:	f7ff fd9c 	bl	800673c <_ai_platform_acquire_crc>
 8006c04:	b188      	cbz	r0, 8006c2a <ai_platform_network_create+0x3e>
 8006c06:	4a5d      	ldr	r2, [pc, #372]	; (8006d7c <ai_platform_network_create+0x190>)
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006c0e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006c12:	4603      	mov	r3, r0
 8006c14:	d00e      	beq.n	8006c34 <ai_platform_network_create+0x48>
 8006c16:	4a5a      	ldr	r2, [pc, #360]	; (8006d80 <ai_platform_network_create+0x194>)
 8006c18:	2118      	movs	r1, #24
 8006c1a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8006c1e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006c22:	2918      	cmp	r1, #24
 8006c24:	d018      	beq.n	8006c58 <ai_platform_network_create+0x6c>
 8006c26:	f7ff fd8b 	bl	8006740 <_ai_platform_release_crc>
 8006c2a:	f244 1033 	movw	r0, #16691	; 0x4133
 8006c2e:	b003      	add	sp, #12
 8006c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c34:	4a53      	ldr	r2, [pc, #332]	; (8006d84 <ai_platform_network_create+0x198>)
 8006c36:	2101      	movs	r1, #1
 8006c38:	6091      	str	r1, [r2, #8]
 8006c3a:	2114      	movs	r1, #20
 8006c3c:	e001      	b.n	8006c42 <ai_platform_network_create+0x56>
 8006c3e:	3901      	subs	r1, #1
 8006c40:	d002      	beq.n	8006c48 <ai_platform_network_create+0x5c>
 8006c42:	6894      	ldr	r4, [r2, #8]
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	d1fa      	bne.n	8006c3e <ai_platform_network_create+0x52>
 8006c48:	4a4e      	ldr	r2, [pc, #312]	; (8006d84 <ai_platform_network_create+0x198>)
 8006c4a:	6891      	ldr	r1, [r2, #8]
 8006c4c:	b911      	cbnz	r1, 8006c54 <ai_platform_network_create+0x68>
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	3201      	adds	r2, #1
 8006c52:	d008      	beq.n	8006c66 <ai_platform_network_create+0x7a>
 8006c54:	4618      	mov	r0, r3
 8006c56:	e7e6      	b.n	8006c26 <ai_platform_network_create+0x3a>
 8006c58:	2101      	movs	r1, #1
 8006c5a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8006c5e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006c62:	2900      	cmp	r1, #0
 8006c64:	d1fb      	bne.n	8006c5e <ai_platform_network_create+0x72>
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff fd6a 	bl	8006740 <_ai_platform_release_crc>
 8006c6c:	f7ff fd66 	bl	800673c <_ai_platform_acquire_crc>
 8006c70:	4b42      	ldr	r3, [pc, #264]	; (8006d7c <ai_platform_network_create+0x190>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7c:	d010      	beq.n	8006ca0 <ai_platform_network_create+0xb4>
 8006c7e:	4b40      	ldr	r3, [pc, #256]	; (8006d80 <ai_platform_network_create+0x194>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006c86:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8006c8a:	2900      	cmp	r1, #0
 8006c8c:	d1fb      	bne.n	8006c86 <ai_platform_network_create+0x9a>
 8006c8e:	4a3e      	ldr	r2, [pc, #248]	; (8006d88 <ai_platform_network_create+0x19c>)
 8006c90:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006c94:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006c98:	4b3c      	ldr	r3, [pc, #240]	; (8006d8c <ai_platform_network_create+0x1a0>)
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d00c      	beq.n	8006cb8 <ai_platform_network_create+0xcc>
 8006c9e:	e7fe      	b.n	8006c9e <ai_platform_network_create+0xb2>
 8006ca0:	4a38      	ldr	r2, [pc, #224]	; (8006d84 <ai_platform_network_create+0x198>)
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	6093      	str	r3, [r2, #8]
 8006ca6:	6893      	ldr	r3, [r2, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1fc      	bne.n	8006ca6 <ai_platform_network_create+0xba>
 8006cac:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <ai_platform_network_create+0x19c>)
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <ai_platform_network_create+0x1a0>)
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d122      	bne.n	8006cfe <ai_platform_network_create+0x112>
 8006cb8:	f7ff fd42 	bl	8006740 <_ai_platform_release_crc>
 8006cbc:	b38e      	cbz	r6, 8006d22 <ai_platform_network_create+0x136>
 8006cbe:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <ai_platform_network_create+0x1a4>)
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	6035      	str	r5, [r6, #0]
 8006cc4:	f000 fc64 	bl	8007590 <core_init>
 8006cc8:	b1d0      	cbz	r0, 8006d00 <ai_platform_network_create+0x114>
 8006cca:	f7ff fd37 	bl	800673c <_ai_platform_acquire_crc>
 8006cce:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <ai_platform_network_create+0x190>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cda:	d025      	beq.n	8006d28 <ai_platform_network_create+0x13c>
 8006cdc:	4a28      	ldr	r2, [pc, #160]	; (8006d80 <ai_platform_network_create+0x194>)
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006ce4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1fb      	bne.n	8006ce4 <ai_platform_network_create+0xf8>
 8006cec:	4b26      	ldr	r3, [pc, #152]	; (8006d88 <ai_platform_network_create+0x19c>)
 8006cee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006cf2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006cf6:	4b25      	ldr	r3, [pc, #148]	; (8006d8c <ai_platform_network_create+0x1a0>)
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d022      	beq.n	8006d42 <ai_platform_network_create+0x156>
 8006cfc:	e7fe      	b.n	8006cfc <ai_platform_network_create+0x110>
 8006cfe:	e7fe      	b.n	8006cfe <ai_platform_network_create+0x112>
 8006d00:	2430      	movs	r4, #48	; 0x30
 8006d02:	2300      	movs	r3, #0
 8006d04:	6033      	str	r3, [r6, #0]
 8006d06:	2610      	movs	r6, #16
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4641      	mov	r1, r8
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f001 fa2b 	bl	8008168 <ai_version_get>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2000      	movs	r0, #0
 8006d16:	f364 0007 	bfi	r0, r4, #0, #8
 8006d1a:	64ab      	str	r3, [r5, #72]	; 0x48
 8006d1c:	f366 201f 	bfi	r0, r6, #8, #24
 8006d20:	e785      	b.n	8006c2e <ai_platform_network_create+0x42>
 8006d22:	f241 0010 	movw	r0, #4112	; 0x1010
 8006d26:	e782      	b.n	8006c2e <ai_platform_network_create+0x42>
 8006d28:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <ai_platform_network_create+0x198>)
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	6093      	str	r3, [r2, #8]
 8006d2e:	6893      	ldr	r3, [r2, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1fc      	bne.n	8006d2e <ai_platform_network_create+0x142>
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <ai_platform_network_create+0x19c>)
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	6812      	ldr	r2, [r2, #0]
 8006d3a:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <ai_platform_network_create+0x1a0>)
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d000      	beq.n	8006d42 <ai_platform_network_create+0x156>
 8006d40:	e7fe      	b.n	8006d40 <ai_platform_network_create+0x154>
 8006d42:	f7ff fcfd 	bl	8006740 <_ai_platform_release_crc>
 8006d46:	2200      	movs	r2, #0
 8006d48:	4641      	mov	r1, r8
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	f001 fa0c 	bl	8008168 <ai_version_get>
 8006d50:	2200      	movs	r2, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	2105      	movs	r1, #5
 8006d56:	2001      	movs	r0, #1
 8006d58:	f001 fa06 	bl	8008168 <ai_version_get>
 8006d5c:	4284      	cmp	r4, r0
 8006d5e:	d001      	beq.n	8006d64 <ai_platform_network_create+0x178>
 8006d60:	2401      	movs	r4, #1
 8006d62:	e7ce      	b.n	8006d02 <ai_platform_network_create+0x116>
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <ai_platform_network_create+0x1a8>)
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	a801      	add	r0, sp, #4
 8006d6a:	f001 f843 	bl	8007df4 <ai_check_custom_types>
 8006d6e:	b110      	cbz	r0, 8006d76 <ai_platform_network_create+0x18a>
 8006d70:	2600      	movs	r6, #0
 8006d72:	4634      	mov	r4, r6
 8006d74:	e7c8      	b.n	8006d08 <ai_platform_network_create+0x11c>
 8006d76:	2402      	movs	r4, #2
 8006d78:	e7c3      	b.n	8006d02 <ai_platform_network_create+0x116>
 8006d7a:	bf00      	nop
 8006d7c:	e0042000 	.word	0xe0042000
 8006d80:	58024000 	.word	0x58024000
 8006d84:	40023000 	.word	0x40023000
 8006d88:	f407a5c2 	.word	0xf407a5c2
 8006d8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d90:	a1c00100 	.word	0xa1c00100
 8006d94:	84048403 	.word	0x84048403

08006d98 <ai_platform_network_init>:
 8006d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d9c:	b1f8      	cbz	r0, 8006dde <ai_platform_network_init+0x46>
 8006d9e:	4b6e      	ldr	r3, [pc, #440]	; (8006f58 <ai_platform_network_init+0x1c0>)
 8006da0:	6802      	ldr	r2, [r0, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	4604      	mov	r4, r0
 8006da6:	d11a      	bne.n	8006dde <ai_platform_network_init+0x46>
 8006da8:	460e      	mov	r6, r1
 8006daa:	f7ff fcc7 	bl	800673c <_ai_platform_acquire_crc>
 8006dae:	4b6b      	ldr	r3, [pc, #428]	; (8006f5c <ai_platform_network_init+0x1c4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dba:	d03d      	beq.n	8006e38 <ai_platform_network_init+0xa0>
 8006dbc:	4a68      	ldr	r2, [pc, #416]	; (8006f60 <ai_platform_network_init+0x1c8>)
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006dc4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1fb      	bne.n	8006dc4 <ai_platform_network_init+0x2c>
 8006dcc:	4b65      	ldr	r3, [pc, #404]	; (8006f64 <ai_platform_network_init+0x1cc>)
 8006dce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006dd2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006dd6:	4b64      	ldr	r3, [pc, #400]	; (8006f68 <ai_platform_network_init+0x1d0>)
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d039      	beq.n	8006e50 <ai_platform_network_init+0xb8>
 8006ddc:	e7fe      	b.n	8006ddc <ai_platform_network_init+0x44>
 8006dde:	f7ff fcad 	bl	800673c <_ai_platform_acquire_crc>
 8006de2:	4b5e      	ldr	r3, [pc, #376]	; (8006f5c <ai_platform_network_init+0x1c4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dee:	d010      	beq.n	8006e12 <ai_platform_network_init+0x7a>
 8006df0:	4a5b      	ldr	r2, [pc, #364]	; (8006f60 <ai_platform_network_init+0x1c8>)
 8006df2:	2301      	movs	r3, #1
 8006df4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006df8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1fb      	bne.n	8006df8 <ai_platform_network_init+0x60>
 8006e00:	4b58      	ldr	r3, [pc, #352]	; (8006f64 <ai_platform_network_init+0x1cc>)
 8006e02:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e0a:	4b57      	ldr	r3, [pc, #348]	; (8006f68 <ai_platform_network_init+0x1d0>)
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d00d      	beq.n	8006e2c <ai_platform_network_init+0x94>
 8006e10:	e7fe      	b.n	8006e10 <ai_platform_network_init+0x78>
 8006e12:	4a56      	ldr	r2, [pc, #344]	; (8006f6c <ai_platform_network_init+0x1d4>)
 8006e14:	2301      	movs	r3, #1
 8006e16:	6093      	str	r3, [r2, #8]
 8006e18:	6893      	ldr	r3, [r2, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1fc      	bne.n	8006e18 <ai_platform_network_init+0x80>
 8006e1e:	4b51      	ldr	r3, [pc, #324]	; (8006f64 <ai_platform_network_init+0x1cc>)
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	6812      	ldr	r2, [r2, #0]
 8006e24:	4b50      	ldr	r3, [pc, #320]	; (8006f68 <ai_platform_network_init+0x1d0>)
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d000      	beq.n	8006e2c <ai_platform_network_init+0x94>
 8006e2a:	e7fe      	b.n	8006e2a <ai_platform_network_init+0x92>
 8006e2c:	f7ff fc88 	bl	8006740 <_ai_platform_release_crc>
 8006e30:	2600      	movs	r6, #0
 8006e32:	4630      	mov	r0, r6
 8006e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e38:	4a4c      	ldr	r2, [pc, #304]	; (8006f6c <ai_platform_network_init+0x1d4>)
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	6093      	str	r3, [r2, #8]
 8006e3e:	6893      	ldr	r3, [r2, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1fc      	bne.n	8006e3e <ai_platform_network_init+0xa6>
 8006e44:	4b47      	ldr	r3, [pc, #284]	; (8006f64 <ai_platform_network_init+0x1cc>)
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <ai_platform_network_init+0x1d0>)
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d11c      	bne.n	8006e8a <ai_platform_network_init+0xf2>
 8006e50:	f7ff fc76 	bl	8006740 <_ai_platform_release_crc>
 8006e54:	2e00      	cmp	r6, #0
 8006e56:	d06f      	beq.n	8006f38 <ai_platform_network_init+0x1a0>
 8006e58:	4b45      	ldr	r3, [pc, #276]	; (8006f70 <ai_platform_network_init+0x1d8>)
 8006e5a:	6832      	ldr	r2, [r6, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d115      	bne.n	8006e8c <ai_platform_network_init+0xf4>
 8006e60:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8006e64:	6933      	ldr	r3, [r6, #16]
 8006e66:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8006e6a:	89f7      	ldrh	r7, [r6, #14]
 8006e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e6e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8006e72:	2303      	movs	r3, #3
 8006e74:	84e7      	strh	r7, [r4, #38]	; 0x26
 8006e76:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8006e7a:	60e3      	str	r3, [r4, #12]
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4626      	mov	r6, r4
 8006e80:	f000 ffe2 	bl	8007e48 <ai_layers_init_all>
 8006e84:	4630      	mov	r0, r6
 8006e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8a:	e7fe      	b.n	8006e8a <ai_platform_network_init+0xf2>
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	4630      	mov	r0, r6
 8006e90:	4635      	mov	r5, r6
 8006e92:	6876      	ldr	r6, [r6, #4]
 8006e94:	f7ff fc14 	bl	80066c0 <ai_buffer_get_size>
 8006e98:	f105 081c 	add.w	r8, r5, #28
 8006e9c:	4681      	mov	r9, r0
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	6a2f      	ldr	r7, [r5, #32]
 8006ea4:	f7ff fc0c 	bl	80066c0 <ai_buffer_get_size>
 8006ea8:	f1b9 0f00 	cmp.w	r9, #0
 8006eac:	d025      	beq.n	8006efa <ai_platform_network_init+0x162>
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4696      	mov	lr, r2
 8006eb2:	bb30      	cbnz	r0, 8006f02 <ai_platform_network_init+0x16a>
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	b376      	cbz	r6, 8006f18 <ai_platform_network_init+0x180>
 8006eba:	8be3      	ldrh	r3, [r4, #30]
 8006ebc:	4573      	cmp	r3, lr
 8006ebe:	d323      	bcc.n	8006f08 <ai_platform_network_init+0x170>
 8006ec0:	b142      	cbz	r2, 8006ed4 <ai_platform_network_init+0x13c>
 8006ec2:	46ac      	mov	ip, r5
 8006ec4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006ec8:	6a25      	ldr	r5, [r4, #32]
 8006eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ecc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006ed0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006ed4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006ed6:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8006eda:	2600      	movs	r6, #0
 8006edc:	42bb      	cmp	r3, r7
 8006ede:	83a6      	strh	r6, [r4, #28]
 8006ee0:	d323      	bcc.n	8006f2a <ai_platform_network_init+0x192>
 8006ee2:	b37f      	cbz	r7, 8006f44 <ai_platform_network_init+0x1ac>
 8006ee4:	46c4      	mov	ip, r8
 8006ee6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006eea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eee:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006ef2:	46b6      	mov	lr, r6
 8006ef4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006ef8:	e7bb      	b.n	8006e72 <ai_platform_network_init+0xda>
 8006efa:	464a      	mov	r2, r9
 8006efc:	46ce      	mov	lr, r9
 8006efe:	464d      	mov	r5, r9
 8006f00:	e7d7      	b.n	8006eb2 <ai_platform_network_init+0x11a>
 8006f02:	b30f      	cbz	r7, 8006f48 <ai_platform_network_init+0x1b0>
 8006f04:	2701      	movs	r7, #1
 8006f06:	e7d7      	b.n	8006eb8 <ai_platform_network_init+0x120>
 8006f08:	2212      	movs	r2, #18
 8006f0a:	2116      	movs	r1, #22
 8006f0c:	f104 0010 	add.w	r0, r4, #16
 8006f10:	f000 fb40 	bl	8007594 <core_set_error>
 8006f14:	2600      	movs	r6, #0
 8006f16:	e78c      	b.n	8006e32 <ai_platform_network_init+0x9a>
 8006f18:	f1b9 0f00 	cmp.w	r9, #0
 8006f1c:	d0cd      	beq.n	8006eba <ai_platform_network_init+0x122>
 8006f1e:	2110      	movs	r1, #16
 8006f20:	2212      	movs	r2, #18
 8006f22:	1860      	adds	r0, r4, r1
 8006f24:	f000 fb36 	bl	8007594 <core_set_error>
 8006f28:	e783      	b.n	8006e32 <ai_platform_network_init+0x9a>
 8006f2a:	2213      	movs	r2, #19
 8006f2c:	2116      	movs	r1, #22
 8006f2e:	f104 0010 	add.w	r0, r4, #16
 8006f32:	f000 fb2f 	bl	8007594 <core_set_error>
 8006f36:	e77c      	b.n	8006e32 <ai_platform_network_init+0x9a>
 8006f38:	2110      	movs	r1, #16
 8006f3a:	2211      	movs	r2, #17
 8006f3c:	1860      	adds	r0, r4, r1
 8006f3e:	f000 fb29 	bl	8007594 <core_set_error>
 8006f42:	e776      	b.n	8006e32 <ai_platform_network_init+0x9a>
 8006f44:	46be      	mov	lr, r7
 8006f46:	e794      	b.n	8006e72 <ai_platform_network_init+0xda>
 8006f48:	2110      	movs	r1, #16
 8006f4a:	2213      	movs	r2, #19
 8006f4c:	1860      	adds	r0, r4, r1
 8006f4e:	f000 fb21 	bl	8007594 <core_set_error>
 8006f52:	463e      	mov	r6, r7
 8006f54:	e76d      	b.n	8006e32 <ai_platform_network_init+0x9a>
 8006f56:	bf00      	nop
 8006f58:	a1c00100 	.word	0xa1c00100
 8006f5c:	e0042000 	.word	0xe0042000
 8006f60:	58024000 	.word	0x58024000
 8006f64:	f407a5c2 	.word	0xf407a5c2
 8006f68:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f6c:	40023000 	.word	0x40023000
 8006f70:	a1facade 	.word	0xa1facade

08006f74 <ai_platform_network_post_init>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	b1f0      	cbz	r0, 8006fb6 <ai_platform_network_post_init+0x42>
 8006f78:	4b3c      	ldr	r3, [pc, #240]	; (800706c <ai_platform_network_post_init+0xf8>)
 8006f7a:	6802      	ldr	r2, [r0, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	4604      	mov	r4, r0
 8006f80:	d119      	bne.n	8006fb6 <ai_platform_network_post_init+0x42>
 8006f82:	f7ff fbdb 	bl	800673c <_ai_platform_acquire_crc>
 8006f86:	4b3a      	ldr	r3, [pc, #232]	; (8007070 <ai_platform_network_post_init+0xfc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f92:	d03b      	beq.n	800700c <ai_platform_network_post_init+0x98>
 8006f94:	4a37      	ldr	r2, [pc, #220]	; (8007074 <ai_platform_network_post_init+0x100>)
 8006f96:	2301      	movs	r3, #1
 8006f98:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006f9c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1fb      	bne.n	8006f9c <ai_platform_network_post_init+0x28>
 8006fa4:	4b34      	ldr	r3, [pc, #208]	; (8007078 <ai_platform_network_post_init+0x104>)
 8006fa6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006faa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006fae:	4b33      	ldr	r3, [pc, #204]	; (800707c <ai_platform_network_post_init+0x108>)
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d037      	beq.n	8007024 <ai_platform_network_post_init+0xb0>
 8006fb4:	e7fe      	b.n	8006fb4 <ai_platform_network_post_init+0x40>
 8006fb6:	f7ff fbc1 	bl	800673c <_ai_platform_acquire_crc>
 8006fba:	4b2d      	ldr	r3, [pc, #180]	; (8007070 <ai_platform_network_post_init+0xfc>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc6:	d010      	beq.n	8006fea <ai_platform_network_post_init+0x76>
 8006fc8:	4a2a      	ldr	r2, [pc, #168]	; (8007074 <ai_platform_network_post_init+0x100>)
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006fd0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1fb      	bne.n	8006fd0 <ai_platform_network_post_init+0x5c>
 8006fd8:	4b27      	ldr	r3, [pc, #156]	; (8007078 <ai_platform_network_post_init+0x104>)
 8006fda:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006fde:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006fe2:	4b26      	ldr	r3, [pc, #152]	; (800707c <ai_platform_network_post_init+0x108>)
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d00d      	beq.n	8007004 <ai_platform_network_post_init+0x90>
 8006fe8:	e7fe      	b.n	8006fe8 <ai_platform_network_post_init+0x74>
 8006fea:	4a25      	ldr	r2, [pc, #148]	; (8007080 <ai_platform_network_post_init+0x10c>)
 8006fec:	2301      	movs	r3, #1
 8006fee:	6093      	str	r3, [r2, #8]
 8006ff0:	6893      	ldr	r3, [r2, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1fc      	bne.n	8006ff0 <ai_platform_network_post_init+0x7c>
 8006ff6:	4b20      	ldr	r3, [pc, #128]	; (8007078 <ai_platform_network_post_init+0x104>)
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	6812      	ldr	r2, [r2, #0]
 8006ffc:	4b1f      	ldr	r3, [pc, #124]	; (800707c <ai_platform_network_post_init+0x108>)
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d000      	beq.n	8007004 <ai_platform_network_post_init+0x90>
 8007002:	e7fe      	b.n	8007002 <ai_platform_network_post_init+0x8e>
 8007004:	f7ff fb9c 	bl	8006740 <_ai_platform_release_crc>
 8007008:	2000      	movs	r0, #0
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	4a1c      	ldr	r2, [pc, #112]	; (8007080 <ai_platform_network_post_init+0x10c>)
 800700e:	2301      	movs	r3, #1
 8007010:	6093      	str	r3, [r2, #8]
 8007012:	6893      	ldr	r3, [r2, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1fc      	bne.n	8007012 <ai_platform_network_post_init+0x9e>
 8007018:	4b17      	ldr	r3, [pc, #92]	; (8007078 <ai_platform_network_post_init+0x104>)
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	4b17      	ldr	r3, [pc, #92]	; (800707c <ai_platform_network_post_init+0x108>)
 8007020:	429a      	cmp	r2, r3
 8007022:	d11a      	bne.n	800705a <ai_platform_network_post_init+0xe6>
 8007024:	f7ff fb8c 	bl	8006740 <_ai_platform_release_crc>
 8007028:	68e3      	ldr	r3, [r4, #12]
 800702a:	f013 0502 	ands.w	r5, r3, #2
 800702e:	d015      	beq.n	800705c <ai_platform_network_post_init+0xe8>
 8007030:	4620      	mov	r0, r4
 8007032:	f000 ff17 	bl	8007e64 <ai_layers_post_init_all>
 8007036:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007038:	b16b      	cbz	r3, 8007056 <ai_platform_network_post_init+0xe2>
 800703a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800703c:	e007      	b.n	800704e <ai_platform_network_post_init+0xda>
 800703e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007042:	4798      	blx	r3
 8007044:	692b      	ldr	r3, [r5, #16]
 8007046:	42ab      	cmp	r3, r5
 8007048:	d005      	beq.n	8007056 <ai_platform_network_post_init+0xe2>
 800704a:	b123      	cbz	r3, 8007056 <ai_platform_network_post_init+0xe2>
 800704c:	461d      	mov	r5, r3
 800704e:	4629      	mov	r1, r5
 8007050:	2000      	movs	r0, #0
 8007052:	2d00      	cmp	r5, #0
 8007054:	d1f3      	bne.n	800703e <ai_platform_network_post_init+0xca>
 8007056:	2001      	movs	r0, #1
 8007058:	bd38      	pop	{r3, r4, r5, pc}
 800705a:	e7fe      	b.n	800705a <ai_platform_network_post_init+0xe6>
 800705c:	2210      	movs	r2, #16
 800705e:	2111      	movs	r1, #17
 8007060:	18a0      	adds	r0, r4, r2
 8007062:	f000 fa97 	bl	8007594 <core_set_error>
 8007066:	4628      	mov	r0, r5
 8007068:	bd38      	pop	{r3, r4, r5, pc}
 800706a:	bf00      	nop
 800706c:	a1c00100 	.word	0xa1c00100
 8007070:	e0042000 	.word	0xe0042000
 8007074:	58024000 	.word	0x58024000
 8007078:	f407a5c2 	.word	0xf407a5c2
 800707c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007080:	40023000 	.word	0x40023000

08007084 <ai_platform_network_process>:
 8007084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	460e      	mov	r6, r1
 800708a:	b085      	sub	sp, #20
 800708c:	4693      	mov	fp, r2
 800708e:	4605      	mov	r5, r0
 8007090:	b120      	cbz	r0, 800709c <ai_platform_network_process+0x18>
 8007092:	4bb8      	ldr	r3, [pc, #736]	; (8007374 <ai_platform_network_process+0x2f0>)
 8007094:	6802      	ldr	r2, [r0, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	bf18      	it	ne
 800709a:	2500      	movne	r5, #0
 800709c:	f7ff fb4e 	bl	800673c <_ai_platform_acquire_crc>
 80070a0:	4bb5      	ldr	r3, [pc, #724]	; (8007378 <ai_platform_network_process+0x2f4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ac:	d010      	beq.n	80070d0 <ai_platform_network_process+0x4c>
 80070ae:	4ab3      	ldr	r2, [pc, #716]	; (800737c <ai_platform_network_process+0x2f8>)
 80070b0:	2301      	movs	r3, #1
 80070b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80070b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1fb      	bne.n	80070b6 <ai_platform_network_process+0x32>
 80070be:	4bb0      	ldr	r3, [pc, #704]	; (8007380 <ai_platform_network_process+0x2fc>)
 80070c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80070c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80070c8:	4bae      	ldr	r3, [pc, #696]	; (8007384 <ai_platform_network_process+0x300>)
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d00d      	beq.n	80070ea <ai_platform_network_process+0x66>
 80070ce:	e7fe      	b.n	80070ce <ai_platform_network_process+0x4a>
 80070d0:	4aad      	ldr	r2, [pc, #692]	; (8007388 <ai_platform_network_process+0x304>)
 80070d2:	2301      	movs	r3, #1
 80070d4:	6093      	str	r3, [r2, #8]
 80070d6:	6893      	ldr	r3, [r2, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1fc      	bne.n	80070d6 <ai_platform_network_process+0x52>
 80070dc:	4ba8      	ldr	r3, [pc, #672]	; (8007380 <ai_platform_network_process+0x2fc>)
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	4ba8      	ldr	r3, [pc, #672]	; (8007384 <ai_platform_network_process+0x300>)
 80070e4:	429a      	cmp	r2, r3
 80070e6:	f040 812c 	bne.w	8007342 <ai_platform_network_process+0x2be>
 80070ea:	f7ff fb29 	bl	8006740 <_ai_platform_release_crc>
 80070ee:	2d00      	cmp	r5, #0
 80070f0:	f000 8154 	beq.w	800739c <ai_platform_network_process+0x318>
 80070f4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8124 	beq.w	8007344 <ai_platform_network_process+0x2c0>
 80070fc:	68eb      	ldr	r3, [r5, #12]
 80070fe:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2700      	movs	r7, #0
 8007108:	2b03      	cmp	r3, #3
 800710a:	616f      	str	r7, [r5, #20]
 800710c:	f040 813e 	bne.w	800738c <ai_platform_network_process+0x308>
 8007110:	2e00      	cmp	r6, #0
 8007112:	f000 811d 	beq.w	8007350 <ai_platform_network_process+0x2cc>
 8007116:	f1ba 0f00 	cmp.w	sl, #0
 800711a:	f000 8119 	beq.w	8007350 <ai_platform_network_process+0x2cc>
 800711e:	f8ba 3000 	ldrh.w	r3, [sl]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8114 	beq.w	8007350 <ai_platform_network_process+0x2cc>
 8007128:	69b3      	ldr	r3, [r6, #24]
 800712a:	f8cd b00c 	str.w	fp, [sp, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007134:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d072      	beq.n	8007222 <ai_platform_network_process+0x19e>
 800713c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007140:	2c00      	cmp	r4, #0
 8007142:	d06e      	beq.n	8007222 <ai_platform_network_process+0x19e>
 8007144:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007148:	f8d3 9000 	ldr.w	r9, [r3]
 800714c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007150:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007154:	f000 81e0 	beq.w	8007518 <ai_platform_network_process+0x494>
 8007158:	69a3      	ldr	r3, [r4, #24]
 800715a:	2101      	movs	r1, #1
 800715c:	4630      	mov	r0, r6
 800715e:	685d      	ldr	r5, [r3, #4]
 8007160:	f7ff faae 	bl	80066c0 <ai_buffer_get_size>
 8007164:	4285      	cmp	r5, r0
 8007166:	f0c0 811b 	bcc.w	80073a0 <ai_platform_network_process+0x31c>
 800716a:	68e0      	ldr	r0, [r4, #12]
 800716c:	69b1      	ldr	r1, [r6, #24]
 800716e:	68c2      	ldr	r2, [r0, #12]
 8007170:	68cb      	ldr	r3, [r1, #12]
 8007172:	429a      	cmp	r2, r3
 8007174:	f040 8114 	bne.w	80073a0 <ai_platform_network_process+0x31c>
 8007178:	6882      	ldr	r2, [r0, #8]
 800717a:	688b      	ldr	r3, [r1, #8]
 800717c:	429a      	cmp	r2, r3
 800717e:	f040 810f 	bne.w	80073a0 <ai_platform_network_process+0x31c>
 8007182:	6842      	ldr	r2, [r0, #4]
 8007184:	684b      	ldr	r3, [r1, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	f040 810a 	bne.w	80073a0 <ai_platform_network_process+0x31c>
 800718c:	69a3      	ldr	r3, [r4, #24]
 800718e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007192:	f001 f89b 	bl	80082cc <ai_array_get_data_byte_size>
 8007196:	4605      	mov	r5, r0
 8007198:	4620      	mov	r0, r4
 800719a:	f000 ffeb 	bl	8008174 <get_tensor_byte_size>
 800719e:	4285      	cmp	r5, r0
 80071a0:	f0c0 80fe 	bcc.w	80073a0 <ai_platform_network_process+0x31c>
 80071a4:	69a3      	ldr	r3, [r4, #24]
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	f000 fffc 	bl	80081a4 <ai_array_to_buffer_fmt>
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	4058      	eors	r0, r3
 80071b0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80071b4:	f040 81bb 	bne.w	800752e <ai_platform_network_process+0x4aa>
 80071b8:	6873      	ldr	r3, [r6, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 81ae 	beq.w	800751c <ai_platform_network_process+0x498>
 80071c0:	69b3      	ldr	r3, [r6, #24]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 819e 	beq.w	8007506 <ai_platform_network_process+0x482>
 80071ca:	9a01      	ldr	r2, [sp, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	bf38      	it	cc
 80071d0:	461a      	movcc	r2, r3
 80071d2:	4620      	mov	r0, r4
 80071d4:	9201      	str	r2, [sp, #4]
 80071d6:	f000 ffcd 	bl	8008174 <get_tensor_byte_size>
 80071da:	f8c8 0008 	str.w	r0, [r8, #8]
 80071de:	69b3      	ldr	r3, [r6, #24]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	fb00 f303 	mul.w	r3, r0, r3
 80071e6:	f8c8 300c 	str.w	r3, [r8, #12]
 80071ea:	6871      	ldr	r1, [r6, #4]
 80071ec:	f8c8 1004 	str.w	r1, [r8, #4]
 80071f0:	440b      	add	r3, r1
 80071f2:	f849 300b 	str.w	r3, [r9, fp]
 80071f6:	69a0      	ldr	r0, [r4, #24]
 80071f8:	6803      	ldr	r3, [r0, #0]
 80071fa:	009a      	lsls	r2, r3, #2
 80071fc:	f107 0701 	add.w	r7, r7, #1
 8007200:	f106 061c 	add.w	r6, r6, #28
 8007204:	f100 80af 	bmi.w	8007366 <ai_platform_network_process+0x2e2>
 8007208:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	4419      	add	r1, r3
 8007210:	6081      	str	r1, [r0, #8]
 8007212:	69a3      	ldr	r3, [r4, #24]
 8007214:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	f8ba 3000 	ldrh.w	r3, [sl]
 800721e:	42bb      	cmp	r3, r7
 8007220:	d888      	bhi.n	8007134 <ai_platform_network_process+0xb0>
 8007222:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8007226:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007228:	f1bb 0f00 	cmp.w	fp, #0
 800722c:	f000 8188 	beq.w	8007540 <ai_platform_network_process+0x4bc>
 8007230:	2a01      	cmp	r2, #1
 8007232:	f240 8160 	bls.w	80074f6 <ai_platform_network_process+0x472>
 8007236:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800723a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8159 	beq.w	80074f6 <ai_platform_network_process+0x472>
 8007244:	465e      	mov	r6, fp
 8007246:	2700      	movs	r7, #0
 8007248:	462c      	mov	r4, r5
 800724a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80b4 	beq.w	80073bc <ai_platform_network_process+0x338>
 8007254:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8007258:	2d00      	cmp	r5, #0
 800725a:	f000 80af 	beq.w	80073bc <ai_platform_network_process+0x338>
 800725e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007262:	f8d3 8000 	ldr.w	r8, [r3]
 8007266:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800726a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800726e:	f000 8173 	beq.w	8007558 <ai_platform_network_process+0x4d4>
 8007272:	69ab      	ldr	r3, [r5, #24]
 8007274:	2101      	movs	r1, #1
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	9302      	str	r3, [sp, #8]
 800727a:	4630      	mov	r0, r6
 800727c:	f7ff fa20 	bl	80066c0 <ai_buffer_get_size>
 8007280:	9b02      	ldr	r3, [sp, #8]
 8007282:	4283      	cmp	r3, r0
 8007284:	f0c0 8136 	bcc.w	80074f4 <ai_platform_network_process+0x470>
 8007288:	68e8      	ldr	r0, [r5, #12]
 800728a:	69b1      	ldr	r1, [r6, #24]
 800728c:	68c2      	ldr	r2, [r0, #12]
 800728e:	68cb      	ldr	r3, [r1, #12]
 8007290:	429a      	cmp	r2, r3
 8007292:	f040 812f 	bne.w	80074f4 <ai_platform_network_process+0x470>
 8007296:	6882      	ldr	r2, [r0, #8]
 8007298:	688b      	ldr	r3, [r1, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	f040 812a 	bne.w	80074f4 <ai_platform_network_process+0x470>
 80072a0:	6842      	ldr	r2, [r0, #4]
 80072a2:	684b      	ldr	r3, [r1, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	f040 8125 	bne.w	80074f4 <ai_platform_network_process+0x470>
 80072aa:	69ab      	ldr	r3, [r5, #24]
 80072ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072b0:	f001 f80c 	bl	80082cc <ai_array_get_data_byte_size>
 80072b4:	9002      	str	r0, [sp, #8]
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 ff5c 	bl	8008174 <get_tensor_byte_size>
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	4283      	cmp	r3, r0
 80072c0:	f0c0 8118 	bcc.w	80074f4 <ai_platform_network_process+0x470>
 80072c4:	69ab      	ldr	r3, [r5, #24]
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	f000 ff6c 	bl	80081a4 <ai_array_to_buffer_fmt>
 80072cc:	6833      	ldr	r3, [r6, #0]
 80072ce:	4058      	eors	r0, r3
 80072d0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80072d4:	f040 8138 	bne.w	8007548 <ai_platform_network_process+0x4c4>
 80072d8:	6873      	ldr	r3, [r6, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 814f 	beq.w	800757e <ai_platform_network_process+0x4fa>
 80072e0:	69b3      	ldr	r3, [r6, #24]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8141 	beq.w	800756c <ai_platform_network_process+0x4e8>
 80072ea:	9a01      	ldr	r2, [sp, #4]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	bf38      	it	cc
 80072f0:	461a      	movcc	r2, r3
 80072f2:	4628      	mov	r0, r5
 80072f4:	9201      	str	r2, [sp, #4]
 80072f6:	f000 ff3d 	bl	8008174 <get_tensor_byte_size>
 80072fa:	f8ca 0008 	str.w	r0, [sl, #8]
 80072fe:	69b3      	ldr	r3, [r6, #24]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	fb00 f303 	mul.w	r3, r0, r3
 8007306:	f8ca 300c 	str.w	r3, [sl, #12]
 800730a:	6871      	ldr	r1, [r6, #4]
 800730c:	f8ca 1004 	str.w	r1, [sl, #4]
 8007310:	440b      	add	r3, r1
 8007312:	f848 300b 	str.w	r3, [r8, fp]
 8007316:	69a8      	ldr	r0, [r5, #24]
 8007318:	6803      	ldr	r3, [r0, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	f107 0701 	add.w	r7, r7, #1
 8007320:	f106 061c 	add.w	r6, r6, #28
 8007324:	d445      	bmi.n	80073b2 <ai_platform_network_process+0x32e>
 8007326:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	4419      	add	r1, r3
 800732e:	6081      	str	r1, [r0, #8]
 8007330:	69ab      	ldr	r3, [r5, #24]
 8007332:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007336:	60da      	str	r2, [r3, #12]
 8007338:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800733c:	429f      	cmp	r7, r3
 800733e:	d384      	bcc.n	800724a <ai_platform_network_process+0x1c6>
 8007340:	e03c      	b.n	80073bc <ai_platform_network_process+0x338>
 8007342:	e7fe      	b.n	8007342 <ai_platform_network_process+0x2be>
 8007344:	68ea      	ldr	r2, [r5, #12]
 8007346:	616b      	str	r3, [r5, #20]
 8007348:	f002 0203 	and.w	r2, r2, #3
 800734c:	2a03      	cmp	r2, #3
 800734e:	d11d      	bne.n	800738c <ai_platform_network_process+0x308>
 8007350:	2217      	movs	r2, #23
 8007352:	2112      	movs	r1, #18
 8007354:	f105 0010 	add.w	r0, r5, #16
 8007358:	f000 f91c 	bl	8007594 <core_set_error>
 800735c:	2400      	movs	r4, #0
 800735e:	4620      	mov	r0, r4
 8007360:	b005      	add	sp, #20
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	f8ba 3000 	ldrh.w	r3, [sl]
 800736a:	429f      	cmp	r7, r3
 800736c:	f4ff aee2 	bcc.w	8007134 <ai_platform_network_process+0xb0>
 8007370:	e757      	b.n	8007222 <ai_platform_network_process+0x19e>
 8007372:	bf00      	nop
 8007374:	a1c00100 	.word	0xa1c00100
 8007378:	e0042000 	.word	0xe0042000
 800737c:	58024000 	.word	0x58024000
 8007380:	f407a5c2 	.word	0xf407a5c2
 8007384:	b5e8b5cd 	.word	0xb5e8b5cd
 8007388:	40023000 	.word	0x40023000
 800738c:	2230      	movs	r2, #48	; 0x30
 800738e:	2111      	movs	r1, #17
 8007390:	f105 0010 	add.w	r0, r5, #16
 8007394:	f000 f8fe 	bl	8007594 <core_set_error>
 8007398:	2400      	movs	r4, #0
 800739a:	e7e0      	b.n	800735e <ai_platform_network_process+0x2da>
 800739c:	462c      	mov	r4, r5
 800739e:	e7de      	b.n	800735e <ai_platform_network_process+0x2da>
 80073a0:	9d02      	ldr	r5, [sp, #8]
 80073a2:	2218      	movs	r2, #24
 80073a4:	2112      	movs	r1, #18
 80073a6:	f105 0010 	add.w	r0, r5, #16
 80073aa:	f000 f8f3 	bl	8007594 <core_set_error>
 80073ae:	2400      	movs	r4, #0
 80073b0:	e7d5      	b.n	800735e <ai_platform_network_process+0x2da>
 80073b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80073b6:	429f      	cmp	r7, r3
 80073b8:	f4ff af47 	bcc.w	800724a <ai_platform_network_process+0x1c6>
 80073bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80073c0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80073c2:	82a3      	strh	r3, [r4, #20]
 80073c4:	4625      	mov	r5, r4
 80073c6:	2a00      	cmp	r2, #0
 80073c8:	f040 808e 	bne.w	80074e8 <ai_platform_network_process+0x464>
 80073cc:	4616      	mov	r6, r2
 80073ce:	4617      	mov	r7, r2
 80073d0:	8aec      	ldrh	r4, [r5, #22]
 80073d2:	429c      	cmp	r4, r3
 80073d4:	bf38      	it	cc
 80073d6:	46ab      	movcc	fp, r5
 80073d8:	d2c1      	bcs.n	800735e <ai_platform_network_process+0x2da>
 80073da:	2e00      	cmp	r6, #0
 80073dc:	d030      	beq.n	8007440 <ai_platform_network_process+0x3bc>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	e014      	b.n	800740e <ai_platform_network_process+0x38a>
 80073e4:	6882      	ldr	r2, [r0, #8]
 80073e6:	68c5      	ldr	r5, [r0, #12]
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	1b52      	subs	r2, r2, r5
 80073ec:	4413      	add	r3, r2
 80073ee:	6083      	str	r3, [r0, #8]
 80073f0:	698b      	ldr	r3, [r1, #24]
 80073f2:	6862      	ldr	r2, [r4, #4]
 80073f4:	60da      	str	r2, [r3, #12]
 80073f6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80073fa:	f859 200a 	ldr.w	r2, [r9, sl]
 80073fe:	440b      	add	r3, r1
 8007400:	4293      	cmp	r3, r2
 8007402:	bf24      	itt	cs
 8007404:	68e3      	ldrcs	r3, [r4, #12]
 8007406:	1ad3      	subcs	r3, r2, r3
 8007408:	6063      	str	r3, [r4, #4]
 800740a:	f108 0801 	add.w	r8, r8, #1
 800740e:	8833      	ldrh	r3, [r6, #0]
 8007410:	4543      	cmp	r3, r8
 8007412:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007416:	d913      	bls.n	8007440 <ai_platform_network_process+0x3bc>
 8007418:	6873      	ldr	r3, [r6, #4]
 800741a:	b18b      	cbz	r3, 8007440 <ai_platform_network_process+0x3bc>
 800741c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007420:	b171      	cbz	r1, 8007440 <ai_platform_network_process+0x3bc>
 8007422:	6988      	ldr	r0, [r1, #24]
 8007424:	68b2      	ldr	r2, [r6, #8]
 8007426:	6803      	ldr	r3, [r0, #0]
 8007428:	f8d2 9000 	ldr.w	r9, [r2]
 800742c:	009d      	lsls	r5, r3, #2
 800742e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007432:	d5d7      	bpl.n	80073e4 <ai_platform_network_process+0x360>
 8007434:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007438:	6880      	ldr	r0, [r0, #8]
 800743a:	f002 f9c3 	bl	80097c4 <memcpy>
 800743e:	e7da      	b.n	80073f6 <ai_platform_network_process+0x372>
 8007440:	4658      	mov	r0, fp
 8007442:	f000 fd23 	bl	8007e8c <ai_layers_forward_all>
 8007446:	2f00      	cmp	r7, #0
 8007448:	d03f      	beq.n	80074ca <ai_platform_network_process+0x446>
 800744a:	2400      	movs	r4, #0
 800744c:	e016      	b.n	800747c <ai_platform_network_process+0x3f8>
 800744e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007452:	f859 100a 	ldr.w	r1, [r9, sl]
 8007456:	4413      	add	r3, r2
 8007458:	428b      	cmp	r3, r1
 800745a:	bf24      	itt	cs
 800745c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007460:	1acb      	subcs	r3, r1, r3
 8007462:	f8c8 3004 	str.w	r3, [r8, #4]
 8007466:	6981      	ldr	r1, [r0, #24]
 8007468:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800746c:	1b52      	subs	r2, r2, r5
 800746e:	4413      	add	r3, r2
 8007470:	608b      	str	r3, [r1, #8]
 8007472:	6983      	ldr	r3, [r0, #24]
 8007474:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007478:	60da      	str	r2, [r3, #12]
 800747a:	3401      	adds	r4, #1
 800747c:	883b      	ldrh	r3, [r7, #0]
 800747e:	42a3      	cmp	r3, r4
 8007480:	d923      	bls.n	80074ca <ai_platform_network_process+0x446>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	b30b      	cbz	r3, 80074ca <ai_platform_network_process+0x446>
 8007486:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800748a:	b1f0      	cbz	r0, 80074ca <ai_platform_network_process+0x446>
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	6983      	ldr	r3, [r0, #24]
 8007490:	f8d2 9000 	ldr.w	r9, [r2]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	0092      	lsls	r2, r2, #2
 8007498:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800749c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80074a0:	d5d5      	bpl.n	800744e <ai_platform_network_process+0x3ca>
 80074a2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80074a6:	6899      	ldr	r1, [r3, #8]
 80074a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074ac:	f002 f98a 	bl	80097c4 <memcpy>
 80074b0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80074b4:	f859 200a 	ldr.w	r2, [r9, sl]
 80074b8:	440b      	add	r3, r1
 80074ba:	4293      	cmp	r3, r2
 80074bc:	bf24      	itt	cs
 80074be:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80074c2:	1ad3      	subcs	r3, r2, r3
 80074c4:	f8c8 3004 	str.w	r3, [r8, #4]
 80074c8:	e7d7      	b.n	800747a <ai_platform_network_process+0x3f6>
 80074ca:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80074ce:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80074d2:	3401      	adds	r4, #1
 80074d4:	b2a4      	uxth	r4, r4
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	f8ab 4016 	strh.w	r4, [fp, #22]
 80074dc:	f63f af7d 	bhi.w	80073da <ai_platform_network_process+0x356>
 80074e0:	4620      	mov	r0, r4
 80074e2:	b005      	add	sp, #20
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	2a01      	cmp	r2, #1
 80074ea:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80074ec:	d03c      	beq.n	8007568 <ai_platform_network_process+0x4e4>
 80074ee:	f106 070c 	add.w	r7, r6, #12
 80074f2:	e76d      	b.n	80073d0 <ai_platform_network_process+0x34c>
 80074f4:	4625      	mov	r5, r4
 80074f6:	2218      	movs	r2, #24
 80074f8:	2113      	movs	r1, #19
 80074fa:	f105 0010 	add.w	r0, r5, #16
 80074fe:	f000 f849 	bl	8007594 <core_set_error>
 8007502:	2400      	movs	r4, #0
 8007504:	e72b      	b.n	800735e <ai_platform_network_process+0x2da>
 8007506:	9d02      	ldr	r5, [sp, #8]
 8007508:	4604      	mov	r4, r0
 800750a:	2221      	movs	r2, #33	; 0x21
 800750c:	2112      	movs	r1, #18
 800750e:	f105 0010 	add.w	r0, r5, #16
 8007512:	f000 f83f 	bl	8007594 <core_set_error>
 8007516:	e722      	b.n	800735e <ai_platform_network_process+0x2da>
 8007518:	9d02      	ldr	r5, [sp, #8]
 800751a:	e719      	b.n	8007350 <ai_platform_network_process+0x2cc>
 800751c:	9d02      	ldr	r5, [sp, #8]
 800751e:	4604      	mov	r4, r0
 8007520:	2217      	movs	r2, #23
 8007522:	2112      	movs	r1, #18
 8007524:	f105 0010 	add.w	r0, r5, #16
 8007528:	f000 f834 	bl	8007594 <core_set_error>
 800752c:	e717      	b.n	800735e <ai_platform_network_process+0x2da>
 800752e:	9d02      	ldr	r5, [sp, #8]
 8007530:	2219      	movs	r2, #25
 8007532:	2112      	movs	r1, #18
 8007534:	f105 0010 	add.w	r0, r5, #16
 8007538:	f000 f82c 	bl	8007594 <core_set_error>
 800753c:	2400      	movs	r4, #0
 800753e:	e70e      	b.n	800735e <ai_platform_network_process+0x2da>
 8007540:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007544:	82ab      	strh	r3, [r5, #20]
 8007546:	e73e      	b.n	80073c6 <ai_platform_network_process+0x342>
 8007548:	f104 0010 	add.w	r0, r4, #16
 800754c:	2219      	movs	r2, #25
 800754e:	2113      	movs	r1, #19
 8007550:	f000 f820 	bl	8007594 <core_set_error>
 8007554:	2400      	movs	r4, #0
 8007556:	e702      	b.n	800735e <ai_platform_network_process+0x2da>
 8007558:	f104 0010 	add.w	r0, r4, #16
 800755c:	2217      	movs	r2, #23
 800755e:	2113      	movs	r1, #19
 8007560:	f000 f818 	bl	8007594 <core_set_error>
 8007564:	4654      	mov	r4, sl
 8007566:	e6fa      	b.n	800735e <ai_platform_network_process+0x2da>
 8007568:	2700      	movs	r7, #0
 800756a:	e731      	b.n	80073d0 <ai_platform_network_process+0x34c>
 800756c:	4625      	mov	r5, r4
 800756e:	2221      	movs	r2, #33	; 0x21
 8007570:	4604      	mov	r4, r0
 8007572:	2113      	movs	r1, #19
 8007574:	f105 0010 	add.w	r0, r5, #16
 8007578:	f000 f80c 	bl	8007594 <core_set_error>
 800757c:	e6ef      	b.n	800735e <ai_platform_network_process+0x2da>
 800757e:	4625      	mov	r5, r4
 8007580:	2217      	movs	r2, #23
 8007582:	4604      	mov	r4, r0
 8007584:	2113      	movs	r1, #19
 8007586:	f105 0010 	add.w	r0, r5, #16
 800758a:	f000 f803 	bl	8007594 <core_set_error>
 800758e:	e6e6      	b.n	800735e <ai_platform_network_process+0x2da>

08007590 <core_init>:
 8007590:	2001      	movs	r0, #1
 8007592:	4770      	bx	lr

08007594 <core_set_error>:
 8007594:	4603      	mov	r3, r0
 8007596:	7800      	ldrb	r0, [r0, #0]
 8007598:	b108      	cbz	r0, 800759e <core_set_error+0xa>
 800759a:	2000      	movs	r0, #0
 800759c:	4770      	bx	lr
 800759e:	7019      	strb	r1, [r3, #0]
 80075a0:	6819      	ldr	r1, [r3, #0]
 80075a2:	f362 211f 	bfi	r1, r2, #8, #24
 80075a6:	2001      	movs	r0, #1
 80075a8:	6019      	str	r1, [r3, #0]
 80075aa:	4770      	bx	lr

080075ac <forward_dense>:
 80075ac:	6983      	ldr	r3, [r0, #24]
 80075ae:	881a      	ldrh	r2, [r3, #0]
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	f000 8181 	beq.w	80078b8 <forward_dense+0x30c>
 80075b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	ed2d 8b02 	vpush	{d8}
 80075be:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80075c2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80075c6:	b095      	sub	sp, #84	; 0x54
 80075c8:	b105      	cbz	r5, 80075cc <forward_dense+0x20>
 80075ca:	682d      	ldr	r5, [r5, #0]
 80075cc:	2a01      	cmp	r2, #1
 80075ce:	f000 828f 	beq.w	8007af0 <forward_dense+0x544>
 80075d2:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80075d6:	b106      	cbz	r6, 80075da <forward_dense+0x2e>
 80075d8:	6836      	ldr	r6, [r6, #0]
 80075da:	2a02      	cmp	r2, #2
 80075dc:	f000 816e 	beq.w	80078bc <forward_dense+0x310>
 80075e0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80075e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8274 	beq.w	8007ad4 <forward_dense+0x528>
 80075ec:	4619      	mov	r1, r3
 80075ee:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80075f2:	6809      	ldr	r1, [r1, #0]
 80075f4:	910d      	str	r1, [sp, #52]	; 0x34
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	f240 826e 	bls.w	8007ad8 <forward_dense+0x52c>
 80075fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	930b      	str	r3, [sp, #44]	; 0x2c
 8007602:	460b      	mov	r3, r1
 8007604:	68e8      	ldr	r0, [r5, #12]
 8007606:	68f7      	ldr	r7, [r6, #12]
 8007608:	6840      	ldr	r0, [r0, #4]
 800760a:	6999      	ldr	r1, [r3, #24]
 800760c:	9013      	str	r0, [sp, #76]	; 0x4c
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	680b      	ldr	r3, [r1, #0]
 8007612:	9012      	str	r0, [sp, #72]	; 0x48
 8007614:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8007618:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800761c:	fb00 f404 	mul.w	r4, r0, r4
 8007620:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8007624:	fa4e f000 	asr.w	r0, lr, r0
 8007628:	2a03      	cmp	r2, #3
 800762a:	9010      	str	r0, [sp, #64]	; 0x40
 800762c:	f000 825d 	beq.w	8007aea <forward_dense+0x53e>
 8007630:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8007634:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007638:	2a00      	cmp	r2, #0
 800763a:	f000 8246 	beq.w	8007aca <forward_dense+0x51e>
 800763e:	6812      	ldr	r2, [r2, #0]
 8007640:	2a00      	cmp	r2, #0
 8007642:	f000 8242 	beq.w	8007aca <forward_dense+0x51e>
 8007646:	2b04      	cmp	r3, #4
 8007648:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800764c:	f000 822c 	beq.w	8007aa8 <forward_dense+0x4fc>
 8007650:	2b08      	cmp	r3, #8
 8007652:	f000 8229 	beq.w	8007aa8 <forward_dense+0x4fc>
 8007656:	f04f 0b00 	mov.w	fp, #0
 800765a:	69b2      	ldr	r2, [r6, #24]
 800765c:	69ab      	ldr	r3, [r5, #24]
 800765e:	6891      	ldr	r1, [r2, #8]
 8007660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	6952      	ldr	r2, [r2, #20]
 8007666:	9106      	str	r1, [sp, #24]
 8007668:	fb07 f404 	mul.w	r4, r7, r4
 800766c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007672:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007676:	4281      	cmp	r1, r0
 8007678:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800767c:	900e      	str	r0, [sp, #56]	; 0x38
 800767e:	940c      	str	r4, [sp, #48]	; 0x30
 8007680:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8007684:	f080 8113 	bcs.w	80078ae <forward_dense+0x302>
 8007688:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800768a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 80078d8 <forward_dense+0x32c>
 800768e:	f021 0201 	bic.w	r2, r1, #1
 8007692:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007696:	9204      	str	r2, [sp, #16]
 8007698:	f001 0201 	and.w	r2, r1, #1
 800769c:	08c8      	lsrs	r0, r1, #3
 800769e:	9208      	str	r2, [sp, #32]
 80076a0:	008a      	lsls	r2, r1, #2
 80076a2:	f001 0a07 	and.w	sl, r1, #7
 80076a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80076a8:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 80076ac:	3320      	adds	r3, #32
 80076ae:	465c      	mov	r4, fp
 80076b0:	9007      	str	r0, [sp, #28]
 80076b2:	46cb      	mov	fp, r9
 80076b4:	9205      	str	r2, [sp, #20]
 80076b6:	9302      	str	r3, [sp, #8]
 80076b8:	46c1      	mov	r9, r8
 80076ba:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80076be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	3b20      	subs	r3, #32
 80076c8:	930a      	str	r3, [sp, #40]	; 0x28
 80076ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076cc:	b10b      	cbz	r3, 80076d2 <forward_dense+0x126>
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	f000 81da 	beq.w	8007a8c <forward_dense+0x4e0>
 80076d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80076da:	2904      	cmp	r1, #4
 80076dc:	9906      	ldr	r1, [sp, #24]
 80076de:	f000 80fd 	beq.w	80078dc <forward_dense+0x330>
 80076e2:	4549      	cmp	r1, r9
 80076e4:	f080 80d2 	bcs.w	800788c <forward_dense+0x2e0>
 80076e8:	460f      	mov	r7, r1
 80076ea:	9907      	ldr	r1, [sp, #28]
 80076ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80076f0:	f8dd a014 	ldr.w	sl, [sp, #20]
 80076f4:	1c4e      	adds	r6, r1, #1
 80076f6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80076fa:	4694      	mov	ip, r2
 80076fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076fe:	468e      	mov	lr, r1
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80de 	beq.w	80078c2 <forward_dense+0x316>
 8007706:	ecf3 2a01 	vldmia	r3!, {s5}
 800770a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80078d8 <forward_dense+0x32c>
 800770e:	f1be 0f00 	cmp.w	lr, #0
 8007712:	f000 80de 	beq.w	80078d2 <forward_dense+0x326>
 8007716:	f10c 0108 	add.w	r1, ip, #8
 800771a:	4640      	mov	r0, r8
 800771c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007720:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8007724:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8007728:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800772c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8007730:	ed10 5a04 	vldr	s10, [r0, #-16]
 8007734:	ed50 5a03 	vldr	s11, [r0, #-12]
 8007738:	ed10 6a02 	vldr	s12, [r0, #-8]
 800773c:	ed50 6a01 	vldr	s13, [r0, #-4]
 8007740:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007744:	edd5 7a00 	vldr	s15, [r5]
 8007748:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800774c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007750:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007754:	ed95 3a00 	vldr	s6, [r5]
 8007758:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800775c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007760:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007764:	3108      	adds	r1, #8
 8007766:	edd5 3a00 	vldr	s7, [r5]
 800776a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800776e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007772:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007776:	3020      	adds	r0, #32
 8007778:	ed95 4a00 	vldr	s8, [r5]
 800777c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007780:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007784:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007788:	edd5 4a00 	vldr	s9, [r5]
 800778c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007790:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007794:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007798:	ed95 5a00 	vldr	s10, [r5]
 800779c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80077a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80077a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80077a8:	edd5 5a00 	vldr	s11, [r5]
 80077ac:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80077b0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80077b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80077b8:	428e      	cmp	r6, r1
 80077ba:	ed95 6a00 	vldr	s12, [r5]
 80077be:	eee6 7a26 	vfma.f32	s15, s12, s13
 80077c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077c6:	d1a9      	bne.n	800771c <forward_dense+0x170>
 80077c8:	f1a6 0108 	sub.w	r1, r6, #8
 80077cc:	4650      	mov	r0, sl
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d04a      	beq.n	8007868 <forward_dense+0x2bc>
 80077d2:	780d      	ldrb	r5, [r1, #0]
 80077d4:	edd0 6a00 	vldr	s13, [r0]
 80077d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80077dc:	edd5 7a00 	vldr	s15, [r5]
 80077e0:	2a01      	cmp	r2, #1
 80077e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077e6:	d03f      	beq.n	8007868 <forward_dense+0x2bc>
 80077e8:	784d      	ldrb	r5, [r1, #1]
 80077ea:	edd0 6a01 	vldr	s13, [r0, #4]
 80077ee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80077f2:	edd5 7a00 	vldr	s15, [r5]
 80077f6:	2a02      	cmp	r2, #2
 80077f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077fc:	d034      	beq.n	8007868 <forward_dense+0x2bc>
 80077fe:	788d      	ldrb	r5, [r1, #2]
 8007800:	edd0 6a02 	vldr	s13, [r0, #8]
 8007804:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007808:	edd5 7a00 	vldr	s15, [r5]
 800780c:	2a03      	cmp	r2, #3
 800780e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007812:	d029      	beq.n	8007868 <forward_dense+0x2bc>
 8007814:	78cd      	ldrb	r5, [r1, #3]
 8007816:	edd0 6a03 	vldr	s13, [r0, #12]
 800781a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800781e:	edd5 7a00 	vldr	s15, [r5]
 8007822:	2a04      	cmp	r2, #4
 8007824:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007828:	d01e      	beq.n	8007868 <forward_dense+0x2bc>
 800782a:	790d      	ldrb	r5, [r1, #4]
 800782c:	edd0 6a04 	vldr	s13, [r0, #16]
 8007830:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007834:	edd5 7a00 	vldr	s15, [r5]
 8007838:	2a05      	cmp	r2, #5
 800783a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800783e:	d013      	beq.n	8007868 <forward_dense+0x2bc>
 8007840:	794d      	ldrb	r5, [r1, #5]
 8007842:	edd0 6a05 	vldr	s13, [r0, #20]
 8007846:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800784a:	edd5 7a00 	vldr	s15, [r5]
 800784e:	2a06      	cmp	r2, #6
 8007850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007854:	d008      	beq.n	8007868 <forward_dense+0x2bc>
 8007856:	7989      	ldrb	r1, [r1, #6]
 8007858:	edd0 7a06 	vldr	s15, [r0, #24]
 800785c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007860:	edd1 6a00 	vldr	s13, [r1]
 8007864:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007868:	44dc      	add	ip, fp
 800786a:	445e      	add	r6, fp
 800786c:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007870:	eca7 7a01 	vstmia	r7!, {s14}
 8007874:	454f      	cmp	r7, r9
 8007876:	f4ff af43 	bcc.w	8007700 <forward_dense+0x154>
 800787a:	9a06      	ldr	r2, [sp, #24]
 800787c:	eba9 0302 	sub.w	r3, r9, r2
 8007880:	3b01      	subs	r3, #1
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	3304      	adds	r3, #4
 8007888:	18d3      	adds	r3, r2, r3
 800788a:	9306      	str	r3, [sp, #24]
 800788c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800788e:	9a05      	ldr	r2, [sp, #20]
 8007890:	4499      	add	r9, r3
 8007892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007894:	441a      	add	r2, r3
 8007896:	9205      	str	r2, [sp, #20]
 8007898:	9a02      	ldr	r2, [sp, #8]
 800789a:	441a      	add	r2, r3
 800789c:	9202      	str	r2, [sp, #8]
 800789e:	9a04      	ldr	r2, [sp, #16]
 80078a0:	441a      	add	r2, r3
 80078a2:	9204      	str	r2, [sp, #16]
 80078a4:	9b06      	ldr	r3, [sp, #24]
 80078a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078a8:	4293      	cmp	r3, r2
 80078aa:	f4ff af08 	bcc.w	80076be <forward_dense+0x112>
 80078ae:	b015      	add	sp, #84	; 0x54
 80078b0:	ecbd 8b02 	vpop	{d8}
 80078b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b8:	6853      	ldr	r3, [r2, #4]
 80078ba:	deff      	udf	#255	; 0xff
 80078bc:	2300      	movs	r3, #0
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	deff      	udf	#255	; 0xff
 80078c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80078d8 <forward_dense+0x32c>
 80078c6:	eef0 2a48 	vmov.f32	s5, s16
 80078ca:	f1be 0f00 	cmp.w	lr, #0
 80078ce:	f47f af22 	bne.w	8007716 <forward_dense+0x16a>
 80078d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078d4:	4661      	mov	r1, ip
 80078d6:	e77a      	b.n	80077ce <forward_dense+0x222>
 80078d8:	00000000 	.word	0x00000000
 80078dc:	4549      	cmp	r1, r9
 80078de:	d2d5      	bcs.n	800788c <forward_dense+0x2e0>
 80078e0:	9807      	ldr	r0, [sp, #28]
 80078e2:	9103      	str	r1, [sp, #12]
 80078e4:	9904      	ldr	r1, [sp, #16]
 80078e6:	f100 0c01 	add.w	ip, r0, #1
 80078ea:	3901      	subs	r1, #1
 80078ec:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80078f0:	9109      	str	r1, [sp, #36]	; 0x24
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80b2 	beq.w	8007a5c <forward_dense+0x4b0>
 80078f8:	9907      	ldr	r1, [sp, #28]
 80078fa:	ecf3 2a01 	vldmia	r3!, {s5}
 80078fe:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 80078d8 <forward_dense+0x32c>
 8007902:	2900      	cmp	r1, #0
 8007904:	f000 80b2 	beq.w	8007a6c <forward_dense+0x4c0>
 8007908:	9902      	ldr	r1, [sp, #8]
 800790a:	1d10      	adds	r0, r2, #4
 800790c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8007910:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8007914:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8007918:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800791c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8007920:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8007924:	ed11 5a04 	vldr	s10, [r1, #-16]
 8007928:	ed51 5a03 	vldr	s11, [r1, #-12]
 800792c:	ed11 6a02 	vldr	s12, [r1, #-8]
 8007930:	ed51 6a01 	vldr	s13, [r1, #-4]
 8007934:	f006 070f 	and.w	r7, r6, #15
 8007938:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800793c:	edd7 7a00 	vldr	s15, [r7]
 8007940:	0936      	lsrs	r6, r6, #4
 8007942:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007946:	ed96 3a00 	vldr	s6, [r6]
 800794a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800794e:	092e      	lsrs	r6, r5, #4
 8007950:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007954:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007958:	f005 050f 	and.w	r5, r5, #15
 800795c:	edd6 3a00 	vldr	s7, [r6]
 8007960:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8007964:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007968:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800796c:	0937      	lsrs	r7, r6, #4
 800796e:	ed95 4a00 	vldr	s8, [r5]
 8007972:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8007976:	eee4 7a24 	vfma.f32	s15, s8, s9
 800797a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800797e:	f006 060f 	and.w	r6, r6, #15
 8007982:	edd7 4a00 	vldr	s9, [r7]
 8007986:	eee4 7a85 	vfma.f32	s15, s9, s10
 800798a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800798e:	3004      	adds	r0, #4
 8007990:	ed96 5a00 	vldr	s10, [r6]
 8007994:	092e      	lsrs	r6, r5, #4
 8007996:	eee5 7a25 	vfma.f32	s15, s10, s11
 800799a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800799e:	f005 050f 	and.w	r5, r5, #15
 80079a2:	edd6 5a00 	vldr	s11, [r6]
 80079a6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80079aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80079ae:	4584      	cmp	ip, r0
 80079b0:	ed95 6a00 	vldr	s12, [r5]
 80079b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80079b8:	f101 0120 	add.w	r1, r1, #32
 80079bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079c0:	d1a4      	bne.n	800790c <forward_dense+0x360>
 80079c2:	f8dd e014 	ldr.w	lr, [sp, #20]
 80079c6:	f1ac 0804 	sub.w	r8, ip, #4
 80079ca:	9904      	ldr	r1, [sp, #16]
 80079cc:	458e      	cmp	lr, r1
 80079ce:	d22a      	bcs.n	8007a26 <forward_dense+0x47a>
 80079d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079d2:	eba1 070e 	sub.w	r7, r1, lr
 80079d6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 80079da:	f10e 0008 	add.w	r0, lr, #8
 80079de:	f108 36ff 	add.w	r6, r8, #4294967295
 80079e2:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80079e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079ea:	ed50 5a01 	vldr	s11, [r0, #-4]
 80079ee:	ed50 6a02 	vldr	s13, [r0, #-8]
 80079f2:	f001 050f 	and.w	r5, r1, #15
 80079f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80079fa:	edd5 7a00 	vldr	s15, [r5]
 80079fe:	0909      	lsrs	r1, r1, #4
 8007a00:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007a04:	ed91 6a00 	vldr	s12, [r1]
 8007a08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007a0c:	42b7      	cmp	r7, r6
 8007a0e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a12:	f100 0008 	add.w	r0, r0, #8
 8007a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a1a:	d1e4      	bne.n	80079e6 <forward_dense+0x43a>
 8007a1c:	f10a 0a01 	add.w	sl, sl, #1
 8007a20:	44d0      	add	r8, sl
 8007a22:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8007a26:	9908      	ldr	r1, [sp, #32]
 8007a28:	b321      	cbz	r1, 8007a74 <forward_dense+0x4c8>
 8007a2a:	f898 1000 	ldrb.w	r1, [r8]
 8007a2e:	edde 7a00 	vldr	s15, [lr]
 8007a32:	0909      	lsrs	r1, r1, #4
 8007a34:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007a38:	edd1 6a00 	vldr	s13, [r1]
 8007a3c:	9903      	ldr	r1, [sp, #12]
 8007a3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a42:	445a      	add	r2, fp
 8007a44:	44dc      	add	ip, fp
 8007a46:	ee72 2a87 	vadd.f32	s5, s5, s14
 8007a4a:	ece1 2a01 	vstmia	r1!, {s5}
 8007a4e:	4589      	cmp	r9, r1
 8007a50:	9103      	str	r1, [sp, #12]
 8007a52:	f67f af12 	bls.w	800787a <forward_dense+0x2ce>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f47f af4e 	bne.w	80078f8 <forward_dense+0x34c>
 8007a5c:	9907      	ldr	r1, [sp, #28]
 8007a5e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 80078d8 <forward_dense+0x32c>
 8007a62:	eef0 2a48 	vmov.f32	s5, s16
 8007a66:	2900      	cmp	r1, #0
 8007a68:	f47f af4e 	bne.w	8007908 <forward_dense+0x35c>
 8007a6c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8007a70:	4690      	mov	r8, r2
 8007a72:	e7aa      	b.n	80079ca <forward_dense+0x41e>
 8007a74:	9903      	ldr	r1, [sp, #12]
 8007a76:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007a7a:	445a      	add	r2, fp
 8007a7c:	eca1 7a01 	vstmia	r1!, {s14}
 8007a80:	4549      	cmp	r1, r9
 8007a82:	9103      	str	r1, [sp, #12]
 8007a84:	44dc      	add	ip, fp
 8007a86:	f4ff af34 	bcc.w	80078f2 <forward_dense+0x346>
 8007a8a:	e6f6      	b.n	800787a <forward_dense+0x2ce>
 8007a8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007a8e:	9d06      	ldr	r5, [sp, #24]
 8007a90:	9101      	str	r1, [sp, #4]
 8007a92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a94:	9100      	str	r1, [sp, #0]
 8007a96:	4628      	mov	r0, r5
 8007a98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a9a:	f000 fa41 	bl	8007f20 <lite_dense_if32of32wf32>
 8007a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	4413      	add	r3, r2
 8007aa4:	9306      	str	r3, [sp, #24]
 8007aa6:	e6f1      	b.n	800788c <forward_dense+0x2e0>
 8007aa8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8007aac:	f1b9 0f00 	cmp.w	r9, #0
 8007ab0:	d016      	beq.n	8007ae0 <forward_dense+0x534>
 8007ab2:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007ab6:	f000 fbe1 	bl	800827c <ai_array_get_byte_size>
 8007aba:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8007abe:	4602      	mov	r2, r0
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f001 fe7e 	bl	80097c4 <memcpy>
 8007ac8:	e5c7      	b.n	800765a <forward_dense+0xae>
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d00a      	beq.n	8007ae4 <forward_dense+0x538>
 8007ace:	f04f 0900 	mov.w	r9, #0
 8007ad2:	e5bd      	b.n	8007650 <forward_dense+0xa4>
 8007ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ad6:	e595      	b.n	8007604 <forward_dense+0x58>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8007adc:	460b      	mov	r3, r1
 8007ade:	e591      	b.n	8007604 <forward_dense+0x58>
 8007ae0:	46c3      	mov	fp, r8
 8007ae2:	e5ba      	b.n	800765a <forward_dense+0xae>
 8007ae4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8007ae8:	e5b7      	b.n	800765a <forward_dense+0xae>
 8007aea:	2300      	movs	r3, #0
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	deff      	udf	#255	; 0xff
 8007af0:	2300      	movs	r3, #0
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	deff      	udf	#255	; 0xff
 8007af6:	bf00      	nop

08007af8 <forward_sigmoid>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	ed2d 8b02 	vpush	{d8}
 8007afe:	6982      	ldr	r2, [r0, #24]
 8007b00:	8813      	ldrh	r3, [r2, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d03b      	beq.n	8007b7e <forward_sigmoid+0x86>
 8007b06:	6852      	ldr	r2, [r2, #4]
 8007b08:	6854      	ldr	r4, [r2, #4]
 8007b0a:	b104      	cbz	r4, 8007b0e <forward_sigmoid+0x16>
 8007b0c:	6824      	ldr	r4, [r4, #0]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d034      	beq.n	8007b7c <forward_sigmoid+0x84>
 8007b12:	6915      	ldr	r5, [r2, #16]
 8007b14:	b105      	cbz	r5, 8007b18 <forward_sigmoid+0x20>
 8007b16:	682d      	ldr	r5, [r5, #0]
 8007b18:	68a3      	ldr	r3, [r4, #8]
 8007b1a:	0a1b      	lsrs	r3, r3, #8
 8007b1c:	d031      	beq.n	8007b82 <forward_sigmoid+0x8a>
 8007b1e:	68e0      	ldr	r0, [r4, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b2a:	4298      	cmp	r0, r3
 8007b2c:	fb01 f202 	mul.w	r2, r1, r2
 8007b30:	d1f9      	bne.n	8007b26 <forward_sigmoid+0x2e>
 8007b32:	69a7      	ldr	r7, [r4, #24]
 8007b34:	69a9      	ldr	r1, [r5, #24]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	688e      	ldr	r6, [r1, #8]
 8007b3a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007b3e:	3a01      	subs	r2, #1
 8007b40:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8007b44:	42ab      	cmp	r3, r5
 8007b46:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8007b4a:	d814      	bhi.n	8007b76 <forward_sigmoid+0x7e>
 8007b4c:	3504      	adds	r5, #4
 8007b4e:	3604      	adds	r6, #4
 8007b50:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007b54:	462c      	mov	r4, r5
 8007b56:	ed35 0a01 	vldmdb	r5!, {s0}
 8007b5a:	eeb1 0a40 	vneg.f32	s0, s0
 8007b5e:	f004 fd13 	bl	800c588 <expf>
 8007b62:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007b66:	3c08      	subs	r4, #8
 8007b68:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007b6c:	ed66 7a01 	vstmdb	r6!, {s15}
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	d9ee      	bls.n	8007b54 <forward_sigmoid+0x5c>
 8007b76:	ecbd 8b02 	vpop	{d8}
 8007b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	deff      	udf	#255	; 0xff
 8007b82:	69ab      	ldr	r3, [r5, #24]
 8007b84:	69a7      	ldr	r7, [r4, #24]
 8007b86:	689e      	ldr	r6, [r3, #8]
 8007b88:	68bd      	ldr	r5, [r7, #8]
 8007b8a:	e7df      	b.n	8007b4c <forward_sigmoid+0x54>

08007b8c <forward_relu>:
 8007b8c:	6982      	ldr	r2, [r0, #24]
 8007b8e:	8813      	ldrh	r3, [r2, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d05b      	beq.n	8007c4c <forward_relu+0xc0>
 8007b94:	6851      	ldr	r1, [r2, #4]
 8007b96:	684a      	ldr	r2, [r1, #4]
 8007b98:	b102      	cbz	r2, 8007b9c <forward_relu+0x10>
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	f000 8123 	beq.w	8007de8 <forward_relu+0x25c>
 8007ba2:	b470      	push	{r4, r5, r6}
 8007ba4:	6909      	ldr	r1, [r1, #16]
 8007ba6:	b101      	cbz	r1, 8007baa <forward_relu+0x1e>
 8007ba8:	6809      	ldr	r1, [r1, #0]
 8007baa:	69c6      	ldr	r6, [r0, #28]
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	f000 8097 	beq.w	8007ce0 <forward_relu+0x154>
 8007bb2:	6873      	ldr	r3, [r6, #4]
 8007bb4:	6988      	ldr	r0, [r1, #24]
 8007bb6:	6991      	ldr	r1, [r2, #24]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	f000 80c1 	beq.w	8007d40 <forward_relu+0x1b4>
 8007bbe:	6893      	ldr	r3, [r2, #8]
 8007bc0:	6880      	ldr	r0, [r0, #8]
 8007bc2:	688c      	ldr	r4, [r1, #8]
 8007bc4:	0a1b      	lsrs	r3, r3, #8
 8007bc6:	f000 80f2 	beq.w	8007dae <forward_relu+0x222>
 8007bca:	68d5      	ldr	r5, [r2, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007bd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bd6:	42ab      	cmp	r3, r5
 8007bd8:	fb01 f202 	mul.w	r2, r1, r2
 8007bdc:	d1f9      	bne.n	8007bd2 <forward_relu+0x46>
 8007bde:	68b3      	ldr	r3, [r6, #8]
 8007be0:	ed93 7a02 	vldr	s14, [r3, #8]
 8007be4:	edd3 6a00 	vldr	s13, [r3]
 8007be8:	ed93 6a01 	vldr	s12, [r3, #4]
 8007bec:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007bf0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007bf4:	3a01      	subs	r2, #1
 8007bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bfe:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007c02:	d425      	bmi.n	8007c50 <forward_relu+0xc4>
 8007c04:	429c      	cmp	r4, r3
 8007c06:	d81f      	bhi.n	8007c48 <forward_relu+0xbc>
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	1d01      	adds	r1, r0, #4
 8007c0c:	e00d      	b.n	8007c2a <forward_relu+0x9e>
 8007c0e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c16:	db03      	blt.n	8007c20 <forward_relu+0x94>
 8007c18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c1c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007c20:	3b08      	subs	r3, #8
 8007c22:	429c      	cmp	r4, r3
 8007c24:	ed61 7a01 	vstmdb	r1!, {s15}
 8007c28:	d80e      	bhi.n	8007c48 <forward_relu+0xbc>
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	ed72 7a01 	vldmdb	r2!, {s15}
 8007c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c38:	d9e9      	bls.n	8007c0e <forward_relu+0x82>
 8007c3a:	3b08      	subs	r3, #8
 8007c3c:	eef0 7a47 	vmov.f32	s15, s14
 8007c40:	429c      	cmp	r4, r3
 8007c42:	ed61 7a01 	vstmdb	r1!, {s15}
 8007c46:	d9f0      	bls.n	8007c2a <forward_relu+0x9e>
 8007c48:	bc70      	pop	{r4, r5, r6}
 8007c4a:	4770      	bx	lr
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	deff      	udf	#255	; 0xff
 8007c50:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c58:	d11f      	bne.n	8007c9a <forward_relu+0x10e>
 8007c5a:	429c      	cmp	r4, r3
 8007c5c:	d8f4      	bhi.n	8007c48 <forward_relu+0xbc>
 8007c5e:	1b1c      	subs	r4, r3, r4
 8007c60:	f024 0403 	bic.w	r4, r4, #3
 8007c64:	1d1a      	adds	r2, r3, #4
 8007c66:	2500      	movs	r5, #0
 8007c68:	1b1b      	subs	r3, r3, r4
 8007c6a:	1d01      	adds	r1, r0, #4
 8007c6c:	ed72 7a01 	vldmdb	r2!, {s15}
 8007c70:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c78:	dc0a      	bgt.n	8007c90 <forward_relu+0x104>
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8007c80:	d0e2      	beq.n	8007c48 <forward_relu+0xbc>
 8007c82:	ed72 7a01 	vldmdb	r2!, {s15}
 8007c86:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8e:	ddf4      	ble.n	8007c7a <forward_relu+0xee>
 8007c90:	429a      	cmp	r2, r3
 8007c92:	ed61 7a01 	vstmdb	r1!, {s15}
 8007c96:	d1e9      	bne.n	8007c6c <forward_relu+0xe0>
 8007c98:	e7d6      	b.n	8007c48 <forward_relu+0xbc>
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	d8d4      	bhi.n	8007c48 <forward_relu+0xbc>
 8007c9e:	1b1c      	subs	r4, r3, r4
 8007ca0:	f024 0403 	bic.w	r4, r4, #3
 8007ca4:	1d1a      	adds	r2, r3, #4
 8007ca6:	1d01      	adds	r1, r0, #4
 8007ca8:	1b1b      	subs	r3, r3, r4
 8007caa:	ed72 7a01 	vldmdb	r2!, {s15}
 8007cae:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb6:	db0e      	blt.n	8007cd6 <forward_relu+0x14a>
 8007cb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007cc2:	ed61 7a01 	vstmdb	r1!, {s15}
 8007cc6:	d0bf      	beq.n	8007c48 <forward_relu+0xbc>
 8007cc8:	ed72 7a01 	vldmdb	r2!, {s15}
 8007ccc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd4:	daf0      	bge.n	8007cb8 <forward_relu+0x12c>
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	ed61 7a01 	vstmdb	r1!, {s15}
 8007cdc:	d1e5      	bne.n	8007caa <forward_relu+0x11e>
 8007cde:	e7b3      	b.n	8007c48 <forward_relu+0xbc>
 8007ce0:	6893      	ldr	r3, [r2, #8]
 8007ce2:	6989      	ldr	r1, [r1, #24]
 8007ce4:	6990      	ldr	r0, [r2, #24]
 8007ce6:	6889      	ldr	r1, [r1, #8]
 8007ce8:	6884      	ldr	r4, [r0, #8]
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	d075      	beq.n	8007dda <forward_relu+0x24e>
 8007cee:	68d5      	ldr	r5, [r2, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007cf6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007cfa:	429d      	cmp	r5, r3
 8007cfc:	fb00 f202 	mul.w	r2, r0, r2
 8007d00:	d1f9      	bne.n	8007cf6 <forward_relu+0x16a>
 8007d02:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8007d06:	3b01      	subs	r3, #1
 8007d08:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007d0c:	4294      	cmp	r4, r2
 8007d0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007d12:	d899      	bhi.n	8007c48 <forward_relu+0xbc>
 8007d14:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007df0 <forward_relu+0x264>
 8007d18:	3204      	adds	r2, #4
 8007d1a:	3104      	adds	r1, #4
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	ed72 7a01 	vldmdb	r2!, {s15}
 8007d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2a:	f1a3 0308 	sub.w	r3, r3, #8
 8007d2e:	bfb8      	it	lt
 8007d30:	eef0 7a47 	vmovlt.f32	s15, s14
 8007d34:	429c      	cmp	r4, r3
 8007d36:	ed61 7a01 	vstmdb	r1!, {s15}
 8007d3a:	d9ef      	bls.n	8007d1c <forward_relu+0x190>
 8007d3c:	bc70      	pop	{r4, r5, r6}
 8007d3e:	4770      	bx	lr
 8007d40:	688c      	ldr	r4, [r1, #8]
 8007d42:	6891      	ldr	r1, [r2, #8]
 8007d44:	6880      	ldr	r0, [r0, #8]
 8007d46:	0a09      	lsrs	r1, r1, #8
 8007d48:	d049      	beq.n	8007dde <forward_relu+0x252>
 8007d4a:	68d5      	ldr	r5, [r2, #12]
 8007d4c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8007d50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007d54:	42aa      	cmp	r2, r5
 8007d56:	fb01 f303 	mul.w	r3, r1, r3
 8007d5a:	d1f9      	bne.n	8007d50 <forward_relu+0x1c4>
 8007d5c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8007d60:	3a01      	subs	r2, #1
 8007d62:	68b1      	ldr	r1, [r6, #8]
 8007d64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	ed91 7a00 	vldr	s14, [r1]
 8007d6e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007d72:	f63f af69 	bhi.w	8007c48 <forward_relu+0xbc>
 8007d76:	2500      	movs	r5, #0
 8007d78:	3304      	adds	r3, #4
 8007d7a:	1d02      	adds	r2, r0, #4
 8007d7c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007d80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d88:	f1a3 0104 	sub.w	r1, r3, #4
 8007d8c:	f1a3 0308 	sub.w	r3, r3, #8
 8007d90:	d406      	bmi.n	8007da0 <forward_relu+0x214>
 8007d92:	429c      	cmp	r4, r3
 8007d94:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007d98:	f63f af56 	bhi.w	8007c48 <forward_relu+0xbc>
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	e7ed      	b.n	8007d7c <forward_relu+0x1f0>
 8007da0:	429c      	cmp	r4, r3
 8007da2:	ed62 7a01 	vstmdb	r2!, {s15}
 8007da6:	f63f af4f 	bhi.w	8007c48 <forward_relu+0xbc>
 8007daa:	460b      	mov	r3, r1
 8007dac:	e7e6      	b.n	8007d7c <forward_relu+0x1f0>
 8007dae:	68b3      	ldr	r3, [r6, #8]
 8007db0:	ed93 7a02 	vldr	s14, [r3, #8]
 8007db4:	edd3 6a00 	vldr	s13, [r3]
 8007db8:	ed93 6a01 	vldr	s12, [r3, #4]
 8007dbc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc4:	d401      	bmi.n	8007dca <forward_relu+0x23e>
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	e71e      	b.n	8007c08 <forward_relu+0x7c>
 8007dca:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	4623      	mov	r3, r4
 8007dd4:	f47f af63 	bne.w	8007c9e <forward_relu+0x112>
 8007dd8:	e741      	b.n	8007c5e <forward_relu+0xd2>
 8007dda:	4622      	mov	r2, r4
 8007ddc:	e79a      	b.n	8007d14 <forward_relu+0x188>
 8007dde:	68b2      	ldr	r2, [r6, #8]
 8007de0:	4623      	mov	r3, r4
 8007de2:	ed92 7a00 	vldr	s14, [r2]
 8007de6:	e7c6      	b.n	8007d76 <forward_relu+0x1ea>
 8007de8:	2300      	movs	r3, #0
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	deff      	udf	#255	; 0xff
 8007dee:	bf00      	nop
 8007df0:	00000000 	.word	0x00000000

08007df4 <ai_check_custom_types>:
 8007df4:	b082      	sub	sp, #8
 8007df6:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <ai_check_custom_types+0x50>)
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	b118      	cbz	r0, 8007e04 <ai_check_custom_types+0x10>
 8007dfc:	7803      	ldrb	r3, [r0, #0]
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d002      	beq.n	8007e08 <ai_check_custom_types+0x14>
 8007e02:	2000      	movs	r0, #0
 8007e04:	b002      	add	sp, #8
 8007e06:	4770      	bx	lr
 8007e08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d004      	beq.n	8007e1a <ai_check_custom_types+0x26>
 8007e10:	2001      	movs	r0, #1
 8007e12:	f080 0001 	eor.w	r0, r0, #1
 8007e16:	b002      	add	sp, #8
 8007e18:	4770      	bx	lr
 8007e1a:	7842      	ldrb	r2, [r0, #1]
 8007e1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	f100 0001 	add.w	r0, r0, #1
 8007e26:	d1f3      	bne.n	8007e10 <ai_check_custom_types+0x1c>
 8007e28:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007e2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d1ed      	bne.n	8007e10 <ai_check_custom_types+0x1c>
 8007e34:	7842      	ldrb	r2, [r0, #1]
 8007e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d1e8      	bne.n	8007e10 <ai_check_custom_types+0x1c>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e7e7      	b.n	8007e12 <ai_check_custom_types+0x1e>
 8007e42:	bf00      	nop
 8007e44:	84048403 	.word	0x84048403

08007e48 <ai_layers_init_all>:
 8007e48:	4601      	mov	r1, r0
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007e4e:	b143      	cbz	r3, 8007e62 <ai_layers_init_all+0x1a>
 8007e50:	691a      	ldr	r2, [r3, #16]
 8007e52:	60d9      	str	r1, [r3, #12]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	f100 0001 	add.w	r0, r0, #1
 8007e5a:	d002      	beq.n	8007e62 <ai_layers_init_all+0x1a>
 8007e5c:	b10a      	cbz	r2, 8007e62 <ai_layers_init_all+0x1a>
 8007e5e:	4613      	mov	r3, r2
 8007e60:	e7f5      	b.n	8007e4e <ai_layers_init_all+0x6>
 8007e62:	4770      	bx	lr

08007e64 <ai_layers_post_init_all>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007e68:	2500      	movs	r5, #0
 8007e6a:	b16c      	cbz	r4, 8007e88 <ai_layers_post_init_all+0x24>
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	07db      	lsls	r3, r3, #31
 8007e70:	d504      	bpl.n	8007e7c <ai_layers_post_init_all+0x18>
 8007e72:	6a23      	ldr	r3, [r4, #32]
 8007e74:	4620      	mov	r0, r4
 8007e76:	b10b      	cbz	r3, 8007e7c <ai_layers_post_init_all+0x18>
 8007e78:	4798      	blx	r3
 8007e7a:	3501      	adds	r5, #1
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	d002      	beq.n	8007e88 <ai_layers_post_init_all+0x24>
 8007e82:	b10b      	cbz	r3, 8007e88 <ai_layers_post_init_all+0x24>
 8007e84:	461c      	mov	r4, r3
 8007e86:	e7f0      	b.n	8007e6a <ai_layers_post_init_all+0x6>
 8007e88:	4628      	mov	r0, r5
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}

08007e8c <ai_layers_forward_all>:
 8007e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e90:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8007e94:	4604      	mov	r4, r0
 8007e96:	f1b8 0f00 	cmp.w	r8, #0
 8007e9a:	d02b      	beq.n	8007ef4 <ai_layers_forward_all+0x68>
 8007e9c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007e9e:	6381      	str	r1, [r0, #56]	; 0x38
 8007ea0:	b321      	cbz	r1, 8007eec <ai_layers_forward_all+0x60>
 8007ea2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	47c0      	blx	r8
 8007ea8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007eaa:	b1fe      	cbz	r6, 8007eec <ai_layers_forward_all+0x60>
 8007eac:	2700      	movs	r7, #0
 8007eae:	4631      	mov	r1, r6
 8007eb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007eb2:	2002      	movs	r0, #2
 8007eb4:	47c0      	blx	r8
 8007eb6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007eb8:	4628      	mov	r0, r5
 8007eba:	696b      	ldr	r3, [r5, #20]
 8007ebc:	4798      	blx	r3
 8007ebe:	692e      	ldr	r6, [r5, #16]
 8007ec0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ec2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ec4:	42b5      	cmp	r5, r6
 8007ec6:	f04f 0003 	mov.w	r0, #3
 8007eca:	d007      	beq.n	8007edc <ai_layers_forward_all+0x50>
 8007ecc:	47c0      	blx	r8
 8007ece:	3701      	adds	r7, #1
 8007ed0:	63a6      	str	r6, [r4, #56]	; 0x38
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	d1eb      	bne.n	8007eae <ai_layers_forward_all+0x22>
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007edc:	2003      	movs	r0, #3
 8007ede:	47c0      	blx	r8
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	3701      	adds	r7, #1
 8007ee4:	63a3      	str	r3, [r4, #56]	; 0x38
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eec:	2700      	movs	r7, #0
 8007eee:	4638      	mov	r0, r7
 8007ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007ef6:	6385      	str	r5, [r0, #56]	; 0x38
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	d0f7      	beq.n	8007eec <ai_layers_forward_all+0x60>
 8007efc:	4647      	mov	r7, r8
 8007efe:	696b      	ldr	r3, [r5, #20]
 8007f00:	4628      	mov	r0, r5
 8007f02:	4798      	blx	r3
 8007f04:	462b      	mov	r3, r5
 8007f06:	692d      	ldr	r5, [r5, #16]
 8007f08:	429d      	cmp	r5, r3
 8007f0a:	d004      	beq.n	8007f16 <ai_layers_forward_all+0x8a>
 8007f0c:	63a5      	str	r5, [r4, #56]	; 0x38
 8007f0e:	3701      	adds	r7, #1
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	d1f4      	bne.n	8007efe <ai_layers_forward_all+0x72>
 8007f14:	e7df      	b.n	8007ed6 <ai_layers_forward_all+0x4a>
 8007f16:	2300      	movs	r3, #0
 8007f18:	63a3      	str	r3, [r4, #56]	; 0x38
 8007f1a:	3701      	adds	r7, #1
 8007f1c:	e7db      	b.n	8007ed6 <ai_layers_forward_all+0x4a>
 8007f1e:	bf00      	nop

08007f20 <lite_dense_if32of32wf32>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8007f28:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8007f2c:	4287      	cmp	r7, r0
 8007f2e:	f240 8106 	bls.w	800813e <lite_dense_if32of32wf32+0x21e>
 8007f32:	f1a6 0810 	sub.w	r8, r6, #16
 8007f36:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007f3a:	f108 0801 	add.w	r8, r8, #1
 8007f3e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8007f42:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007f46:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	f006 0a0f 	and.w	sl, r6, #15
 8007f50:	2e0f      	cmp	r6, #15
 8007f52:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8008164 <lite_dense_if32of32wf32+0x244>
 8007f56:	f240 8101 	bls.w	800815c <lite_dense_if32of32wf32+0x23c>
 8007f5a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8007f5e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8007f62:	46b6      	mov	lr, r6
 8007f64:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8007f68:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8007f6c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8007f70:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8007f74:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8007f78:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8007f7c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8007f80:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8007f84:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8007f88:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8007f8c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8007f90:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8007f94:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8007f98:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007f9c:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8007fa0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007fa4:	f1ae 0e10 	sub.w	lr, lr, #16
 8007fa8:	f1be 0f0f 	cmp.w	lr, #15
 8007fac:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8007fb0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8007fb4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007fb8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8007fbc:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8007fc0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8007fc4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8007fc8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007fcc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8007fd0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8007fd4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007fd8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8007fdc:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8007fe0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007fe4:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8007fe8:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8007fec:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007ff0:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8007ff4:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8007ff8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007ffc:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008000:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008004:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008008:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800800c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8008010:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008014:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8008018:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800801c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008020:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008024:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008028:	eee4 7a24 	vfma.f32	s15, s8, s9
 800802c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008030:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008038:	d894      	bhi.n	8007f64 <lite_dense_if32of32wf32+0x44>
 800803a:	eb02 0e0b 	add.w	lr, r2, fp
 800803e:	4654      	mov	r4, sl
 8008040:	46c4      	mov	ip, r8
 8008042:	2c00      	cmp	r4, #0
 8008044:	d075      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008046:	eddc 6a00 	vldr	s13, [ip]
 800804a:	edde 7a00 	vldr	s15, [lr]
 800804e:	2c01      	cmp	r4, #1
 8008050:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008054:	d06d      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008056:	eddc 6a01 	vldr	s13, [ip, #4]
 800805a:	edde 7a01 	vldr	s15, [lr, #4]
 800805e:	2c02      	cmp	r4, #2
 8008060:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008064:	d065      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008066:	eddc 6a02 	vldr	s13, [ip, #8]
 800806a:	edde 7a02 	vldr	s15, [lr, #8]
 800806e:	2c03      	cmp	r4, #3
 8008070:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008074:	d05d      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008076:	eddc 6a03 	vldr	s13, [ip, #12]
 800807a:	edde 7a03 	vldr	s15, [lr, #12]
 800807e:	2c04      	cmp	r4, #4
 8008080:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008084:	d055      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008086:	eddc 6a04 	vldr	s13, [ip, #16]
 800808a:	edde 7a04 	vldr	s15, [lr, #16]
 800808e:	2c05      	cmp	r4, #5
 8008090:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008094:	d04d      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008096:	eddc 6a05 	vldr	s13, [ip, #20]
 800809a:	edde 7a05 	vldr	s15, [lr, #20]
 800809e:	2c06      	cmp	r4, #6
 80080a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080a4:	d045      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 80080a6:	eddc 6a06 	vldr	s13, [ip, #24]
 80080aa:	edde 7a06 	vldr	s15, [lr, #24]
 80080ae:	2c07      	cmp	r4, #7
 80080b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080b4:	d03d      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 80080b6:	eddc 6a07 	vldr	s13, [ip, #28]
 80080ba:	edde 7a07 	vldr	s15, [lr, #28]
 80080be:	2c08      	cmp	r4, #8
 80080c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080c4:	d035      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 80080c6:	eddc 6a08 	vldr	s13, [ip, #32]
 80080ca:	edde 7a08 	vldr	s15, [lr, #32]
 80080ce:	2c09      	cmp	r4, #9
 80080d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080d4:	d02d      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 80080d6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80080da:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80080de:	2c0a      	cmp	r4, #10
 80080e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080e4:	d025      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 80080e6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80080ea:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80080ee:	2c0b      	cmp	r4, #11
 80080f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080f4:	d01d      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 80080f6:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80080fa:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80080fe:	2c0c      	cmp	r4, #12
 8008100:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008104:	d015      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008106:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800810a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800810e:	3c0d      	subs	r4, #13
 8008110:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008114:	d00d      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008116:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800811a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800811e:	2c01      	cmp	r4, #1
 8008120:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008124:	d005      	beq.n	8008132 <lite_dense_if32of32wf32+0x212>
 8008126:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800812a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800812e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008132:	444a      	add	r2, r9
 8008134:	eca5 7a01 	vstmia	r5!, {s14}
 8008138:	42af      	cmp	r7, r5
 800813a:	f63f af09 	bhi.w	8007f50 <lite_dense_if32of32wf32+0x30>
 800813e:	b15b      	cbz	r3, 8008158 <lite_dense_if32of32wf32+0x238>
 8008140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008142:	b14a      	cbz	r2, 8008158 <lite_dense_if32of32wf32+0x238>
 8008144:	edd0 7a00 	vldr	s15, [r0]
 8008148:	ecb3 7a01 	vldmia	r3!, {s14}
 800814c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008150:	ece0 7a01 	vstmia	r0!, {s15}
 8008154:	4287      	cmp	r7, r0
 8008156:	d1f5      	bne.n	8008144 <lite_dense_if32of32wf32+0x224>
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	4634      	mov	r4, r6
 800815e:	4696      	mov	lr, r2
 8008160:	468c      	mov	ip, r1
 8008162:	e76e      	b.n	8008042 <lite_dense_if32of32wf32+0x122>
 8008164:	00000000 	.word	0x00000000

08008168 <ai_version_get>:
 8008168:	0212      	lsls	r2, r2, #8
 800816a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800816e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008172:	4770      	bx	lr

08008174 <get_tensor_byte_size>:
 8008174:	b410      	push	{r4}
 8008176:	6983      	ldr	r3, [r0, #24]
 8008178:	68c4      	ldr	r4, [r0, #12]
 800817a:	6941      	ldr	r1, [r0, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68e0      	ldr	r0, [r4, #12]
 8008180:	4a07      	ldr	r2, [pc, #28]	; (80081a0 <get_tensor_byte_size+0x2c>)
 8008182:	68c9      	ldr	r1, [r1, #12]
 8008184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008188:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800818c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008190:	fb01 f000 	mul.w	r0, r1, r0
 8008194:	4293      	cmp	r3, r2
 8008196:	bf04      	itt	eq
 8008198:	3007      	addeq	r0, #7
 800819a:	08c0      	lsreq	r0, r0, #3
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	000400c0 	.word	0x000400c0

080081a4 <ai_array_to_buffer_fmt>:
 80081a4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d050      	beq.n	800824e <ai_array_to_buffer_fmt+0xaa>
 80081ac:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <ai_array_to_buffer_fmt+0xb4>)
 80081ae:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d00b      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 80081b6:	dc1c      	bgt.n	80081f2 <ai_array_to_buffer_fmt+0x4e>
 80081b8:	4b28      	ldr	r3, [pc, #160]	; (800825c <ai_array_to_buffer_fmt+0xb8>)
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d007      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 80081be:	dd0b      	ble.n	80081d8 <ai_array_to_buffer_fmt+0x34>
 80081c0:	4b27      	ldr	r3, [pc, #156]	; (8008260 <ai_array_to_buffer_fmt+0xbc>)
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d003      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 80081c6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d131      	bne.n	8008232 <ai_array_to_buffer_fmt+0x8e>
 80081ce:	4613      	mov	r3, r2
 80081d0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80081d4:	4318      	orrs	r0, r3
 80081d6:	4770      	bx	lr
 80081d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80081dc:	429a      	cmp	r2, r3
 80081de:	d0f6      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 80081e0:	dd2c      	ble.n	800823c <ai_array_to_buffer_fmt+0x98>
 80081e2:	4b20      	ldr	r3, [pc, #128]	; (8008264 <ai_array_to_buffer_fmt+0xc0>)
 80081e4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80081e8:	429a      	cmp	r2, r3
 80081ea:	bf18      	it	ne
 80081ec:	2340      	movne	r3, #64	; 0x40
 80081ee:	4318      	orrs	r0, r3
 80081f0:	4770      	bx	lr
 80081f2:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <ai_array_to_buffer_fmt+0xc4>)
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d0ea      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 80081f8:	dd0e      	ble.n	8008218 <ai_array_to_buffer_fmt+0x74>
 80081fa:	4b1c      	ldr	r3, [pc, #112]	; (800826c <ai_array_to_buffer_fmt+0xc8>)
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d0e6      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 8008200:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008204:	429a      	cmp	r2, r3
 8008206:	d0e2      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 8008208:	4b19      	ldr	r3, [pc, #100]	; (8008270 <ai_array_to_buffer_fmt+0xcc>)
 800820a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800820e:	429a      	cmp	r2, r3
 8008210:	bf18      	it	ne
 8008212:	2340      	movne	r3, #64	; 0x40
 8008214:	4318      	orrs	r0, r3
 8008216:	4770      	bx	lr
 8008218:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800821c:	429a      	cmp	r2, r3
 800821e:	d0d6      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 8008220:	3307      	adds	r3, #7
 8008222:	429a      	cmp	r2, r3
 8008224:	d0d3      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 8008226:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800822a:	429a      	cmp	r2, r3
 800822c:	bf18      	it	ne
 800822e:	2340      	movne	r3, #64	; 0x40
 8008230:	e7ce      	b.n	80081d0 <ai_array_to_buffer_fmt+0x2c>
 8008232:	4b10      	ldr	r3, [pc, #64]	; (8008274 <ai_array_to_buffer_fmt+0xd0>)
 8008234:	429a      	cmp	r2, r3
 8008236:	bf18      	it	ne
 8008238:	2340      	movne	r3, #64	; 0x40
 800823a:	e7c9      	b.n	80081d0 <ai_array_to_buffer_fmt+0x2c>
 800823c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008240:	429a      	cmp	r2, r3
 8008242:	d0c4      	beq.n	80081ce <ai_array_to_buffer_fmt+0x2a>
 8008244:	3380      	adds	r3, #128	; 0x80
 8008246:	429a      	cmp	r2, r3
 8008248:	bf18      	it	ne
 800824a:	2340      	movne	r3, #64	; 0x40
 800824c:	e7c0      	b.n	80081d0 <ai_array_to_buffer_fmt+0x2c>
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <ai_array_to_buffer_fmt+0xd4>)
 8008250:	4003      	ands	r3, r0
 8008252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008256:	e7bb      	b.n	80081d0 <ai_array_to_buffer_fmt+0x2c>
 8008258:	00840040 	.word	0x00840040
 800825c:	00040840 	.word	0x00040840
 8008260:	00041040 	.word	0x00041040
 8008264:	00040447 	.word	0x00040447
 8008268:	00840840 	.word	0x00840840
 800826c:	00841040 	.word	0x00841040
 8008270:	0084084f 	.word	0x0084084f
 8008274:	0004084f 	.word	0x0004084f
 8008278:	00803fff 	.word	0x00803fff

0800827c <ai_array_get_byte_size>:
 800827c:	b319      	cbz	r1, 80082c6 <ai_array_get_byte_size+0x4a>
 800827e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008282:	fb03 f101 	mul.w	r1, r3, r1
 8008286:	3107      	adds	r1, #7
 8008288:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800828c:	f021 0307 	bic.w	r3, r1, #7
 8008290:	2a04      	cmp	r2, #4
 8008292:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8008296:	fa23 f101 	lsr.w	r1, r3, r1
 800829a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800829e:	d00b      	beq.n	80082b8 <ai_array_get_byte_size+0x3c>
 80082a0:	2a08      	cmp	r2, #8
 80082a2:	d002      	beq.n	80082aa <ai_array_get_byte_size+0x2e>
 80082a4:	3107      	adds	r1, #7
 80082a6:	08c8      	lsrs	r0, r1, #3
 80082a8:	4770      	bx	lr
 80082aa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80082ae:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80082b2:	3107      	adds	r1, #7
 80082b4:	08c8      	lsrs	r0, r1, #3
 80082b6:	4770      	bx	lr
 80082b8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80082bc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80082c0:	3107      	adds	r1, #7
 80082c2:	08c8      	lsrs	r0, r1, #3
 80082c4:	4770      	bx	lr
 80082c6:	4608      	mov	r0, r1
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop

080082cc <ai_array_get_data_byte_size>:
 80082cc:	b169      	cbz	r1, 80082ea <ai_array_get_data_byte_size+0x1e>
 80082ce:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80082d2:	fb02 f101 	mul.w	r1, r2, r1
 80082d6:	1dcb      	adds	r3, r1, #7
 80082d8:	f023 0307 	bic.w	r3, r3, #7
 80082dc:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80082e0:	fa23 f000 	lsr.w	r0, r3, r0
 80082e4:	3007      	adds	r0, #7
 80082e6:	08c0      	lsrs	r0, r0, #3
 80082e8:	4770      	bx	lr
 80082ea:	4608      	mov	r0, r1
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop

080082f0 <arm_max_f32>:
 80082f0:	f101 3cff 	add.w	ip, r1, #4294967295
 80082f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082f6:	4607      	mov	r7, r0
 80082f8:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80082fc:	ecf7 7a01 	vldmia	r7!, {s15}
 8008300:	d060      	beq.n	80083c4 <arm_max_f32+0xd4>
 8008302:	2400      	movs	r4, #0
 8008304:	3014      	adds	r0, #20
 8008306:	4625      	mov	r5, r4
 8008308:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800830c:	ed10 7a04 	vldr	s14, [r0, #-16]
 8008310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008318:	bf48      	it	mi
 800831a:	eef0 7a47 	vmovmi.f32	s15, s14
 800831e:	ed10 7a03 	vldr	s14, [r0, #-12]
 8008322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008326:	bf48      	it	mi
 8008328:	1c65      	addmi	r5, r4, #1
 800832a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832e:	bf48      	it	mi
 8008330:	eef0 7a47 	vmovmi.f32	s15, s14
 8008334:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800833c:	bf48      	it	mi
 800833e:	1ca5      	addmi	r5, r4, #2
 8008340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008344:	bf48      	it	mi
 8008346:	eef0 7a47 	vmovmi.f32	s15, s14
 800834a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800834e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008352:	bf48      	it	mi
 8008354:	1ce5      	addmi	r5, r4, #3
 8008356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835a:	f104 0404 	add.w	r4, r4, #4
 800835e:	bf44      	itt	mi
 8008360:	eef0 7a47 	vmovmi.f32	s15, s14
 8008364:	4625      	movmi	r5, r4
 8008366:	42a6      	cmp	r6, r4
 8008368:	f100 0010 	add.w	r0, r0, #16
 800836c:	d1ce      	bne.n	800830c <arm_max_f32+0x1c>
 800836e:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8008372:	f01c 0003 	ands.w	r0, ip, #3
 8008376:	d021      	beq.n	80083bc <arm_max_f32+0xcc>
 8008378:	ed97 7a00 	vldr	s14, [r7]
 800837c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008384:	bfc4      	itt	gt
 8008386:	eef0 7a47 	vmovgt.f32	s15, s14
 800838a:	1a0d      	subgt	r5, r1, r0
 800838c:	3801      	subs	r0, #1
 800838e:	d015      	beq.n	80083bc <arm_max_f32+0xcc>
 8008390:	ed97 7a01 	vldr	s14, [r7, #4]
 8008394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839c:	bf44      	itt	mi
 800839e:	eef0 7a47 	vmovmi.f32	s15, s14
 80083a2:	1a0d      	submi	r5, r1, r0
 80083a4:	2801      	cmp	r0, #1
 80083a6:	d009      	beq.n	80083bc <arm_max_f32+0xcc>
 80083a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80083ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b4:	bfc4      	itt	gt
 80083b6:	eef0 7a47 	vmovgt.f32	s15, s14
 80083ba:	4665      	movgt	r5, ip
 80083bc:	edc2 7a00 	vstr	s15, [r2]
 80083c0:	601d      	str	r5, [r3, #0]
 80083c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c4:	4675      	mov	r5, lr
 80083c6:	e7d4      	b.n	8008372 <arm_max_f32+0x82>

080083c8 <arm_rfft_32_fast_init_f32>:
 80083c8:	b178      	cbz	r0, 80083ea <arm_rfft_32_fast_init_f32+0x22>
 80083ca:	b430      	push	{r4, r5}
 80083cc:	4908      	ldr	r1, [pc, #32]	; (80083f0 <arm_rfft_32_fast_init_f32+0x28>)
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <arm_rfft_32_fast_init_f32+0x2c>)
 80083d0:	2310      	movs	r3, #16
 80083d2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80083d6:	8003      	strh	r3, [r0, #0]
 80083d8:	2520      	movs	r5, #32
 80083da:	2414      	movs	r4, #20
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <arm_rfft_32_fast_init_f32+0x30>)
 80083de:	8205      	strh	r5, [r0, #16]
 80083e0:	8184      	strh	r4, [r0, #12]
 80083e2:	6143      	str	r3, [r0, #20]
 80083e4:	bc30      	pop	{r4, r5}
 80083e6:	2000      	movs	r0, #0
 80083e8:	4770      	bx	lr
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	4770      	bx	lr
 80083f0:	0800da38 	.word	0x0800da38
 80083f4:	08012b70 	.word	0x08012b70
 80083f8:	080238f0 	.word	0x080238f0

080083fc <arm_rfft_64_fast_init_f32>:
 80083fc:	b178      	cbz	r0, 800841e <arm_rfft_64_fast_init_f32+0x22>
 80083fe:	b430      	push	{r4, r5}
 8008400:	4908      	ldr	r1, [pc, #32]	; (8008424 <arm_rfft_64_fast_init_f32+0x28>)
 8008402:	4a09      	ldr	r2, [pc, #36]	; (8008428 <arm_rfft_64_fast_init_f32+0x2c>)
 8008404:	2320      	movs	r3, #32
 8008406:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800840a:	8003      	strh	r3, [r0, #0]
 800840c:	2540      	movs	r5, #64	; 0x40
 800840e:	2430      	movs	r4, #48	; 0x30
 8008410:	4b06      	ldr	r3, [pc, #24]	; (800842c <arm_rfft_64_fast_init_f32+0x30>)
 8008412:	8205      	strh	r5, [r0, #16]
 8008414:	8184      	strh	r4, [r0, #12]
 8008416:	6143      	str	r3, [r0, #20]
 8008418:	bc30      	pop	{r4, r5}
 800841a:	2000      	movs	r0, #0
 800841c:	4770      	bx	lr
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	4770      	bx	lr
 8008424:	0800fb90 	.word	0x0800fb90
 8008428:	080173f0 	.word	0x080173f0
 800842c:	08028170 	.word	0x08028170

08008430 <arm_rfft_256_fast_init_f32>:
 8008430:	b180      	cbz	r0, 8008454 <arm_rfft_256_fast_init_f32+0x24>
 8008432:	b430      	push	{r4, r5}
 8008434:	4909      	ldr	r1, [pc, #36]	; (800845c <arm_rfft_256_fast_init_f32+0x2c>)
 8008436:	4a0a      	ldr	r2, [pc, #40]	; (8008460 <arm_rfft_256_fast_init_f32+0x30>)
 8008438:	2380      	movs	r3, #128	; 0x80
 800843a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800843e:	8003      	strh	r3, [r0, #0]
 8008440:	f44f 7580 	mov.w	r5, #256	; 0x100
 8008444:	24d0      	movs	r4, #208	; 0xd0
 8008446:	4b07      	ldr	r3, [pc, #28]	; (8008464 <arm_rfft_256_fast_init_f32+0x34>)
 8008448:	8205      	strh	r5, [r0, #16]
 800844a:	8184      	strh	r4, [r0, #12]
 800844c:	6143      	str	r3, [r0, #20]
 800844e:	bc30      	pop	{r4, r5}
 8008450:	2000      	movs	r0, #0
 8008452:	4770      	bx	lr
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	0800d898 	.word	0x0800d898
 8008460:	08012770 	.word	0x08012770
 8008464:	080234f0 	.word	0x080234f0

08008468 <arm_rfft_512_fast_init_f32>:
 8008468:	b190      	cbz	r0, 8008490 <arm_rfft_512_fast_init_f32+0x28>
 800846a:	b430      	push	{r4, r5}
 800846c:	490a      	ldr	r1, [pc, #40]	; (8008498 <arm_rfft_512_fast_init_f32+0x30>)
 800846e:	4a0b      	ldr	r2, [pc, #44]	; (800849c <arm_rfft_512_fast_init_f32+0x34>)
 8008470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008474:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008478:	8003      	strh	r3, [r0, #0]
 800847a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800847e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <arm_rfft_512_fast_init_f32+0x38>)
 8008484:	8205      	strh	r5, [r0, #16]
 8008486:	8184      	strh	r4, [r0, #12]
 8008488:	6143      	str	r3, [r0, #20]
 800848a:	bc30      	pop	{r4, r5}
 800848c:	2000      	movs	r0, #0
 800848e:	4770      	bx	lr
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	0800f820 	.word	0x0800f820
 800849c:	08016bf0 	.word	0x08016bf0
 80084a0:	08027970 	.word	0x08027970

080084a4 <arm_rfft_1024_fast_init_f32>:
 80084a4:	b190      	cbz	r0, 80084cc <arm_rfft_1024_fast_init_f32+0x28>
 80084a6:	b430      	push	{r4, r5}
 80084a8:	490a      	ldr	r1, [pc, #40]	; (80084d4 <arm_rfft_1024_fast_init_f32+0x30>)
 80084aa:	4a0b      	ldr	r2, [pc, #44]	; (80084d8 <arm_rfft_1024_fast_init_f32+0x34>)
 80084ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084b0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80084b4:	8003      	strh	r3, [r0, #0]
 80084b6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80084ba:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80084be:	4b07      	ldr	r3, [pc, #28]	; (80084dc <arm_rfft_1024_fast_init_f32+0x38>)
 80084c0:	8205      	strh	r5, [r0, #16]
 80084c2:	8184      	strh	r4, [r0, #12]
 80084c4:	6143      	str	r3, [r0, #20]
 80084c6:	bc30      	pop	{r4, r5}
 80084c8:	2000      	movs	r0, #0
 80084ca:	4770      	bx	lr
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	0800fbf0 	.word	0x0800fbf0
 80084d8:	0801f4f0 	.word	0x0801f4f0
 80084dc:	080204f0 	.word	0x080204f0

080084e0 <arm_rfft_2048_fast_init_f32>:
 80084e0:	b190      	cbz	r0, 8008508 <arm_rfft_2048_fast_init_f32+0x28>
 80084e2:	b430      	push	{r4, r5}
 80084e4:	490a      	ldr	r1, [pc, #40]	; (8008510 <arm_rfft_2048_fast_init_f32+0x30>)
 80084e6:	4a0b      	ldr	r2, [pc, #44]	; (8008514 <arm_rfft_2048_fast_init_f32+0x34>)
 80084e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ec:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80084f0:	8003      	strh	r3, [r0, #0]
 80084f2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80084f6:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <arm_rfft_2048_fast_init_f32+0x38>)
 80084fc:	8205      	strh	r5, [r0, #16]
 80084fe:	8184      	strh	r4, [r0, #12]
 8008500:	6143      	str	r3, [r0, #20]
 8008502:	bc30      	pop	{r4, r5}
 8008504:	2000      	movs	r0, #0
 8008506:	4770      	bx	lr
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	0800ca88 	.word	0x0800ca88
 8008514:	08010770 	.word	0x08010770
 8008518:	080214f0 	.word	0x080214f0

0800851c <arm_rfft_4096_fast_init_f32>:
 800851c:	b190      	cbz	r0, 8008544 <arm_rfft_4096_fast_init_f32+0x28>
 800851e:	b430      	push	{r4, r5}
 8008520:	490a      	ldr	r1, [pc, #40]	; (800854c <arm_rfft_4096_fast_init_f32+0x30>)
 8008522:	4a0b      	ldr	r2, [pc, #44]	; (8008550 <arm_rfft_4096_fast_init_f32+0x34>)
 8008524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008528:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800852c:	8003      	strh	r3, [r0, #0]
 800852e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008532:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <arm_rfft_4096_fast_init_f32+0x38>)
 8008538:	8205      	strh	r5, [r0, #16]
 800853a:	8184      	strh	r4, [r0, #12]
 800853c:	6143      	str	r3, [r0, #20]
 800853e:	bc30      	pop	{r4, r5}
 8008540:	2000      	movs	r0, #0
 8008542:	4770      	bx	lr
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	0800da60 	.word	0x0800da60
 8008550:	08012bf0 	.word	0x08012bf0
 8008554:	08023970 	.word	0x08023970

08008558 <arm_rfft_fast_init_f32>:
 8008558:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800855c:	d01f      	beq.n	800859e <arm_rfft_fast_init_f32+0x46>
 800855e:	d90b      	bls.n	8008578 <arm_rfft_fast_init_f32+0x20>
 8008560:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8008564:	d019      	beq.n	800859a <arm_rfft_fast_init_f32+0x42>
 8008566:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800856a:	d012      	beq.n	8008592 <arm_rfft_fast_init_f32+0x3a>
 800856c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008570:	d00d      	beq.n	800858e <arm_rfft_fast_init_f32+0x36>
 8008572:	f04f 30ff 	mov.w	r0, #4294967295
 8008576:	4770      	bx	lr
 8008578:	2940      	cmp	r1, #64	; 0x40
 800857a:	d00c      	beq.n	8008596 <arm_rfft_fast_init_f32+0x3e>
 800857c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008580:	d003      	beq.n	800858a <arm_rfft_fast_init_f32+0x32>
 8008582:	2920      	cmp	r1, #32
 8008584:	d1f5      	bne.n	8008572 <arm_rfft_fast_init_f32+0x1a>
 8008586:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <arm_rfft_fast_init_f32+0x4c>)
 8008588:	4718      	bx	r3
 800858a:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <arm_rfft_fast_init_f32+0x50>)
 800858c:	4718      	bx	r3
 800858e:	4b07      	ldr	r3, [pc, #28]	; (80085ac <arm_rfft_fast_init_f32+0x54>)
 8008590:	4718      	bx	r3
 8008592:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <arm_rfft_fast_init_f32+0x58>)
 8008594:	4718      	bx	r3
 8008596:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <arm_rfft_fast_init_f32+0x5c>)
 8008598:	e7f6      	b.n	8008588 <arm_rfft_fast_init_f32+0x30>
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <arm_rfft_fast_init_f32+0x60>)
 800859c:	e7f4      	b.n	8008588 <arm_rfft_fast_init_f32+0x30>
 800859e:	4b07      	ldr	r3, [pc, #28]	; (80085bc <arm_rfft_fast_init_f32+0x64>)
 80085a0:	e7f2      	b.n	8008588 <arm_rfft_fast_init_f32+0x30>
 80085a2:	bf00      	nop
 80085a4:	080083c9 	.word	0x080083c9
 80085a8:	08008431 	.word	0x08008431
 80085ac:	080084a5 	.word	0x080084a5
 80085b0:	0800851d 	.word	0x0800851d
 80085b4:	080083fd 	.word	0x080083fd
 80085b8:	080084e1 	.word	0x080084e1
 80085bc:	08008469 	.word	0x08008469

080085c0 <stage_rfft_f32>:
 80085c0:	b410      	push	{r4}
 80085c2:	edd1 7a00 	vldr	s15, [r1]
 80085c6:	ed91 7a01 	vldr	s14, [r1, #4]
 80085ca:	8804      	ldrh	r4, [r0, #0]
 80085cc:	6940      	ldr	r0, [r0, #20]
 80085ce:	ee37 7a07 	vadd.f32	s14, s14, s14
 80085d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80085d6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80085da:	ee77 6a87 	vadd.f32	s13, s15, s14
 80085de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085e2:	3c01      	subs	r4, #1
 80085e4:	ee26 7a84 	vmul.f32	s14, s13, s8
 80085e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80085ec:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80085f0:	ed82 7a00 	vstr	s14, [r2]
 80085f4:	edc2 7a01 	vstr	s15, [r2, #4]
 80085f8:	3010      	adds	r0, #16
 80085fa:	3210      	adds	r2, #16
 80085fc:	3b08      	subs	r3, #8
 80085fe:	3110      	adds	r1, #16
 8008600:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008604:	ed93 7a02 	vldr	s14, [r3, #8]
 8008608:	ed50 6a02 	vldr	s13, [r0, #-8]
 800860c:	edd3 4a03 	vldr	s9, [r3, #12]
 8008610:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008614:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008618:	ee77 5a45 	vsub.f32	s11, s14, s10
 800861c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008620:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008624:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008628:	ee66 5a25 	vmul.f32	s11, s12, s11
 800862c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008630:	ee37 7a23 	vadd.f32	s14, s14, s7
 8008634:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008638:	ee26 6a05 	vmul.f32	s12, s12, s10
 800863c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008640:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008644:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008648:	ee27 7a04 	vmul.f32	s14, s14, s8
 800864c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008650:	3c01      	subs	r4, #1
 8008652:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008656:	ed42 7a01 	vstr	s15, [r2, #-4]
 800865a:	f1a3 0308 	sub.w	r3, r3, #8
 800865e:	f101 0108 	add.w	r1, r1, #8
 8008662:	f100 0008 	add.w	r0, r0, #8
 8008666:	f102 0208 	add.w	r2, r2, #8
 800866a:	d1c9      	bne.n	8008600 <stage_rfft_f32+0x40>
 800866c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop

08008674 <merge_rfft_f32>:
 8008674:	b410      	push	{r4}
 8008676:	edd1 7a00 	vldr	s15, [r1]
 800867a:	edd1 6a01 	vldr	s13, [r1, #4]
 800867e:	8804      	ldrh	r4, [r0, #0]
 8008680:	6940      	ldr	r0, [r0, #20]
 8008682:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008686:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800868a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800868e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008692:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008696:	3c01      	subs	r4, #1
 8008698:	ed82 7a00 	vstr	s14, [r2]
 800869c:	edc2 7a01 	vstr	s15, [r2, #4]
 80086a0:	b3dc      	cbz	r4, 800871a <merge_rfft_f32+0xa6>
 80086a2:	00e3      	lsls	r3, r4, #3
 80086a4:	3b08      	subs	r3, #8
 80086a6:	440b      	add	r3, r1
 80086a8:	3010      	adds	r0, #16
 80086aa:	3210      	adds	r2, #16
 80086ac:	3110      	adds	r1, #16
 80086ae:	ed11 5a02 	vldr	s10, [r1, #-8]
 80086b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80086b6:	ed50 6a02 	vldr	s13, [r0, #-8]
 80086ba:	edd3 4a03 	vldr	s9, [r3, #12]
 80086be:	ed51 7a01 	vldr	s15, [r1, #-4]
 80086c2:	ed10 6a01 	vldr	s12, [r0, #-4]
 80086c6:	ee75 5a47 	vsub.f32	s11, s10, s14
 80086ca:	ee37 7a05 	vadd.f32	s14, s14, s10
 80086ce:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80086d2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80086d6:	ee66 5a25 	vmul.f32	s11, s12, s11
 80086da:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80086de:	ee37 7a63 	vsub.f32	s14, s14, s7
 80086e2:	ee66 6a85 	vmul.f32	s13, s13, s10
 80086e6:	ee26 6a05 	vmul.f32	s12, s12, s10
 80086ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80086ee:	ee37 7a46 	vsub.f32	s14, s14, s12
 80086f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80086f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80086fa:	ee67 7a84 	vmul.f32	s15, s15, s8
 80086fe:	3c01      	subs	r4, #1
 8008700:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008704:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008708:	f1a3 0308 	sub.w	r3, r3, #8
 800870c:	f101 0108 	add.w	r1, r1, #8
 8008710:	f100 0008 	add.w	r0, r0, #8
 8008714:	f102 0208 	add.w	r2, r2, #8
 8008718:	d1c9      	bne.n	80086ae <merge_rfft_f32+0x3a>
 800871a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800871e:	4770      	bx	lr

08008720 <arm_rfft_fast_f32>:
 8008720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	8a05      	ldrh	r5, [r0, #16]
 8008726:	086d      	lsrs	r5, r5, #1
 8008728:	8005      	strh	r5, [r0, #0]
 800872a:	4604      	mov	r4, r0
 800872c:	4616      	mov	r6, r2
 800872e:	461d      	mov	r5, r3
 8008730:	b14b      	cbz	r3, 8008746 <arm_rfft_fast_f32+0x26>
 8008732:	f7ff ff9f 	bl	8008674 <merge_rfft_f32>
 8008736:	462a      	mov	r2, r5
 8008738:	4631      	mov	r1, r6
 800873a:	4620      	mov	r0, r4
 800873c:	2301      	movs	r3, #1
 800873e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008742:	f000 bb33 	b.w	8008dac <arm_cfft_f32>
 8008746:	460f      	mov	r7, r1
 8008748:	461a      	mov	r2, r3
 800874a:	2301      	movs	r3, #1
 800874c:	f000 fb2e 	bl	8008dac <arm_cfft_f32>
 8008750:	4632      	mov	r2, r6
 8008752:	4639      	mov	r1, r7
 8008754:	4620      	mov	r0, r4
 8008756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800875a:	f7ff bf31 	b.w	80085c0 <stage_rfft_f32>
 800875e:	bf00      	nop

08008760 <arm_cfft_radix8by2_f32>:
 8008760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008764:	ed2d 8b08 	vpush	{d8-d11}
 8008768:	4607      	mov	r7, r0
 800876a:	4608      	mov	r0, r1
 800876c:	f8b7 c000 	ldrh.w	ip, [r7]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8008776:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800877a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800877e:	f000 80b0 	beq.w	80088e2 <arm_cfft_radix8by2_f32+0x182>
 8008782:	008c      	lsls	r4, r1, #2
 8008784:	3410      	adds	r4, #16
 8008786:	f100 0310 	add.w	r3, r0, #16
 800878a:	1906      	adds	r6, r0, r4
 800878c:	3210      	adds	r2, #16
 800878e:	4444      	add	r4, r8
 8008790:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8008794:	f108 0510 	add.w	r5, r8, #16
 8008798:	ed15 2a04 	vldr	s4, [r5, #-16]
 800879c:	ed55 2a03 	vldr	s5, [r5, #-12]
 80087a0:	ed54 4a04 	vldr	s9, [r4, #-16]
 80087a4:	ed14 4a03 	vldr	s8, [r4, #-12]
 80087a8:	ed14 6a02 	vldr	s12, [r4, #-8]
 80087ac:	ed54 5a01 	vldr	s11, [r4, #-4]
 80087b0:	ed53 3a04 	vldr	s7, [r3, #-16]
 80087b4:	ed15 0a02 	vldr	s0, [r5, #-8]
 80087b8:	ed55 0a01 	vldr	s1, [r5, #-4]
 80087bc:	ed56 6a04 	vldr	s13, [r6, #-16]
 80087c0:	ed16 3a03 	vldr	s6, [r6, #-12]
 80087c4:	ed13 7a03 	vldr	s14, [r3, #-12]
 80087c8:	ed13 5a02 	vldr	s10, [r3, #-8]
 80087cc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80087d0:	ed16 1a02 	vldr	s2, [r6, #-8]
 80087d4:	ed56 1a01 	vldr	s3, [r6, #-4]
 80087d8:	ee73 ba82 	vadd.f32	s23, s7, s4
 80087dc:	ee37 ba22 	vadd.f32	s22, s14, s5
 80087e0:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80087e4:	ee33 9a04 	vadd.f32	s18, s6, s8
 80087e8:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80087ec:	ee75 aa00 	vadd.f32	s21, s10, s0
 80087f0:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80087f4:	ee71 8a06 	vadd.f32	s17, s2, s12
 80087f8:	ed43 ba04 	vstr	s23, [r3, #-16]
 80087fc:	ed03 ba03 	vstr	s22, [r3, #-12]
 8008800:	ed43 aa02 	vstr	s21, [r3, #-8]
 8008804:	ed03 aa01 	vstr	s20, [r3, #-4]
 8008808:	ed06 8a01 	vstr	s16, [r6, #-4]
 800880c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008810:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008814:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008818:	ee37 7a62 	vsub.f32	s14, s14, s5
 800881c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8008820:	ee34 4a43 	vsub.f32	s8, s8, s6
 8008824:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008828:	ed12 3a04 	vldr	s6, [r2, #-16]
 800882c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008830:	ee27 8a26 	vmul.f32	s16, s14, s13
 8008834:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8008838:	ee23 2a83 	vmul.f32	s4, s7, s6
 800883c:	ee64 4a83 	vmul.f32	s9, s9, s6
 8008840:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8008844:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008848:	ee64 6a26 	vmul.f32	s13, s8, s13
 800884c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8008850:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008854:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008858:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800885c:	ee32 3a08 	vadd.f32	s6, s4, s16
 8008860:	ed05 7a03 	vstr	s14, [r5, #-12]
 8008864:	ed05 3a04 	vstr	s6, [r5, #-16]
 8008868:	ed04 4a04 	vstr	s8, [r4, #-16]
 800886c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008870:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008874:	ee76 6a41 	vsub.f32	s13, s12, s2
 8008878:	ee35 5a40 	vsub.f32	s10, s10, s0
 800887c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8008880:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008884:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008888:	ee67 3a87 	vmul.f32	s7, s15, s14
 800888c:	ee66 4a87 	vmul.f32	s9, s13, s14
 8008890:	ee25 4a25 	vmul.f32	s8, s10, s11
 8008894:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008898:	ee25 5a07 	vmul.f32	s10, s10, s14
 800889c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80088a0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80088a4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80088a8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80088ac:	ee74 5a23 	vadd.f32	s11, s8, s7
 80088b0:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80088b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80088b8:	3310      	adds	r3, #16
 80088ba:	4563      	cmp	r3, ip
 80088bc:	ed45 5a02 	vstr	s11, [r5, #-8]
 80088c0:	f106 0610 	add.w	r6, r6, #16
 80088c4:	ed45 7a01 	vstr	s15, [r5, #-4]
 80088c8:	f102 0210 	add.w	r2, r2, #16
 80088cc:	ed04 6a02 	vstr	s12, [r4, #-8]
 80088d0:	ed04 7a01 	vstr	s14, [r4, #-4]
 80088d4:	f105 0510 	add.w	r5, r5, #16
 80088d8:	f104 0410 	add.w	r4, r4, #16
 80088dc:	f47f af5c 	bne.w	8008798 <arm_cfft_radix8by2_f32+0x38>
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	b28c      	uxth	r4, r1
 80088e4:	4621      	mov	r1, r4
 80088e6:	2302      	movs	r3, #2
 80088e8:	f000 fc7a 	bl	80091e0 <arm_radix8_butterfly_f32>
 80088ec:	ecbd 8b08 	vpop	{d8-d11}
 80088f0:	4621      	mov	r1, r4
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	4640      	mov	r0, r8
 80088f6:	2302      	movs	r3, #2
 80088f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	f000 bc70 	b.w	80091e0 <arm_radix8_butterfly_f32>

08008900 <arm_cfft_radix8by4_f32>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	ed2d 8b0a 	vpush	{d8-d12}
 8008908:	b08d      	sub	sp, #52	; 0x34
 800890a:	460d      	mov	r5, r1
 800890c:	910b      	str	r1, [sp, #44]	; 0x2c
 800890e:	8801      	ldrh	r1, [r0, #0]
 8008910:	6842      	ldr	r2, [r0, #4]
 8008912:	900a      	str	r0, [sp, #40]	; 0x28
 8008914:	0849      	lsrs	r1, r1, #1
 8008916:	008b      	lsls	r3, r1, #2
 8008918:	18ee      	adds	r6, r5, r3
 800891a:	18f0      	adds	r0, r6, r3
 800891c:	edd0 5a00 	vldr	s11, [r0]
 8008920:	edd5 7a00 	vldr	s15, [r5]
 8008924:	ed96 7a00 	vldr	s14, [r6]
 8008928:	edd0 3a01 	vldr	s7, [r0, #4]
 800892c:	ed96 4a01 	vldr	s8, [r6, #4]
 8008930:	ed95 5a01 	vldr	s10, [r5, #4]
 8008934:	9008      	str	r0, [sp, #32]
 8008936:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800893a:	18c7      	adds	r7, r0, r3
 800893c:	edd7 4a00 	vldr	s9, [r7]
 8008940:	ed97 3a01 	vldr	s6, [r7, #4]
 8008944:	9701      	str	r7, [sp, #4]
 8008946:	ee77 6a06 	vadd.f32	s13, s14, s12
 800894a:	462c      	mov	r4, r5
 800894c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008950:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008954:	ee16 ca90 	vmov	ip, s13
 8008958:	f844 cb08 	str.w	ip, [r4], #8
 800895c:	ee75 6a23 	vadd.f32	s13, s10, s7
 8008960:	edd6 5a01 	vldr	s11, [r6, #4]
 8008964:	edd7 2a01 	vldr	s5, [r7, #4]
 8008968:	9404      	str	r4, [sp, #16]
 800896a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800896e:	ee74 3a27 	vadd.f32	s7, s8, s15
 8008972:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008976:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800897a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800897e:	0849      	lsrs	r1, r1, #1
 8008980:	f102 0e08 	add.w	lr, r2, #8
 8008984:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008988:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800898c:	9109      	str	r1, [sp, #36]	; 0x24
 800898e:	ee35 4a47 	vsub.f32	s8, s10, s14
 8008992:	f1a1 0902 	sub.w	r9, r1, #2
 8008996:	f8cd e00c 	str.w	lr, [sp, #12]
 800899a:	4631      	mov	r1, r6
 800899c:	ee13 ea90 	vmov	lr, s7
 80089a0:	ee36 6a64 	vsub.f32	s12, s12, s9
 80089a4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80089a8:	4604      	mov	r4, r0
 80089aa:	edc5 5a01 	vstr	s11, [r5, #4]
 80089ae:	ee37 7a05 	vadd.f32	s14, s14, s10
 80089b2:	f841 eb08 	str.w	lr, [r1], #8
 80089b6:	ee34 5a24 	vadd.f32	s10, s8, s9
 80089ba:	ee16 ea10 	vmov	lr, s12
 80089be:	ed86 5a01 	vstr	s10, [r6, #4]
 80089c2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80089c6:	f844 eb08 	str.w	lr, [r4], #8
 80089ca:	ee77 7a83 	vadd.f32	s15, s15, s6
 80089ce:	edc0 6a01 	vstr	s13, [r0, #4]
 80089d2:	9405      	str	r4, [sp, #20]
 80089d4:	4604      	mov	r4, r0
 80089d6:	ee17 0a90 	vmov	r0, s15
 80089da:	9106      	str	r1, [sp, #24]
 80089dc:	ee37 7a64 	vsub.f32	s14, s14, s9
 80089e0:	f102 0110 	add.w	r1, r2, #16
 80089e4:	46bc      	mov	ip, r7
 80089e6:	9100      	str	r1, [sp, #0]
 80089e8:	f847 0b08 	str.w	r0, [r7], #8
 80089ec:	f102 0118 	add.w	r1, r2, #24
 80089f0:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80089f4:	9102      	str	r1, [sp, #8]
 80089f6:	ed8c 7a01 	vstr	s14, [ip, #4]
 80089fa:	9007      	str	r0, [sp, #28]
 80089fc:	f000 8134 	beq.w	8008c68 <arm_cfft_radix8by4_f32+0x368>
 8008a00:	f102 0920 	add.w	r9, r2, #32
 8008a04:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8008a08:	9a01      	ldr	r2, [sp, #4]
 8008a0a:	f8dd a000 	ldr.w	sl, [sp]
 8008a0e:	3b0c      	subs	r3, #12
 8008a10:	4683      	mov	fp, r0
 8008a12:	4463      	add	r3, ip
 8008a14:	f105 0e10 	add.w	lr, r5, #16
 8008a18:	f1a4 010c 	sub.w	r1, r4, #12
 8008a1c:	f104 0510 	add.w	r5, r4, #16
 8008a20:	f1a6 0c0c 	sub.w	ip, r6, #12
 8008a24:	f1a2 040c 	sub.w	r4, r2, #12
 8008a28:	f106 0010 	add.w	r0, r6, #16
 8008a2c:	3210      	adds	r2, #16
 8008a2e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8008a32:	ed55 5a02 	vldr	s11, [r5, #-8]
 8008a36:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008a3a:	ed52 1a02 	vldr	s3, [r2, #-8]
 8008a3e:	ed55 6a01 	vldr	s13, [r5, #-4]
 8008a42:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8008a46:	ed12 1a01 	vldr	s2, [r2, #-4]
 8008a4a:	ed10 8a01 	vldr	s16, [r0, #-4]
 8008a4e:	ee35 4a25 	vadd.f32	s8, s10, s11
 8008a52:	ee30 6a26 	vadd.f32	s12, s0, s13
 8008a56:	ee37 7a84 	vadd.f32	s14, s15, s8
 8008a5a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008a5e:	ee37 7a21 	vadd.f32	s14, s14, s3
 8008a62:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008a66:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8008a6a:	ed10 7a01 	vldr	s14, [r0, #-4]
 8008a6e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008a72:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008a76:	ee78 aa25 	vadd.f32	s21, s16, s11
 8008a7a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008a7e:	ee70 3a67 	vsub.f32	s7, s0, s15
 8008a82:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8008a86:	ed94 7a02 	vldr	s14, [r4, #8]
 8008a8a:	ed9c 2a02 	vldr	s4, [ip, #8]
 8008a8e:	ed91 ba02 	vldr	s22, [r1, #8]
 8008a92:	edd3 9a02 	vldr	s19, [r3, #8]
 8008a96:	edd4 2a01 	vldr	s5, [r4, #4]
 8008a9a:	ed9c 9a01 	vldr	s18, [ip, #4]
 8008a9e:	ed93 5a01 	vldr	s10, [r3, #4]
 8008aa2:	edd1 0a01 	vldr	s1, [r1, #4]
 8008aa6:	ee72 6a07 	vadd.f32	s13, s4, s14
 8008aaa:	ee32 2a47 	vsub.f32	s4, s4, s14
 8008aae:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8008ab2:	ee79 4a22 	vadd.f32	s9, s18, s5
 8008ab6:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8008aba:	ee79 2a62 	vsub.f32	s5, s18, s5
 8008abe:	ed8c 7a02 	vstr	s14, [ip, #8]
 8008ac2:	ed91 7a01 	vldr	s14, [r1, #4]
 8008ac6:	edd3 8a01 	vldr	s17, [r3, #4]
 8008aca:	ee34 7a87 	vadd.f32	s14, s9, s14
 8008ace:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8008ad2:	ee37 7a28 	vadd.f32	s14, s14, s17
 8008ad6:	ee32 9a60 	vsub.f32	s18, s4, s1
 8008ada:	ed8c 7a01 	vstr	s14, [ip, #4]
 8008ade:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8008ae2:	ed1a aa02 	vldr	s20, [sl, #-8]
 8008ae6:	ee73 8a22 	vadd.f32	s17, s6, s5
 8008aea:	ee39 9a05 	vadd.f32	s18, s18, s10
 8008aee:	ee7a aac1 	vsub.f32	s21, s21, s2
 8008af2:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8008af6:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8008afa:	ee69 ba07 	vmul.f32	s23, s18, s14
 8008afe:	ee6a aa87 	vmul.f32	s21, s21, s14
 8008b02:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008b06:	ee63 ca87 	vmul.f32	s25, s7, s14
 8008b0a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8008b0e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8008b12:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008b16:	ee73 3aea 	vsub.f32	s7, s7, s21
 8008b1a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008b1e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8008b22:	ee3b aaca 	vsub.f32	s20, s23, s20
 8008b26:	ee34 4a67 	vsub.f32	s8, s8, s15
 8008b2a:	ee76 6acb 	vsub.f32	s13, s13, s22
 8008b2e:	ee36 6a48 	vsub.f32	s12, s12, s16
 8008b32:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8008b36:	ed00 7a02 	vstr	s14, [r0, #-8]
 8008b3a:	ed40 3a01 	vstr	s7, [r0, #-4]
 8008b3e:	edc1 8a01 	vstr	s17, [r1, #4]
 8008b42:	ed81 aa02 	vstr	s20, [r1, #8]
 8008b46:	ed59 3a04 	vldr	s7, [r9, #-16]
 8008b4a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8008b4e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8008b52:	ed59 6a03 	vldr	s13, [r9, #-12]
 8008b56:	ee34 4a61 	vsub.f32	s8, s8, s3
 8008b5a:	ee36 6a41 	vsub.f32	s12, s12, s2
 8008b5e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8008b62:	ee66 9a26 	vmul.f32	s19, s12, s13
 8008b66:	ee24 9a23 	vmul.f32	s18, s8, s7
 8008b6a:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008b6e:	ee24 4a26 	vmul.f32	s8, s8, s13
 8008b72:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008b76:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8008b7a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8008b7e:	ee36 6a44 	vsub.f32	s12, s12, s8
 8008b82:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008b86:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8008b8a:	ee79 3a29 	vadd.f32	s7, s18, s19
 8008b8e:	ee75 6a60 	vsub.f32	s13, s10, s1
 8008b92:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8008b96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b9a:	ed45 3a02 	vstr	s7, [r5, #-8]
 8008b9e:	ed05 6a01 	vstr	s12, [r5, #-4]
 8008ba2:	ed84 7a01 	vstr	s14, [r4, #4]
 8008ba6:	ed84 4a02 	vstr	s8, [r4, #8]
 8008baa:	ee35 6a81 	vadd.f32	s12, s11, s2
 8008bae:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8008bb2:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8008bb6:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8008bba:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008bbe:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8008bc2:	ee67 2a26 	vmul.f32	s5, s14, s13
 8008bc6:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8008bca:	ee26 5a25 	vmul.f32	s10, s12, s11
 8008bce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008bd2:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008bd6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008bda:	ee63 6a26 	vmul.f32	s13, s6, s13
 8008bde:	ee23 3a25 	vmul.f32	s6, s6, s11
 8008be2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008be6:	ee75 5a24 	vadd.f32	s11, s10, s9
 8008bea:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8008bee:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008bf2:	f1bb 0b01 	subs.w	fp, fp, #1
 8008bf6:	ed42 5a02 	vstr	s11, [r2, #-8]
 8008bfa:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008bfe:	f10e 0e08 	add.w	lr, lr, #8
 8008c02:	ed83 3a02 	vstr	s6, [r3, #8]
 8008c06:	ed83 7a01 	vstr	s14, [r3, #4]
 8008c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8008c0e:	f10a 0a08 	add.w	sl, sl, #8
 8008c12:	f100 0008 	add.w	r0, r0, #8
 8008c16:	f1a1 0108 	sub.w	r1, r1, #8
 8008c1a:	f109 0910 	add.w	r9, r9, #16
 8008c1e:	f105 0508 	add.w	r5, r5, #8
 8008c22:	f1a4 0408 	sub.w	r4, r4, #8
 8008c26:	f108 0818 	add.w	r8, r8, #24
 8008c2a:	f102 0208 	add.w	r2, r2, #8
 8008c2e:	f1a3 0308 	sub.w	r3, r3, #8
 8008c32:	f47f aefc 	bne.w	8008a2e <arm_cfft_radix8by4_f32+0x12e>
 8008c36:	9907      	ldr	r1, [sp, #28]
 8008c38:	9800      	ldr	r0, [sp, #0]
 8008c3a:	00cb      	lsls	r3, r1, #3
 8008c3c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008c40:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008c44:	9100      	str	r1, [sp, #0]
 8008c46:	9904      	ldr	r1, [sp, #16]
 8008c48:	4419      	add	r1, r3
 8008c4a:	9104      	str	r1, [sp, #16]
 8008c4c:	9903      	ldr	r1, [sp, #12]
 8008c4e:	4419      	add	r1, r3
 8008c50:	9103      	str	r1, [sp, #12]
 8008c52:	9906      	ldr	r1, [sp, #24]
 8008c54:	4419      	add	r1, r3
 8008c56:	9106      	str	r1, [sp, #24]
 8008c58:	9905      	ldr	r1, [sp, #20]
 8008c5a:	441f      	add	r7, r3
 8008c5c:	4419      	add	r1, r3
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	9105      	str	r1, [sp, #20]
 8008c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	9904      	ldr	r1, [sp, #16]
 8008c6a:	9805      	ldr	r0, [sp, #20]
 8008c6c:	ed91 4a00 	vldr	s8, [r1]
 8008c70:	edd0 6a00 	vldr	s13, [r0]
 8008c74:	9b06      	ldr	r3, [sp, #24]
 8008c76:	ed97 3a00 	vldr	s6, [r7]
 8008c7a:	edd3 7a00 	vldr	s15, [r3]
 8008c7e:	edd0 4a01 	vldr	s9, [r0, #4]
 8008c82:	edd1 3a01 	vldr	s7, [r1, #4]
 8008c86:	ed97 2a01 	vldr	s4, [r7, #4]
 8008c8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8008c8e:	9a03      	ldr	r2, [sp, #12]
 8008c90:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8008c94:	ee34 6a26 	vadd.f32	s12, s8, s13
 8008c98:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8008c9c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8008ca0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008ca4:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008ca8:	ee74 6a66 	vsub.f32	s13, s8, s13
 8008cac:	ed81 5a00 	vstr	s10, [r1]
 8008cb0:	ed93 5a01 	vldr	s10, [r3, #4]
 8008cb4:	edd7 4a01 	vldr	s9, [r7, #4]
 8008cb8:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008cbc:	ee37 4a26 	vadd.f32	s8, s14, s13
 8008cc0:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008cc4:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8008cc8:	ed81 5a01 	vstr	s10, [r1, #4]
 8008ccc:	edd2 1a00 	vldr	s3, [r2]
 8008cd0:	edd2 2a01 	vldr	s5, [r2, #4]
 8008cd4:	ee34 5a83 	vadd.f32	s10, s9, s6
 8008cd8:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008cdc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008ce0:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008ce4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008ce8:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008cec:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008cf0:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008cf4:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008cf8:	edc3 2a00 	vstr	s5, [r3]
 8008cfc:	ed83 5a01 	vstr	s10, [r3, #4]
 8008d00:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8008d04:	9b00      	ldr	r3, [sp, #0]
 8008d06:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008d0a:	ed93 4a01 	vldr	s8, [r3, #4]
 8008d0e:	ed93 5a00 	vldr	s10, [r3]
 8008d12:	9b02      	ldr	r3, [sp, #8]
 8008d14:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008d18:	ee66 4a05 	vmul.f32	s9, s12, s10
 8008d1c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008d20:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008d24:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008d28:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008d2c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8008d30:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008d34:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008d38:	ed80 6a01 	vstr	s12, [r0, #4]
 8008d3c:	edc0 5a00 	vstr	s11, [r0]
 8008d40:	edd3 5a01 	vldr	s11, [r3, #4]
 8008d44:	edd3 6a00 	vldr	s13, [r3]
 8008d48:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008d4c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8008d50:	ee27 6a26 	vmul.f32	s12, s14, s13
 8008d54:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008d58:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008d5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008d60:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008d64:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008d68:	ed87 7a01 	vstr	s14, [r7, #4]
 8008d6c:	edc7 7a00 	vstr	s15, [r7]
 8008d70:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8008d74:	4621      	mov	r1, r4
 8008d76:	686a      	ldr	r2, [r5, #4]
 8008d78:	2304      	movs	r3, #4
 8008d7a:	f000 fa31 	bl	80091e0 <arm_radix8_butterfly_f32>
 8008d7e:	4630      	mov	r0, r6
 8008d80:	4621      	mov	r1, r4
 8008d82:	686a      	ldr	r2, [r5, #4]
 8008d84:	2304      	movs	r3, #4
 8008d86:	f000 fa2b 	bl	80091e0 <arm_radix8_butterfly_f32>
 8008d8a:	9808      	ldr	r0, [sp, #32]
 8008d8c:	686a      	ldr	r2, [r5, #4]
 8008d8e:	4621      	mov	r1, r4
 8008d90:	2304      	movs	r3, #4
 8008d92:	f000 fa25 	bl	80091e0 <arm_radix8_butterfly_f32>
 8008d96:	686a      	ldr	r2, [r5, #4]
 8008d98:	9801      	ldr	r0, [sp, #4]
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	b00d      	add	sp, #52	; 0x34
 8008da0:	ecbd 8b0a 	vpop	{d8-d12}
 8008da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	f000 ba1a 	b.w	80091e0 <arm_radix8_butterfly_f32>

08008dac <arm_cfft_f32>:
 8008dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db0:	2a01      	cmp	r2, #1
 8008db2:	4606      	mov	r6, r0
 8008db4:	4617      	mov	r7, r2
 8008db6:	460c      	mov	r4, r1
 8008db8:	4698      	mov	r8, r3
 8008dba:	8805      	ldrh	r5, [r0, #0]
 8008dbc:	d056      	beq.n	8008e6c <arm_cfft_f32+0xc0>
 8008dbe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008dc2:	d063      	beq.n	8008e8c <arm_cfft_f32+0xe0>
 8008dc4:	d916      	bls.n	8008df4 <arm_cfft_f32+0x48>
 8008dc6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008dca:	d01a      	beq.n	8008e02 <arm_cfft_f32+0x56>
 8008dcc:	d947      	bls.n	8008e5e <arm_cfft_f32+0xb2>
 8008dce:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008dd2:	d05b      	beq.n	8008e8c <arm_cfft_f32+0xe0>
 8008dd4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008dd8:	d105      	bne.n	8008de6 <arm_cfft_f32+0x3a>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	6872      	ldr	r2, [r6, #4]
 8008dde:	4629      	mov	r1, r5
 8008de0:	4620      	mov	r0, r4
 8008de2:	f000 f9fd 	bl	80091e0 <arm_radix8_butterfly_f32>
 8008de6:	f1b8 0f00 	cmp.w	r8, #0
 8008dea:	d111      	bne.n	8008e10 <arm_cfft_f32+0x64>
 8008dec:	2f01      	cmp	r7, #1
 8008dee:	d016      	beq.n	8008e1e <arm_cfft_f32+0x72>
 8008df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df4:	2d20      	cmp	r5, #32
 8008df6:	d049      	beq.n	8008e8c <arm_cfft_f32+0xe0>
 8008df8:	d935      	bls.n	8008e66 <arm_cfft_f32+0xba>
 8008dfa:	2d40      	cmp	r5, #64	; 0x40
 8008dfc:	d0ed      	beq.n	8008dda <arm_cfft_f32+0x2e>
 8008dfe:	2d80      	cmp	r5, #128	; 0x80
 8008e00:	d1f1      	bne.n	8008de6 <arm_cfft_f32+0x3a>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff fcab 	bl	8008760 <arm_cfft_radix8by2_f32>
 8008e0a:	f1b8 0f00 	cmp.w	r8, #0
 8008e0e:	d0ed      	beq.n	8008dec <arm_cfft_f32+0x40>
 8008e10:	68b2      	ldr	r2, [r6, #8]
 8008e12:	89b1      	ldrh	r1, [r6, #12]
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 f89f 	bl	8008f58 <arm_bitreversal_32>
 8008e1a:	2f01      	cmp	r7, #1
 8008e1c:	d1e8      	bne.n	8008df0 <arm_cfft_f32+0x44>
 8008e1e:	ee07 5a90 	vmov	s15, r5
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008e2e:	2d00      	cmp	r5, #0
 8008e30:	d0de      	beq.n	8008df0 <arm_cfft_f32+0x44>
 8008e32:	f104 0108 	add.w	r1, r4, #8
 8008e36:	2300      	movs	r3, #0
 8008e38:	3301      	adds	r3, #1
 8008e3a:	429d      	cmp	r5, r3
 8008e3c:	f101 0108 	add.w	r1, r1, #8
 8008e40:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008e44:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008e48:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008e4c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008e50:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008e54:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008e58:	d1ee      	bne.n	8008e38 <arm_cfft_f32+0x8c>
 8008e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008e62:	d0ba      	beq.n	8008dda <arm_cfft_f32+0x2e>
 8008e64:	e7bf      	b.n	8008de6 <arm_cfft_f32+0x3a>
 8008e66:	2d10      	cmp	r5, #16
 8008e68:	d0cb      	beq.n	8008e02 <arm_cfft_f32+0x56>
 8008e6a:	e7bc      	b.n	8008de6 <arm_cfft_f32+0x3a>
 8008e6c:	b19d      	cbz	r5, 8008e96 <arm_cfft_f32+0xea>
 8008e6e:	f101 030c 	add.w	r3, r1, #12
 8008e72:	2200      	movs	r2, #0
 8008e74:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008e78:	3201      	adds	r2, #1
 8008e7a:	eef1 7a67 	vneg.f32	s15, s15
 8008e7e:	4295      	cmp	r5, r2
 8008e80:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008e84:	f103 0308 	add.w	r3, r3, #8
 8008e88:	d1f4      	bne.n	8008e74 <arm_cfft_f32+0xc8>
 8008e8a:	e798      	b.n	8008dbe <arm_cfft_f32+0x12>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7ff fd36 	bl	8008900 <arm_cfft_radix8by4_f32>
 8008e94:	e7a7      	b.n	8008de6 <arm_cfft_f32+0x3a>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0aa      	beq.n	8008df0 <arm_cfft_f32+0x44>
 8008e9a:	e7b9      	b.n	8008e10 <arm_cfft_f32+0x64>

08008e9c <arm_cfft_radix4_init_f32>:
 8008e9c:	b410      	push	{r4}
 8008e9e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008ea2:	4c27      	ldr	r4, [pc, #156]	; (8008f40 <arm_cfft_radix4_init_f32+0xa4>)
 8008ea4:	7082      	strb	r2, [r0, #2]
 8008ea6:	70c3      	strb	r3, [r0, #3]
 8008ea8:	8001      	strh	r1, [r0, #0]
 8008eaa:	6044      	str	r4, [r0, #4]
 8008eac:	d027      	beq.n	8008efe <arm_cfft_radix4_init_f32+0x62>
 8008eae:	d911      	bls.n	8008ed4 <arm_cfft_radix4_init_f32+0x38>
 8008eb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008eb4:	d02f      	beq.n	8008f16 <arm_cfft_radix4_init_f32+0x7a>
 8008eb6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008eba:	d11b      	bne.n	8008ef4 <arm_cfft_radix4_init_f32+0x58>
 8008ebc:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8008ec0:	4b20      	ldr	r3, [pc, #128]	; (8008f44 <arm_cfft_radix4_init_f32+0xa8>)
 8008ec2:	6102      	str	r2, [r0, #16]
 8008ec4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008ec8:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	2910      	cmp	r1, #16
 8008ed6:	d028      	beq.n	8008f2a <arm_cfft_radix4_init_f32+0x8e>
 8008ed8:	2940      	cmp	r1, #64	; 0x40
 8008eda:	d10b      	bne.n	8008ef4 <arm_cfft_radix4_init_f32+0x58>
 8008edc:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8008ee0:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <arm_cfft_radix4_init_f32+0xac>)
 8008ee2:	6102      	str	r2, [r0, #16]
 8008ee4:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 8008ee8:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008eec:	2000      	movs	r0, #0
 8008eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 8008f02:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <arm_cfft_radix4_init_f32+0xb0>)
 8008f04:	6102      	str	r2, [r0, #16]
 8008f06:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 8008f0a:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <arm_cfft_radix4_init_f32+0xb4>)
 8008f1c:	6102      	str	r2, [r0, #16]
 8008f1e:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 8008f22:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008f26:	2000      	movs	r0, #0
 8008f28:	e7d1      	b.n	8008ece <arm_cfft_radix4_init_f32+0x32>
 8008f2a:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <arm_cfft_radix4_init_f32+0xb8>)
 8008f30:	6102      	str	r2, [r0, #16]
 8008f32:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 8008f36:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	e7c7      	b.n	8008ece <arm_cfft_radix4_init_f32+0x32>
 8008f3e:	bf00      	nop
 8008f40:	080174f0 	.word	0x080174f0
 8008f44:	0800ff70 	.word	0x0800ff70
 8008f48:	0800ffee 	.word	0x0800ffee
 8008f4c:	0800ff8e 	.word	0x0800ff8e
 8008f50:	0800ff76 	.word	0x0800ff76
 8008f54:	0801016e 	.word	0x0801016e

08008f58 <arm_bitreversal_32>:
 8008f58:	b1e9      	cbz	r1, 8008f96 <arm_bitreversal_32+0x3e>
 8008f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f5c:	2500      	movs	r5, #0
 8008f5e:	f102 0e02 	add.w	lr, r2, #2
 8008f62:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8008f66:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8008f6a:	08a4      	lsrs	r4, r4, #2
 8008f6c:	089b      	lsrs	r3, r3, #2
 8008f6e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8008f72:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8008f76:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8008f7a:	00a6      	lsls	r6, r4, #2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8008f82:	3304      	adds	r3, #4
 8008f84:	1d34      	adds	r4, r6, #4
 8008f86:	3502      	adds	r5, #2
 8008f88:	58c6      	ldr	r6, [r0, r3]
 8008f8a:	5907      	ldr	r7, [r0, r4]
 8008f8c:	50c7      	str	r7, [r0, r3]
 8008f8e:	428d      	cmp	r5, r1
 8008f90:	5106      	str	r6, [r0, r4]
 8008f92:	d3e6      	bcc.n	8008f62 <arm_bitreversal_32+0xa>
 8008f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f96:	4770      	bx	lr

08008f98 <arm_cmplx_mag_f32>:
 8008f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	ed2d 8b02 	vpush	{d8}
 8008fa0:	0897      	lsrs	r7, r2, #2
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	d077      	beq.n	8009096 <arm_cmplx_mag_f32+0xfe>
 8008fa6:	f04f 0800 	mov.w	r8, #0
 8008faa:	f100 0420 	add.w	r4, r0, #32
 8008fae:	f101 0510 	add.w	r5, r1, #16
 8008fb2:	463e      	mov	r6, r7
 8008fb4:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8008fb8:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8008fbc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008fc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fc4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008fc8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	f2c0 80c5 	blt.w	800915e <arm_cmplx_mag_f32+0x1c6>
 8008fd4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fdc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008fe0:	f100 80cb 	bmi.w	800917a <arm_cmplx_mag_f32+0x1e2>
 8008fe4:	ed05 8a04 	vstr	s16, [r5, #-16]
 8008fe8:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8008fec:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8008ff0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008ff4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ff8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ffc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009004:	f2c0 80a8 	blt.w	8009158 <arm_cmplx_mag_f32+0x1c0>
 8009008:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009010:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009014:	f100 80a8 	bmi.w	8009168 <arm_cmplx_mag_f32+0x1d0>
 8009018:	ed05 8a03 	vstr	s16, [r5, #-12]
 800901c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009020:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009024:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009028:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800902c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009030:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009038:	f2c0 808b 	blt.w	8009152 <arm_cmplx_mag_f32+0x1ba>
 800903c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009044:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009048:	f100 80a9 	bmi.w	800919e <arm_cmplx_mag_f32+0x206>
 800904c:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009050:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009054:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009058:	ee20 0a00 	vmul.f32	s0, s0, s0
 800905c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009060:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009064:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906c:	db6e      	blt.n	800914c <arm_cmplx_mag_f32+0x1b4>
 800906e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009076:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800907a:	f100 8087 	bmi.w	800918c <arm_cmplx_mag_f32+0x1f4>
 800907e:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009082:	3e01      	subs	r6, #1
 8009084:	f104 0420 	add.w	r4, r4, #32
 8009088:	f105 0510 	add.w	r5, r5, #16
 800908c:	d192      	bne.n	8008fb4 <arm_cmplx_mag_f32+0x1c>
 800908e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009092:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009096:	f012 0203 	ands.w	r2, r2, #3
 800909a:	d052      	beq.n	8009142 <arm_cmplx_mag_f32+0x1aa>
 800909c:	ed90 0a00 	vldr	s0, [r0]
 80090a0:	edd0 7a01 	vldr	s15, [r0, #4]
 80090a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80090a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80090ac:	2300      	movs	r3, #0
 80090ae:	ee37 0a80 	vadd.f32	s0, s15, s0
 80090b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80090b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ba:	bfb8      	it	lt
 80090bc:	600b      	strlt	r3, [r1, #0]
 80090be:	db08      	blt.n	80090d2 <arm_cmplx_mag_f32+0x13a>
 80090c0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80090c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80090cc:	d479      	bmi.n	80091c2 <arm_cmplx_mag_f32+0x22a>
 80090ce:	ed81 8a00 	vstr	s16, [r1]
 80090d2:	3a01      	subs	r2, #1
 80090d4:	d035      	beq.n	8009142 <arm_cmplx_mag_f32+0x1aa>
 80090d6:	ed90 0a02 	vldr	s0, [r0, #8]
 80090da:	edd0 7a03 	vldr	s15, [r0, #12]
 80090de:	ee20 0a00 	vmul.f32	s0, s0, s0
 80090e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80090e6:	2300      	movs	r3, #0
 80090e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80090ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80090f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f4:	bfb8      	it	lt
 80090f6:	604b      	strlt	r3, [r1, #4]
 80090f8:	db08      	blt.n	800910c <arm_cmplx_mag_f32+0x174>
 80090fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009102:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009106:	d453      	bmi.n	80091b0 <arm_cmplx_mag_f32+0x218>
 8009108:	ed81 8a01 	vstr	s16, [r1, #4]
 800910c:	2a01      	cmp	r2, #1
 800910e:	d018      	beq.n	8009142 <arm_cmplx_mag_f32+0x1aa>
 8009110:	ed90 0a04 	vldr	s0, [r0, #16]
 8009114:	edd0 7a05 	vldr	s15, [r0, #20]
 8009118:	ee20 0a00 	vmul.f32	s0, s0, s0
 800911c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009120:	2300      	movs	r3, #0
 8009122:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009126:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800912a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912e:	db19      	blt.n	8009164 <arm_cmplx_mag_f32+0x1cc>
 8009130:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009138:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800913c:	d44a      	bmi.n	80091d4 <arm_cmplx_mag_f32+0x23c>
 800913e:	ed81 8a02 	vstr	s16, [r1, #8]
 8009142:	b004      	add	sp, #16
 8009144:	ecbd 8b02 	vpop	{d8}
 8009148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914c:	f845 8c04 	str.w	r8, [r5, #-4]
 8009150:	e797      	b.n	8009082 <arm_cmplx_mag_f32+0xea>
 8009152:	f845 8c08 	str.w	r8, [r5, #-8]
 8009156:	e77b      	b.n	8009050 <arm_cmplx_mag_f32+0xb8>
 8009158:	f845 8c0c 	str.w	r8, [r5, #-12]
 800915c:	e75e      	b.n	800901c <arm_cmplx_mag_f32+0x84>
 800915e:	f845 8c10 	str.w	r8, [r5, #-16]
 8009162:	e741      	b.n	8008fe8 <arm_cmplx_mag_f32+0x50>
 8009164:	608b      	str	r3, [r1, #8]
 8009166:	e7ec      	b.n	8009142 <arm_cmplx_mag_f32+0x1aa>
 8009168:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800916c:	9001      	str	r0, [sp, #4]
 800916e:	f003 fa41 	bl	800c5f4 <sqrtf>
 8009172:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009176:	9801      	ldr	r0, [sp, #4]
 8009178:	e74e      	b.n	8009018 <arm_cmplx_mag_f32+0x80>
 800917a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800917e:	9001      	str	r0, [sp, #4]
 8009180:	f003 fa38 	bl	800c5f4 <sqrtf>
 8009184:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009188:	9801      	ldr	r0, [sp, #4]
 800918a:	e72b      	b.n	8008fe4 <arm_cmplx_mag_f32+0x4c>
 800918c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009190:	9001      	str	r0, [sp, #4]
 8009192:	f003 fa2f 	bl	800c5f4 <sqrtf>
 8009196:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800919a:	9801      	ldr	r0, [sp, #4]
 800919c:	e76f      	b.n	800907e <arm_cmplx_mag_f32+0xe6>
 800919e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80091a2:	9001      	str	r0, [sp, #4]
 80091a4:	f003 fa26 	bl	800c5f4 <sqrtf>
 80091a8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80091ac:	9801      	ldr	r0, [sp, #4]
 80091ae:	e74d      	b.n	800904c <arm_cmplx_mag_f32+0xb4>
 80091b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091b4:	9201      	str	r2, [sp, #4]
 80091b6:	f003 fa1d 	bl	800c5f4 <sqrtf>
 80091ba:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80091be:	9903      	ldr	r1, [sp, #12]
 80091c0:	e7a2      	b.n	8009108 <arm_cmplx_mag_f32+0x170>
 80091c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091c6:	9201      	str	r2, [sp, #4]
 80091c8:	f003 fa14 	bl	800c5f4 <sqrtf>
 80091cc:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80091d0:	9903      	ldr	r1, [sp, #12]
 80091d2:	e77c      	b.n	80090ce <arm_cmplx_mag_f32+0x136>
 80091d4:	9101      	str	r1, [sp, #4]
 80091d6:	f003 fa0d 	bl	800c5f4 <sqrtf>
 80091da:	9901      	ldr	r1, [sp, #4]
 80091dc:	e7af      	b.n	800913e <arm_cmplx_mag_f32+0x1a6>
 80091de:	bf00      	nop

080091e0 <arm_radix8_butterfly_f32>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	ed2d 8b10 	vpush	{d8-d15}
 80091e8:	b095      	sub	sp, #84	; 0x54
 80091ea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80091ee:	4603      	mov	r3, r0
 80091f0:	3304      	adds	r3, #4
 80091f2:	ed9f bab9 	vldr	s22, [pc, #740]	; 80094d8 <arm_radix8_butterfly_f32+0x2f8>
 80091f6:	9012      	str	r0, [sp, #72]	; 0x48
 80091f8:	468b      	mov	fp, r1
 80091fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80091fc:	4689      	mov	r9, r1
 80091fe:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009202:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009204:	960f      	str	r6, [sp, #60]	; 0x3c
 8009206:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800920a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800920e:	eb03 0508 	add.w	r5, r3, r8
 8009212:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8009216:	eb05 040e 	add.w	r4, r5, lr
 800921a:	0137      	lsls	r7, r6, #4
 800921c:	eba6 030a 	sub.w	r3, r6, sl
 8009220:	eb04 000e 	add.w	r0, r4, lr
 8009224:	44b2      	add	sl, r6
 8009226:	1d3a      	adds	r2, r7, #4
 8009228:	9702      	str	r7, [sp, #8]
 800922a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800922e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8009232:	ebae 0c06 	sub.w	ip, lr, r6
 8009236:	9703      	str	r7, [sp, #12]
 8009238:	eb03 0708 	add.w	r7, r3, r8
 800923c:	9701      	str	r7, [sp, #4]
 800923e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8009242:	9706      	str	r7, [sp, #24]
 8009244:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009246:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800924a:	f10e 0104 	add.w	r1, lr, #4
 800924e:	4439      	add	r1, r7
 8009250:	443a      	add	r2, r7
 8009252:	0137      	lsls	r7, r6, #4
 8009254:	00f6      	lsls	r6, r6, #3
 8009256:	9704      	str	r7, [sp, #16]
 8009258:	9605      	str	r6, [sp, #20]
 800925a:	9f01      	ldr	r7, [sp, #4]
 800925c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800925e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8009262:	f04f 0c00 	mov.w	ip, #0
 8009266:	edd4 6a00 	vldr	s13, [r4]
 800926a:	edd7 1a00 	vldr	s3, [r7]
 800926e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8009272:	edd5 5a00 	vldr	s11, [r5]
 8009276:	ed52 9a01 	vldr	s19, [r2, #-4]
 800927a:	ed90 6a00 	vldr	s12, [r0]
 800927e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009282:	ed93 3a00 	vldr	s6, [r3]
 8009286:	ee39 0a86 	vadd.f32	s0, s19, s12
 800928a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800928e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009292:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009296:	ee35 7a02 	vadd.f32	s14, s10, s4
 800929a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800929e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80092a2:	ee74 6a07 	vadd.f32	s13, s8, s14
 80092a6:	ee34 4a47 	vsub.f32	s8, s8, s14
 80092aa:	ed46 6a01 	vstr	s13, [r6, #-4]
 80092ae:	ed85 4a00 	vstr	s8, [r5]
 80092b2:	edd1 6a00 	vldr	s13, [r1]
 80092b6:	ed94 9a01 	vldr	s18, [r4, #4]
 80092ba:	edd3 2a01 	vldr	s5, [r3, #4]
 80092be:	edd7 8a01 	vldr	s17, [r7, #4]
 80092c2:	edd6 0a00 	vldr	s1, [r6]
 80092c6:	edd5 3a01 	vldr	s7, [r5, #4]
 80092ca:	ed90 8a01 	vldr	s16, [r0, #4]
 80092ce:	ed92 7a00 	vldr	s14, [r2]
 80092d2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80092d6:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80092da:	ee72 aae8 	vsub.f32	s21, s5, s17
 80092de:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80092e2:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80092e6:	ee77 7a83 	vadd.f32	s15, s15, s6
 80092ea:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80092ee:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80092f2:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80092f6:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80092fa:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80092fe:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009302:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8009306:	ee37 7a48 	vsub.f32	s14, s14, s16
 800930a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800930e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009312:	ee76 6a89 	vadd.f32	s13, s13, s18
 8009316:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800931a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800931e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009322:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009326:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800932a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800932e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009332:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009336:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800933a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800933e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009342:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009346:	ee73 1a84 	vadd.f32	s3, s7, s8
 800934a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800934e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009352:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009356:	ee32 8a00 	vadd.f32	s16, s4, s0
 800935a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800935e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009362:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009366:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800936a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800936e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009372:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009376:	ee75 4a87 	vadd.f32	s9, s11, s14
 800937a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800937e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009382:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009386:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800938a:	44dc      	add	ip, fp
 800938c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009390:	45e1      	cmp	r9, ip
 8009392:	ed86 8a00 	vstr	s16, [r6]
 8009396:	ed85 2a01 	vstr	s4, [r5, #4]
 800939a:	4456      	add	r6, sl
 800939c:	ed02 0a01 	vstr	s0, [r2, #-4]
 80093a0:	4455      	add	r5, sl
 80093a2:	edc0 6a00 	vstr	s13, [r0]
 80093a6:	ed82 1a00 	vstr	s2, [r2]
 80093aa:	ed80 5a01 	vstr	s10, [r0, #4]
 80093ae:	4452      	add	r2, sl
 80093b0:	ed01 3a01 	vstr	s6, [r1, #-4]
 80093b4:	4450      	add	r0, sl
 80093b6:	edc7 2a00 	vstr	s5, [r7]
 80093ba:	edc4 4a00 	vstr	s9, [r4]
 80093be:	ed83 7a00 	vstr	s14, [r3]
 80093c2:	edc1 5a00 	vstr	s11, [r1]
 80093c6:	edc7 3a01 	vstr	s7, [r7, #4]
 80093ca:	4451      	add	r1, sl
 80093cc:	ed84 6a01 	vstr	s12, [r4, #4]
 80093d0:	4457      	add	r7, sl
 80093d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80093d6:	4454      	add	r4, sl
 80093d8:	4453      	add	r3, sl
 80093da:	f63f af44 	bhi.w	8009266 <arm_radix8_butterfly_f32+0x86>
 80093de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093e0:	2b07      	cmp	r3, #7
 80093e2:	f240 81b7 	bls.w	8009754 <arm_radix8_butterfly_f32+0x574>
 80093e6:	9b06      	ldr	r3, [sp, #24]
 80093e8:	9903      	ldr	r1, [sp, #12]
 80093ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80093ec:	9e05      	ldr	r6, [sp, #20]
 80093ee:	9a04      	ldr	r2, [sp, #16]
 80093f0:	f103 0c08 	add.w	ip, r3, #8
 80093f4:	9b02      	ldr	r3, [sp, #8]
 80093f6:	3108      	adds	r1, #8
 80093f8:	f108 0808 	add.w	r8, r8, #8
 80093fc:	1841      	adds	r1, r0, r1
 80093fe:	3608      	adds	r6, #8
 8009400:	330c      	adds	r3, #12
 8009402:	4604      	mov	r4, r0
 8009404:	4444      	add	r4, r8
 8009406:	18c3      	adds	r3, r0, r3
 8009408:	9109      	str	r1, [sp, #36]	; 0x24
 800940a:	1981      	adds	r1, r0, r6
 800940c:	f10e 0e08 	add.w	lr, lr, #8
 8009410:	3208      	adds	r2, #8
 8009412:	940b      	str	r4, [sp, #44]	; 0x2c
 8009414:	9107      	str	r1, [sp, #28]
 8009416:	4604      	mov	r4, r0
 8009418:	4601      	mov	r1, r0
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	f100 030c 	add.w	r3, r0, #12
 8009420:	4474      	add	r4, lr
 8009422:	f04f 0801 	mov.w	r8, #1
 8009426:	1882      	adds	r2, r0, r2
 8009428:	4461      	add	r1, ip
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	464b      	mov	r3, r9
 800942e:	940a      	str	r4, [sp, #40]	; 0x28
 8009430:	46c1      	mov	r9, r8
 8009432:	9208      	str	r2, [sp, #32]
 8009434:	46d8      	mov	r8, fp
 8009436:	9106      	str	r1, [sp, #24]
 8009438:	f04f 0e00 	mov.w	lr, #0
 800943c:	469b      	mov	fp, r3
 800943e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009442:	449e      	add	lr, r3
 8009444:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8009448:	441a      	add	r2, r3
 800944a:	920e      	str	r2, [sp, #56]	; 0x38
 800944c:	441a      	add	r2, r3
 800944e:	18d4      	adds	r4, r2, r3
 8009450:	18e5      	adds	r5, r4, r3
 8009452:	18ee      	adds	r6, r5, r3
 8009454:	18f7      	adds	r7, r6, r3
 8009456:	eb07 0c03 	add.w	ip, r7, r3
 800945a:	920d      	str	r2, [sp, #52]	; 0x34
 800945c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8009460:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8009464:	910c      	str	r1, [sp, #48]	; 0x30
 8009466:	4419      	add	r1, r3
 8009468:	9103      	str	r1, [sp, #12]
 800946a:	4419      	add	r1, r3
 800946c:	18ca      	adds	r2, r1, r3
 800946e:	9202      	str	r2, [sp, #8]
 8009470:	441a      	add	r2, r3
 8009472:	18d0      	adds	r0, r2, r3
 8009474:	ed92 ea01 	vldr	s28, [r2, #4]
 8009478:	9a02      	ldr	r2, [sp, #8]
 800947a:	edd4 7a00 	vldr	s15, [r4]
 800947e:	edd2 da01 	vldr	s27, [r2, #4]
 8009482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009484:	ed91 da01 	vldr	s26, [r1, #4]
 8009488:	ed92 ca01 	vldr	s24, [r2, #4]
 800948c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800948e:	9903      	ldr	r1, [sp, #12]
 8009490:	edcd 7a03 	vstr	s15, [sp, #12]
 8009494:	edd2 7a00 	vldr	s15, [r2]
 8009498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800949a:	edcd 7a02 	vstr	s15, [sp, #8]
 800949e:	edd2 7a00 	vldr	s15, [r2]
 80094a2:	edd0 ea01 	vldr	s29, [r0, #4]
 80094a6:	edd1 ca01 	vldr	s25, [r1, #4]
 80094aa:	eddc ba00 	vldr	s23, [ip]
 80094ae:	edd7 aa00 	vldr	s21, [r7]
 80094b2:	ed96 aa00 	vldr	s20, [r6]
 80094b6:	edd5 9a00 	vldr	s19, [r5]
 80094ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80094be:	4403      	add	r3, r0
 80094c0:	ed93 fa01 	vldr	s30, [r3, #4]
 80094c4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80094c8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80094cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094d4:	46cc      	mov	ip, r9
 80094d6:	e001      	b.n	80094dc <arm_radix8_butterfly_f32+0x2fc>
 80094d8:	3f3504f3 	.word	0x3f3504f3
 80094dc:	ed91 6a00 	vldr	s12, [r1]
 80094e0:	ed93 5a00 	vldr	s10, [r3]
 80094e4:	edd0 fa00 	vldr	s31, [r0]
 80094e8:	edd4 7a00 	vldr	s15, [r4]
 80094ec:	ed95 7a00 	vldr	s14, [r5]
 80094f0:	ed56 3a01 	vldr	s7, [r6, #-4]
 80094f4:	ed17 3a01 	vldr	s6, [r7, #-4]
 80094f8:	ed92 2a00 	vldr	s4, [r2]
 80094fc:	ed96 0a00 	vldr	s0, [r6]
 8009500:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009504:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009508:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800950c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009510:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009514:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009518:	ee32 2a46 	vsub.f32	s4, s4, s12
 800951c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009520:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009524:	ed06 6a01 	vstr	s12, [r6, #-4]
 8009528:	edd4 8a01 	vldr	s17, [r4, #4]
 800952c:	ed92 9a01 	vldr	s18, [r2, #4]
 8009530:	edd7 0a00 	vldr	s1, [r7]
 8009534:	edd1 2a01 	vldr	s5, [r1, #4]
 8009538:	ed95 7a01 	vldr	s14, [r5, #4]
 800953c:	ed93 6a01 	vldr	s12, [r3, #4]
 8009540:	edd0 5a01 	vldr	s11, [r0, #4]
 8009544:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009548:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800954c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009550:	ee78 fac7 	vsub.f32	s31, s17, s14
 8009554:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009558:	ee38 7a87 	vadd.f32	s14, s17, s14
 800955c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009560:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009564:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009568:	ee72 7a67 	vsub.f32	s15, s4, s15
 800956c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009570:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8009574:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009578:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800957c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8009580:	ee72 fa87 	vadd.f32	s31, s5, s14
 8009584:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009588:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800958c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009590:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009594:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009598:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800959c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80095a0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80095a4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80095a8:	ee30 6a46 	vsub.f32	s12, s0, s12
 80095ac:	ee74 0a22 	vadd.f32	s1, s8, s5
 80095b0:	ee36 0a28 	vadd.f32	s0, s12, s17
 80095b4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80095b8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80095bc:	ee32 4a64 	vsub.f32	s8, s4, s9
 80095c0:	ee73 8a09 	vadd.f32	s17, s6, s18
 80095c4:	ee74 4a82 	vadd.f32	s9, s9, s4
 80095c8:	ee33 9a49 	vsub.f32	s18, s6, s18
 80095cc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80095d0:	ee35 3a85 	vadd.f32	s6, s11, s10
 80095d4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80095d8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80095dc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80095e0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80095e4:	ee30 7a68 	vsub.f32	s14, s0, s17
 80095e8:	ee35 8a03 	vadd.f32	s16, s10, s6
 80095ec:	ee38 0a80 	vadd.f32	s0, s17, s0
 80095f0:	ee73 3a82 	vadd.f32	s7, s7, s4
 80095f4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80095f8:	ed9d 2a01 	vldr	s4, [sp, #4]
 80095fc:	eddd 1a02 	vldr	s3, [sp, #8]
 8009600:	ee35 5a43 	vsub.f32	s10, s10, s6
 8009604:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8009608:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800960c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8009610:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009614:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8009618:	ee76 5a49 	vsub.f32	s11, s12, s18
 800961c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8009620:	ee39 6a06 	vadd.f32	s12, s18, s12
 8009624:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8009628:	ee21 4a84 	vmul.f32	s8, s3, s8
 800962c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8009630:	ee22 7a07 	vmul.f32	s14, s4, s14
 8009634:	ee22 2a08 	vmul.f32	s4, s4, s16
 8009638:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800963c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8009640:	ee31 1a09 	vadd.f32	s2, s2, s18
 8009644:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8009648:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800964c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8009650:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009654:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8009658:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800965c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8009660:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8009664:	ee38 2a89 	vadd.f32	s4, s17, s18
 8009668:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800966c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8009670:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8009674:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8009678:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800967c:	eddd 5a03 	vldr	s11, [sp, #12]
 8009680:	edc6 fa00 	vstr	s31, [r6]
 8009684:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8009688:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800968c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8009690:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8009694:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8009698:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800969c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80096a0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80096a4:	ee25 6a86 	vmul.f32	s12, s11, s12
 80096a8:	ee74 4a89 	vadd.f32	s9, s9, s18
 80096ac:	ee34 3a43 	vsub.f32	s6, s8, s6
 80096b0:	ee78 8a85 	vadd.f32	s17, s17, s10
 80096b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80096b8:	44c4      	add	ip, r8
 80096ba:	45e3      	cmp	fp, ip
 80096bc:	edc3 3a00 	vstr	s7, [r3]
 80096c0:	edc3 6a01 	vstr	s13, [r3, #4]
 80096c4:	4456      	add	r6, sl
 80096c6:	ed07 1a01 	vstr	s2, [r7, #-4]
 80096ca:	edc7 0a00 	vstr	s1, [r7]
 80096ce:	4453      	add	r3, sl
 80096d0:	ed80 2a00 	vstr	s4, [r0]
 80096d4:	edc0 2a01 	vstr	s5, [r0, #4]
 80096d8:	4457      	add	r7, sl
 80096da:	edc2 1a00 	vstr	s3, [r2]
 80096de:	ed82 7a01 	vstr	s14, [r2, #4]
 80096e2:	4450      	add	r0, sl
 80096e4:	ed85 8a00 	vstr	s16, [r5]
 80096e8:	ed85 0a01 	vstr	s0, [r5, #4]
 80096ec:	4452      	add	r2, sl
 80096ee:	edc1 4a00 	vstr	s9, [r1]
 80096f2:	4455      	add	r5, sl
 80096f4:	ed81 3a01 	vstr	s6, [r1, #4]
 80096f8:	edc4 8a00 	vstr	s17, [r4]
 80096fc:	ed84 6a01 	vstr	s12, [r4, #4]
 8009700:	4451      	add	r1, sl
 8009702:	4454      	add	r4, sl
 8009704:	f63f aeea 	bhi.w	80094dc <arm_radix8_butterfly_f32+0x2fc>
 8009708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800970a:	3308      	adds	r3, #8
 800970c:	930b      	str	r3, [sp, #44]	; 0x2c
 800970e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009710:	3308      	adds	r3, #8
 8009712:	930a      	str	r3, [sp, #40]	; 0x28
 8009714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009716:	3308      	adds	r3, #8
 8009718:	9309      	str	r3, [sp, #36]	; 0x24
 800971a:	9b08      	ldr	r3, [sp, #32]
 800971c:	3308      	adds	r3, #8
 800971e:	9308      	str	r3, [sp, #32]
 8009720:	9b07      	ldr	r3, [sp, #28]
 8009722:	3308      	adds	r3, #8
 8009724:	9307      	str	r3, [sp, #28]
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	3308      	adds	r3, #8
 800972a:	9306      	str	r3, [sp, #24]
 800972c:	9b05      	ldr	r3, [sp, #20]
 800972e:	3308      	adds	r3, #8
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	9b04      	ldr	r3, [sp, #16]
 8009734:	3308      	adds	r3, #8
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800973a:	f109 0901 	add.w	r9, r9, #1
 800973e:	454b      	cmp	r3, r9
 8009740:	f47f ae7d 	bne.w	800943e <arm_radix8_butterfly_f32+0x25e>
 8009744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	b29b      	uxth	r3, r3
 800974a:	46d9      	mov	r9, fp
 800974c:	9310      	str	r3, [sp, #64]	; 0x40
 800974e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8009752:	e554      	b.n	80091fe <arm_radix8_butterfly_f32+0x1e>
 8009754:	b015      	add	sp, #84	; 0x54
 8009756:	ecbd 8b10 	vpop	{d8-d15}
 800975a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975e:	bf00      	nop

08009760 <__errno>:
 8009760:	4b01      	ldr	r3, [pc, #4]	; (8009768 <__errno+0x8>)
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20000560 	.word	0x20000560

0800976c <__libc_init_array>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	4d0d      	ldr	r5, [pc, #52]	; (80097a4 <__libc_init_array+0x38>)
 8009770:	4c0d      	ldr	r4, [pc, #52]	; (80097a8 <__libc_init_array+0x3c>)
 8009772:	1b64      	subs	r4, r4, r5
 8009774:	10a4      	asrs	r4, r4, #2
 8009776:	2600      	movs	r6, #0
 8009778:	42a6      	cmp	r6, r4
 800977a:	d109      	bne.n	8009790 <__libc_init_array+0x24>
 800977c:	4d0b      	ldr	r5, [pc, #44]	; (80097ac <__libc_init_array+0x40>)
 800977e:	4c0c      	ldr	r4, [pc, #48]	; (80097b0 <__libc_init_array+0x44>)
 8009780:	f003 f858 	bl	800c834 <_init>
 8009784:	1b64      	subs	r4, r4, r5
 8009786:	10a4      	asrs	r4, r4, #2
 8009788:	2600      	movs	r6, #0
 800978a:	42a6      	cmp	r6, r4
 800978c:	d105      	bne.n	800979a <__libc_init_array+0x2e>
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	f855 3b04 	ldr.w	r3, [r5], #4
 8009794:	4798      	blx	r3
 8009796:	3601      	adds	r6, #1
 8009798:	e7ee      	b.n	8009778 <__libc_init_array+0xc>
 800979a:	f855 3b04 	ldr.w	r3, [r5], #4
 800979e:	4798      	blx	r3
 80097a0:	3601      	adds	r6, #1
 80097a2:	e7f2      	b.n	800978a <__libc_init_array+0x1e>
 80097a4:	0802866c 	.word	0x0802866c
 80097a8:	0802866c 	.word	0x0802866c
 80097ac:	0802866c 	.word	0x0802866c
 80097b0:	08028670 	.word	0x08028670

080097b4 <malloc>:
 80097b4:	4b02      	ldr	r3, [pc, #8]	; (80097c0 <malloc+0xc>)
 80097b6:	4601      	mov	r1, r0
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	f000 b885 	b.w	80098c8 <_malloc_r>
 80097be:	bf00      	nop
 80097c0:	20000560 	.word	0x20000560

080097c4 <memcpy>:
 80097c4:	440a      	add	r2, r1
 80097c6:	4291      	cmp	r1, r2
 80097c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097cc:	d100      	bne.n	80097d0 <memcpy+0xc>
 80097ce:	4770      	bx	lr
 80097d0:	b510      	push	{r4, lr}
 80097d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097da:	4291      	cmp	r1, r2
 80097dc:	d1f9      	bne.n	80097d2 <memcpy+0xe>
 80097de:	bd10      	pop	{r4, pc}

080097e0 <memset>:
 80097e0:	4402      	add	r2, r0
 80097e2:	4603      	mov	r3, r0
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d100      	bne.n	80097ea <memset+0xa>
 80097e8:	4770      	bx	lr
 80097ea:	f803 1b01 	strb.w	r1, [r3], #1
 80097ee:	e7f9      	b.n	80097e4 <memset+0x4>

080097f0 <_free_r>:
 80097f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097f2:	2900      	cmp	r1, #0
 80097f4:	d044      	beq.n	8009880 <_free_r+0x90>
 80097f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fa:	9001      	str	r0, [sp, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009802:	bfb8      	it	lt
 8009804:	18e4      	addlt	r4, r4, r3
 8009806:	f001 fbed 	bl	800afe4 <__malloc_lock>
 800980a:	4a1e      	ldr	r2, [pc, #120]	; (8009884 <_free_r+0x94>)
 800980c:	9801      	ldr	r0, [sp, #4]
 800980e:	6813      	ldr	r3, [r2, #0]
 8009810:	b933      	cbnz	r3, 8009820 <_free_r+0x30>
 8009812:	6063      	str	r3, [r4, #4]
 8009814:	6014      	str	r4, [r2, #0]
 8009816:	b003      	add	sp, #12
 8009818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800981c:	f001 bbe8 	b.w	800aff0 <__malloc_unlock>
 8009820:	42a3      	cmp	r3, r4
 8009822:	d908      	bls.n	8009836 <_free_r+0x46>
 8009824:	6825      	ldr	r5, [r4, #0]
 8009826:	1961      	adds	r1, r4, r5
 8009828:	428b      	cmp	r3, r1
 800982a:	bf01      	itttt	eq
 800982c:	6819      	ldreq	r1, [r3, #0]
 800982e:	685b      	ldreq	r3, [r3, #4]
 8009830:	1949      	addeq	r1, r1, r5
 8009832:	6021      	streq	r1, [r4, #0]
 8009834:	e7ed      	b.n	8009812 <_free_r+0x22>
 8009836:	461a      	mov	r2, r3
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	b10b      	cbz	r3, 8009840 <_free_r+0x50>
 800983c:	42a3      	cmp	r3, r4
 800983e:	d9fa      	bls.n	8009836 <_free_r+0x46>
 8009840:	6811      	ldr	r1, [r2, #0]
 8009842:	1855      	adds	r5, r2, r1
 8009844:	42a5      	cmp	r5, r4
 8009846:	d10b      	bne.n	8009860 <_free_r+0x70>
 8009848:	6824      	ldr	r4, [r4, #0]
 800984a:	4421      	add	r1, r4
 800984c:	1854      	adds	r4, r2, r1
 800984e:	42a3      	cmp	r3, r4
 8009850:	6011      	str	r1, [r2, #0]
 8009852:	d1e0      	bne.n	8009816 <_free_r+0x26>
 8009854:	681c      	ldr	r4, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	6053      	str	r3, [r2, #4]
 800985a:	4421      	add	r1, r4
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	e7da      	b.n	8009816 <_free_r+0x26>
 8009860:	d902      	bls.n	8009868 <_free_r+0x78>
 8009862:	230c      	movs	r3, #12
 8009864:	6003      	str	r3, [r0, #0]
 8009866:	e7d6      	b.n	8009816 <_free_r+0x26>
 8009868:	6825      	ldr	r5, [r4, #0]
 800986a:	1961      	adds	r1, r4, r5
 800986c:	428b      	cmp	r3, r1
 800986e:	bf04      	itt	eq
 8009870:	6819      	ldreq	r1, [r3, #0]
 8009872:	685b      	ldreq	r3, [r3, #4]
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	bf04      	itt	eq
 8009878:	1949      	addeq	r1, r1, r5
 800987a:	6021      	streq	r1, [r4, #0]
 800987c:	6054      	str	r4, [r2, #4]
 800987e:	e7ca      	b.n	8009816 <_free_r+0x26>
 8009880:	b003      	add	sp, #12
 8009882:	bd30      	pop	{r4, r5, pc}
 8009884:	2001b66c 	.word	0x2001b66c

08009888 <sbrk_aligned>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	4e0e      	ldr	r6, [pc, #56]	; (80098c4 <sbrk_aligned+0x3c>)
 800988c:	460c      	mov	r4, r1
 800988e:	6831      	ldr	r1, [r6, #0]
 8009890:	4605      	mov	r5, r0
 8009892:	b911      	cbnz	r1, 800989a <sbrk_aligned+0x12>
 8009894:	f000 fcf6 	bl	800a284 <_sbrk_r>
 8009898:	6030      	str	r0, [r6, #0]
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f000 fcf1 	bl	800a284 <_sbrk_r>
 80098a2:	1c43      	adds	r3, r0, #1
 80098a4:	d00a      	beq.n	80098bc <sbrk_aligned+0x34>
 80098a6:	1cc4      	adds	r4, r0, #3
 80098a8:	f024 0403 	bic.w	r4, r4, #3
 80098ac:	42a0      	cmp	r0, r4
 80098ae:	d007      	beq.n	80098c0 <sbrk_aligned+0x38>
 80098b0:	1a21      	subs	r1, r4, r0
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 fce6 	bl	800a284 <_sbrk_r>
 80098b8:	3001      	adds	r0, #1
 80098ba:	d101      	bne.n	80098c0 <sbrk_aligned+0x38>
 80098bc:	f04f 34ff 	mov.w	r4, #4294967295
 80098c0:	4620      	mov	r0, r4
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
 80098c4:	2001b670 	.word	0x2001b670

080098c8 <_malloc_r>:
 80098c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098cc:	1ccd      	adds	r5, r1, #3
 80098ce:	f025 0503 	bic.w	r5, r5, #3
 80098d2:	3508      	adds	r5, #8
 80098d4:	2d0c      	cmp	r5, #12
 80098d6:	bf38      	it	cc
 80098d8:	250c      	movcc	r5, #12
 80098da:	2d00      	cmp	r5, #0
 80098dc:	4607      	mov	r7, r0
 80098de:	db01      	blt.n	80098e4 <_malloc_r+0x1c>
 80098e0:	42a9      	cmp	r1, r5
 80098e2:	d905      	bls.n	80098f0 <_malloc_r+0x28>
 80098e4:	230c      	movs	r3, #12
 80098e6:	603b      	str	r3, [r7, #0]
 80098e8:	2600      	movs	r6, #0
 80098ea:	4630      	mov	r0, r6
 80098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f0:	4e2e      	ldr	r6, [pc, #184]	; (80099ac <_malloc_r+0xe4>)
 80098f2:	f001 fb77 	bl	800afe4 <__malloc_lock>
 80098f6:	6833      	ldr	r3, [r6, #0]
 80098f8:	461c      	mov	r4, r3
 80098fa:	bb34      	cbnz	r4, 800994a <_malloc_r+0x82>
 80098fc:	4629      	mov	r1, r5
 80098fe:	4638      	mov	r0, r7
 8009900:	f7ff ffc2 	bl	8009888 <sbrk_aligned>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	4604      	mov	r4, r0
 8009908:	d14d      	bne.n	80099a6 <_malloc_r+0xde>
 800990a:	6834      	ldr	r4, [r6, #0]
 800990c:	4626      	mov	r6, r4
 800990e:	2e00      	cmp	r6, #0
 8009910:	d140      	bne.n	8009994 <_malloc_r+0xcc>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	4631      	mov	r1, r6
 8009916:	4638      	mov	r0, r7
 8009918:	eb04 0803 	add.w	r8, r4, r3
 800991c:	f000 fcb2 	bl	800a284 <_sbrk_r>
 8009920:	4580      	cmp	r8, r0
 8009922:	d13a      	bne.n	800999a <_malloc_r+0xd2>
 8009924:	6821      	ldr	r1, [r4, #0]
 8009926:	3503      	adds	r5, #3
 8009928:	1a6d      	subs	r5, r5, r1
 800992a:	f025 0503 	bic.w	r5, r5, #3
 800992e:	3508      	adds	r5, #8
 8009930:	2d0c      	cmp	r5, #12
 8009932:	bf38      	it	cc
 8009934:	250c      	movcc	r5, #12
 8009936:	4629      	mov	r1, r5
 8009938:	4638      	mov	r0, r7
 800993a:	f7ff ffa5 	bl	8009888 <sbrk_aligned>
 800993e:	3001      	adds	r0, #1
 8009940:	d02b      	beq.n	800999a <_malloc_r+0xd2>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	442b      	add	r3, r5
 8009946:	6023      	str	r3, [r4, #0]
 8009948:	e00e      	b.n	8009968 <_malloc_r+0xa0>
 800994a:	6822      	ldr	r2, [r4, #0]
 800994c:	1b52      	subs	r2, r2, r5
 800994e:	d41e      	bmi.n	800998e <_malloc_r+0xc6>
 8009950:	2a0b      	cmp	r2, #11
 8009952:	d916      	bls.n	8009982 <_malloc_r+0xba>
 8009954:	1961      	adds	r1, r4, r5
 8009956:	42a3      	cmp	r3, r4
 8009958:	6025      	str	r5, [r4, #0]
 800995a:	bf18      	it	ne
 800995c:	6059      	strne	r1, [r3, #4]
 800995e:	6863      	ldr	r3, [r4, #4]
 8009960:	bf08      	it	eq
 8009962:	6031      	streq	r1, [r6, #0]
 8009964:	5162      	str	r2, [r4, r5]
 8009966:	604b      	str	r3, [r1, #4]
 8009968:	4638      	mov	r0, r7
 800996a:	f104 060b 	add.w	r6, r4, #11
 800996e:	f001 fb3f 	bl	800aff0 <__malloc_unlock>
 8009972:	f026 0607 	bic.w	r6, r6, #7
 8009976:	1d23      	adds	r3, r4, #4
 8009978:	1af2      	subs	r2, r6, r3
 800997a:	d0b6      	beq.n	80098ea <_malloc_r+0x22>
 800997c:	1b9b      	subs	r3, r3, r6
 800997e:	50a3      	str	r3, [r4, r2]
 8009980:	e7b3      	b.n	80098ea <_malloc_r+0x22>
 8009982:	6862      	ldr	r2, [r4, #4]
 8009984:	42a3      	cmp	r3, r4
 8009986:	bf0c      	ite	eq
 8009988:	6032      	streq	r2, [r6, #0]
 800998a:	605a      	strne	r2, [r3, #4]
 800998c:	e7ec      	b.n	8009968 <_malloc_r+0xa0>
 800998e:	4623      	mov	r3, r4
 8009990:	6864      	ldr	r4, [r4, #4]
 8009992:	e7b2      	b.n	80098fa <_malloc_r+0x32>
 8009994:	4634      	mov	r4, r6
 8009996:	6876      	ldr	r6, [r6, #4]
 8009998:	e7b9      	b.n	800990e <_malloc_r+0x46>
 800999a:	230c      	movs	r3, #12
 800999c:	603b      	str	r3, [r7, #0]
 800999e:	4638      	mov	r0, r7
 80099a0:	f001 fb26 	bl	800aff0 <__malloc_unlock>
 80099a4:	e7a1      	b.n	80098ea <_malloc_r+0x22>
 80099a6:	6025      	str	r5, [r4, #0]
 80099a8:	e7de      	b.n	8009968 <_malloc_r+0xa0>
 80099aa:	bf00      	nop
 80099ac:	2001b66c 	.word	0x2001b66c

080099b0 <__cvt>:
 80099b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	ec55 4b10 	vmov	r4, r5, d0
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	460e      	mov	r6, r1
 80099bc:	4619      	mov	r1, r3
 80099be:	462b      	mov	r3, r5
 80099c0:	bfbb      	ittet	lt
 80099c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099c6:	461d      	movlt	r5, r3
 80099c8:	2300      	movge	r3, #0
 80099ca:	232d      	movlt	r3, #45	; 0x2d
 80099cc:	700b      	strb	r3, [r1, #0]
 80099ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099d4:	4691      	mov	r9, r2
 80099d6:	f023 0820 	bic.w	r8, r3, #32
 80099da:	bfbc      	itt	lt
 80099dc:	4622      	movlt	r2, r4
 80099de:	4614      	movlt	r4, r2
 80099e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099e4:	d005      	beq.n	80099f2 <__cvt+0x42>
 80099e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099ea:	d100      	bne.n	80099ee <__cvt+0x3e>
 80099ec:	3601      	adds	r6, #1
 80099ee:	2102      	movs	r1, #2
 80099f0:	e000      	b.n	80099f4 <__cvt+0x44>
 80099f2:	2103      	movs	r1, #3
 80099f4:	ab03      	add	r3, sp, #12
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	ab02      	add	r3, sp, #8
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	ec45 4b10 	vmov	d0, r4, r5
 8009a00:	4653      	mov	r3, sl
 8009a02:	4632      	mov	r2, r6
 8009a04:	f000 fcfc 	bl	800a400 <_dtoa_r>
 8009a08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	d102      	bne.n	8009a16 <__cvt+0x66>
 8009a10:	f019 0f01 	tst.w	r9, #1
 8009a14:	d022      	beq.n	8009a5c <__cvt+0xac>
 8009a16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a1a:	eb07 0906 	add.w	r9, r7, r6
 8009a1e:	d110      	bne.n	8009a42 <__cvt+0x92>
 8009a20:	783b      	ldrb	r3, [r7, #0]
 8009a22:	2b30      	cmp	r3, #48	; 0x30
 8009a24:	d10a      	bne.n	8009a3c <__cvt+0x8c>
 8009a26:	2200      	movs	r2, #0
 8009a28:	2300      	movs	r3, #0
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7f7 f863 	bl	8000af8 <__aeabi_dcmpeq>
 8009a32:	b918      	cbnz	r0, 8009a3c <__cvt+0x8c>
 8009a34:	f1c6 0601 	rsb	r6, r6, #1
 8009a38:	f8ca 6000 	str.w	r6, [sl]
 8009a3c:	f8da 3000 	ldr.w	r3, [sl]
 8009a40:	4499      	add	r9, r3
 8009a42:	2200      	movs	r2, #0
 8009a44:	2300      	movs	r3, #0
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f7 f855 	bl	8000af8 <__aeabi_dcmpeq>
 8009a4e:	b108      	cbz	r0, 8009a54 <__cvt+0xa4>
 8009a50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a54:	2230      	movs	r2, #48	; 0x30
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	454b      	cmp	r3, r9
 8009a5a:	d307      	bcc.n	8009a6c <__cvt+0xbc>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a60:	1bdb      	subs	r3, r3, r7
 8009a62:	4638      	mov	r0, r7
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	b004      	add	sp, #16
 8009a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6c:	1c59      	adds	r1, r3, #1
 8009a6e:	9103      	str	r1, [sp, #12]
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	e7f0      	b.n	8009a56 <__cvt+0xa6>

08009a74 <__exponent>:
 8009a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a76:	4603      	mov	r3, r0
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	bfb8      	it	lt
 8009a7c:	4249      	neglt	r1, r1
 8009a7e:	f803 2b02 	strb.w	r2, [r3], #2
 8009a82:	bfb4      	ite	lt
 8009a84:	222d      	movlt	r2, #45	; 0x2d
 8009a86:	222b      	movge	r2, #43	; 0x2b
 8009a88:	2909      	cmp	r1, #9
 8009a8a:	7042      	strb	r2, [r0, #1]
 8009a8c:	dd2a      	ble.n	8009ae4 <__exponent+0x70>
 8009a8e:	f10d 0407 	add.w	r4, sp, #7
 8009a92:	46a4      	mov	ip, r4
 8009a94:	270a      	movs	r7, #10
 8009a96:	46a6      	mov	lr, r4
 8009a98:	460a      	mov	r2, r1
 8009a9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a9e:	fb07 1516 	mls	r5, r7, r6, r1
 8009aa2:	3530      	adds	r5, #48	; 0x30
 8009aa4:	2a63      	cmp	r2, #99	; 0x63
 8009aa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009aaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009aae:	4631      	mov	r1, r6
 8009ab0:	dcf1      	bgt.n	8009a96 <__exponent+0x22>
 8009ab2:	3130      	adds	r1, #48	; 0x30
 8009ab4:	f1ae 0502 	sub.w	r5, lr, #2
 8009ab8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009abc:	1c44      	adds	r4, r0, #1
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4561      	cmp	r1, ip
 8009ac2:	d30a      	bcc.n	8009ada <__exponent+0x66>
 8009ac4:	f10d 0209 	add.w	r2, sp, #9
 8009ac8:	eba2 020e 	sub.w	r2, r2, lr
 8009acc:	4565      	cmp	r5, ip
 8009ace:	bf88      	it	hi
 8009ad0:	2200      	movhi	r2, #0
 8009ad2:	4413      	add	r3, r2
 8009ad4:	1a18      	subs	r0, r3, r0
 8009ad6:	b003      	add	sp, #12
 8009ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ade:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ae2:	e7ed      	b.n	8009ac0 <__exponent+0x4c>
 8009ae4:	2330      	movs	r3, #48	; 0x30
 8009ae6:	3130      	adds	r1, #48	; 0x30
 8009ae8:	7083      	strb	r3, [r0, #2]
 8009aea:	70c1      	strb	r1, [r0, #3]
 8009aec:	1d03      	adds	r3, r0, #4
 8009aee:	e7f1      	b.n	8009ad4 <__exponent+0x60>

08009af0 <_printf_float>:
 8009af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	ed2d 8b02 	vpush	{d8}
 8009af8:	b08d      	sub	sp, #52	; 0x34
 8009afa:	460c      	mov	r4, r1
 8009afc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b00:	4616      	mov	r6, r2
 8009b02:	461f      	mov	r7, r3
 8009b04:	4605      	mov	r5, r0
 8009b06:	f001 fa69 	bl	800afdc <_localeconv_r>
 8009b0a:	f8d0 a000 	ldr.w	sl, [r0]
 8009b0e:	4650      	mov	r0, sl
 8009b10:	f7f6 fb76 	bl	8000200 <strlen>
 8009b14:	2300      	movs	r3, #0
 8009b16:	930a      	str	r3, [sp, #40]	; 0x28
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	9305      	str	r3, [sp, #20]
 8009b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b24:	3307      	adds	r3, #7
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	f103 0208 	add.w	r2, r3, #8
 8009b2e:	f8c8 2000 	str.w	r2, [r8]
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b48:	ee08 0a10 	vmov	s16, r0
 8009b4c:	4b9f      	ldr	r3, [pc, #636]	; (8009dcc <_printf_float+0x2dc>)
 8009b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295
 8009b56:	f7f7 f801 	bl	8000b5c <__aeabi_dcmpun>
 8009b5a:	bb88      	cbnz	r0, 8009bc0 <_printf_float+0xd0>
 8009b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b60:	4b9a      	ldr	r3, [pc, #616]	; (8009dcc <_printf_float+0x2dc>)
 8009b62:	f04f 32ff 	mov.w	r2, #4294967295
 8009b66:	f7f6 ffdb 	bl	8000b20 <__aeabi_dcmple>
 8009b6a:	bb48      	cbnz	r0, 8009bc0 <_printf_float+0xd0>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2300      	movs	r3, #0
 8009b70:	4640      	mov	r0, r8
 8009b72:	4649      	mov	r1, r9
 8009b74:	f7f6 ffca 	bl	8000b0c <__aeabi_dcmplt>
 8009b78:	b110      	cbz	r0, 8009b80 <_printf_float+0x90>
 8009b7a:	232d      	movs	r3, #45	; 0x2d
 8009b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b80:	4b93      	ldr	r3, [pc, #588]	; (8009dd0 <_printf_float+0x2e0>)
 8009b82:	4894      	ldr	r0, [pc, #592]	; (8009dd4 <_printf_float+0x2e4>)
 8009b84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b88:	bf94      	ite	ls
 8009b8a:	4698      	movls	r8, r3
 8009b8c:	4680      	movhi	r8, r0
 8009b8e:	2303      	movs	r3, #3
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	9b05      	ldr	r3, [sp, #20]
 8009b94:	f023 0204 	bic.w	r2, r3, #4
 8009b98:	6022      	str	r2, [r4, #0]
 8009b9a:	f04f 0900 	mov.w	r9, #0
 8009b9e:	9700      	str	r7, [sp, #0]
 8009ba0:	4633      	mov	r3, r6
 8009ba2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f000 f9d8 	bl	8009f5c <_printf_common>
 8009bac:	3001      	adds	r0, #1
 8009bae:	f040 8090 	bne.w	8009cd2 <_printf_float+0x1e2>
 8009bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb6:	b00d      	add	sp, #52	; 0x34
 8009bb8:	ecbd 8b02 	vpop	{d8}
 8009bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	f7f6 ffc8 	bl	8000b5c <__aeabi_dcmpun>
 8009bcc:	b140      	cbz	r0, 8009be0 <_printf_float+0xf0>
 8009bce:	464b      	mov	r3, r9
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bfbc      	itt	lt
 8009bd4:	232d      	movlt	r3, #45	; 0x2d
 8009bd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bda:	487f      	ldr	r0, [pc, #508]	; (8009dd8 <_printf_float+0x2e8>)
 8009bdc:	4b7f      	ldr	r3, [pc, #508]	; (8009ddc <_printf_float+0x2ec>)
 8009bde:	e7d1      	b.n	8009b84 <_printf_float+0x94>
 8009be0:	6863      	ldr	r3, [r4, #4]
 8009be2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009be6:	9206      	str	r2, [sp, #24]
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	d13f      	bne.n	8009c6c <_printf_float+0x17c>
 8009bec:	2306      	movs	r3, #6
 8009bee:	6063      	str	r3, [r4, #4]
 8009bf0:	9b05      	ldr	r3, [sp, #20]
 8009bf2:	6861      	ldr	r1, [r4, #4]
 8009bf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	ab0a      	add	r3, sp, #40	; 0x28
 8009bfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c02:	ab09      	add	r3, sp, #36	; 0x24
 8009c04:	ec49 8b10 	vmov	d0, r8, r9
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c10:	4628      	mov	r0, r5
 8009c12:	f7ff fecd 	bl	80099b0 <__cvt>
 8009c16:	9b06      	ldr	r3, [sp, #24]
 8009c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c1a:	2b47      	cmp	r3, #71	; 0x47
 8009c1c:	4680      	mov	r8, r0
 8009c1e:	d108      	bne.n	8009c32 <_printf_float+0x142>
 8009c20:	1cc8      	adds	r0, r1, #3
 8009c22:	db02      	blt.n	8009c2a <_printf_float+0x13a>
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	4299      	cmp	r1, r3
 8009c28:	dd41      	ble.n	8009cae <_printf_float+0x1be>
 8009c2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c2e:	fa5f fb8b 	uxtb.w	fp, fp
 8009c32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c36:	d820      	bhi.n	8009c7a <_printf_float+0x18a>
 8009c38:	3901      	subs	r1, #1
 8009c3a:	465a      	mov	r2, fp
 8009c3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c40:	9109      	str	r1, [sp, #36]	; 0x24
 8009c42:	f7ff ff17 	bl	8009a74 <__exponent>
 8009c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c48:	1813      	adds	r3, r2, r0
 8009c4a:	2a01      	cmp	r2, #1
 8009c4c:	4681      	mov	r9, r0
 8009c4e:	6123      	str	r3, [r4, #16]
 8009c50:	dc02      	bgt.n	8009c58 <_printf_float+0x168>
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	07d2      	lsls	r2, r2, #31
 8009c56:	d501      	bpl.n	8009c5c <_printf_float+0x16c>
 8009c58:	3301      	adds	r3, #1
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d09c      	beq.n	8009b9e <_printf_float+0xae>
 8009c64:	232d      	movs	r3, #45	; 0x2d
 8009c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c6a:	e798      	b.n	8009b9e <_printf_float+0xae>
 8009c6c:	9a06      	ldr	r2, [sp, #24]
 8009c6e:	2a47      	cmp	r2, #71	; 0x47
 8009c70:	d1be      	bne.n	8009bf0 <_printf_float+0x100>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1bc      	bne.n	8009bf0 <_printf_float+0x100>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e7b9      	b.n	8009bee <_printf_float+0xfe>
 8009c7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c7e:	d118      	bne.n	8009cb2 <_printf_float+0x1c2>
 8009c80:	2900      	cmp	r1, #0
 8009c82:	6863      	ldr	r3, [r4, #4]
 8009c84:	dd0b      	ble.n	8009c9e <_printf_float+0x1ae>
 8009c86:	6121      	str	r1, [r4, #16]
 8009c88:	b913      	cbnz	r3, 8009c90 <_printf_float+0x1a0>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	07d0      	lsls	r0, r2, #31
 8009c8e:	d502      	bpl.n	8009c96 <_printf_float+0x1a6>
 8009c90:	3301      	adds	r3, #1
 8009c92:	440b      	add	r3, r1
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c98:	f04f 0900 	mov.w	r9, #0
 8009c9c:	e7de      	b.n	8009c5c <_printf_float+0x16c>
 8009c9e:	b913      	cbnz	r3, 8009ca6 <_printf_float+0x1b6>
 8009ca0:	6822      	ldr	r2, [r4, #0]
 8009ca2:	07d2      	lsls	r2, r2, #31
 8009ca4:	d501      	bpl.n	8009caa <_printf_float+0x1ba>
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	e7f4      	b.n	8009c94 <_printf_float+0x1a4>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e7f2      	b.n	8009c94 <_printf_float+0x1a4>
 8009cae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	db05      	blt.n	8009cc4 <_printf_float+0x1d4>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	6121      	str	r1, [r4, #16]
 8009cbc:	07d8      	lsls	r0, r3, #31
 8009cbe:	d5ea      	bpl.n	8009c96 <_printf_float+0x1a6>
 8009cc0:	1c4b      	adds	r3, r1, #1
 8009cc2:	e7e7      	b.n	8009c94 <_printf_float+0x1a4>
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	bfd4      	ite	le
 8009cc8:	f1c1 0202 	rsble	r2, r1, #2
 8009ccc:	2201      	movgt	r2, #1
 8009cce:	4413      	add	r3, r2
 8009cd0:	e7e0      	b.n	8009c94 <_printf_float+0x1a4>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	055a      	lsls	r2, r3, #21
 8009cd6:	d407      	bmi.n	8009ce8 <_printf_float+0x1f8>
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	4642      	mov	r2, r8
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d12c      	bne.n	8009d40 <_printf_float+0x250>
 8009ce6:	e764      	b.n	8009bb2 <_printf_float+0xc2>
 8009ce8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cec:	f240 80e0 	bls.w	8009eb0 <_printf_float+0x3c0>
 8009cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f7f6 fefe 	bl	8000af8 <__aeabi_dcmpeq>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d034      	beq.n	8009d6a <_printf_float+0x27a>
 8009d00:	4a37      	ldr	r2, [pc, #220]	; (8009de0 <_printf_float+0x2f0>)
 8009d02:	2301      	movs	r3, #1
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f43f af51 	beq.w	8009bb2 <_printf_float+0xc2>
 8009d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d14:	429a      	cmp	r2, r3
 8009d16:	db02      	blt.n	8009d1e <_printf_float+0x22e>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	07d8      	lsls	r0, r3, #31
 8009d1c:	d510      	bpl.n	8009d40 <_printf_float+0x250>
 8009d1e:	ee18 3a10 	vmov	r3, s16
 8009d22:	4652      	mov	r2, sl
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	47b8      	blx	r7
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	f43f af41 	beq.w	8009bb2 <_printf_float+0xc2>
 8009d30:	f04f 0800 	mov.w	r8, #0
 8009d34:	f104 091a 	add.w	r9, r4, #26
 8009d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	4543      	cmp	r3, r8
 8009d3e:	dc09      	bgt.n	8009d54 <_printf_float+0x264>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	079b      	lsls	r3, r3, #30
 8009d44:	f100 8105 	bmi.w	8009f52 <_printf_float+0x462>
 8009d48:	68e0      	ldr	r0, [r4, #12]
 8009d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d4c:	4298      	cmp	r0, r3
 8009d4e:	bfb8      	it	lt
 8009d50:	4618      	movlt	r0, r3
 8009d52:	e730      	b.n	8009bb6 <_printf_float+0xc6>
 8009d54:	2301      	movs	r3, #1
 8009d56:	464a      	mov	r2, r9
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	47b8      	blx	r7
 8009d5e:	3001      	adds	r0, #1
 8009d60:	f43f af27 	beq.w	8009bb2 <_printf_float+0xc2>
 8009d64:	f108 0801 	add.w	r8, r8, #1
 8009d68:	e7e6      	b.n	8009d38 <_printf_float+0x248>
 8009d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dc39      	bgt.n	8009de4 <_printf_float+0x2f4>
 8009d70:	4a1b      	ldr	r2, [pc, #108]	; (8009de0 <_printf_float+0x2f0>)
 8009d72:	2301      	movs	r3, #1
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f af19 	beq.w	8009bb2 <_printf_float+0xc2>
 8009d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d84:	4313      	orrs	r3, r2
 8009d86:	d102      	bne.n	8009d8e <_printf_float+0x29e>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	07d9      	lsls	r1, r3, #31
 8009d8c:	d5d8      	bpl.n	8009d40 <_printf_float+0x250>
 8009d8e:	ee18 3a10 	vmov	r3, s16
 8009d92:	4652      	mov	r2, sl
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f af09 	beq.w	8009bb2 <_printf_float+0xc2>
 8009da0:	f04f 0900 	mov.w	r9, #0
 8009da4:	f104 0a1a 	add.w	sl, r4, #26
 8009da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009daa:	425b      	negs	r3, r3
 8009dac:	454b      	cmp	r3, r9
 8009dae:	dc01      	bgt.n	8009db4 <_printf_float+0x2c4>
 8009db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db2:	e792      	b.n	8009cda <_printf_float+0x1ea>
 8009db4:	2301      	movs	r3, #1
 8009db6:	4652      	mov	r2, sl
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f aef7 	beq.w	8009bb2 <_printf_float+0xc2>
 8009dc4:	f109 0901 	add.w	r9, r9, #1
 8009dc8:	e7ee      	b.n	8009da8 <_printf_float+0x2b8>
 8009dca:	bf00      	nop
 8009dcc:	7fefffff 	.word	0x7fefffff
 8009dd0:	08028274 	.word	0x08028274
 8009dd4:	08028278 	.word	0x08028278
 8009dd8:	08028280 	.word	0x08028280
 8009ddc:	0802827c 	.word	0x0802827c
 8009de0:	08028284 	.word	0x08028284
 8009de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009de8:	429a      	cmp	r2, r3
 8009dea:	bfa8      	it	ge
 8009dec:	461a      	movge	r2, r3
 8009dee:	2a00      	cmp	r2, #0
 8009df0:	4691      	mov	r9, r2
 8009df2:	dc37      	bgt.n	8009e64 <_printf_float+0x374>
 8009df4:	f04f 0b00 	mov.w	fp, #0
 8009df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dfc:	f104 021a 	add.w	r2, r4, #26
 8009e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	eba3 0309 	sub.w	r3, r3, r9
 8009e08:	455b      	cmp	r3, fp
 8009e0a:	dc33      	bgt.n	8009e74 <_printf_float+0x384>
 8009e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e10:	429a      	cmp	r2, r3
 8009e12:	db3b      	blt.n	8009e8c <_printf_float+0x39c>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	07da      	lsls	r2, r3, #31
 8009e18:	d438      	bmi.n	8009e8c <_printf_float+0x39c>
 8009e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e1c:	9a05      	ldr	r2, [sp, #20]
 8009e1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e20:	1a9a      	subs	r2, r3, r2
 8009e22:	eba3 0901 	sub.w	r9, r3, r1
 8009e26:	4591      	cmp	r9, r2
 8009e28:	bfa8      	it	ge
 8009e2a:	4691      	movge	r9, r2
 8009e2c:	f1b9 0f00 	cmp.w	r9, #0
 8009e30:	dc35      	bgt.n	8009e9e <_printf_float+0x3ae>
 8009e32:	f04f 0800 	mov.w	r8, #0
 8009e36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e3a:	f104 0a1a 	add.w	sl, r4, #26
 8009e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	eba3 0309 	sub.w	r3, r3, r9
 8009e48:	4543      	cmp	r3, r8
 8009e4a:	f77f af79 	ble.w	8009d40 <_printf_float+0x250>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4652      	mov	r2, sl
 8009e52:	4631      	mov	r1, r6
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	f43f aeaa 	beq.w	8009bb2 <_printf_float+0xc2>
 8009e5e:	f108 0801 	add.w	r8, r8, #1
 8009e62:	e7ec      	b.n	8009e3e <_printf_float+0x34e>
 8009e64:	4613      	mov	r3, r2
 8009e66:	4631      	mov	r1, r6
 8009e68:	4642      	mov	r2, r8
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	d1c0      	bne.n	8009df4 <_printf_float+0x304>
 8009e72:	e69e      	b.n	8009bb2 <_printf_float+0xc2>
 8009e74:	2301      	movs	r3, #1
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	9205      	str	r2, [sp, #20]
 8009e7c:	47b8      	blx	r7
 8009e7e:	3001      	adds	r0, #1
 8009e80:	f43f ae97 	beq.w	8009bb2 <_printf_float+0xc2>
 8009e84:	9a05      	ldr	r2, [sp, #20]
 8009e86:	f10b 0b01 	add.w	fp, fp, #1
 8009e8a:	e7b9      	b.n	8009e00 <_printf_float+0x310>
 8009e8c:	ee18 3a10 	vmov	r3, s16
 8009e90:	4652      	mov	r2, sl
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d1be      	bne.n	8009e1a <_printf_float+0x32a>
 8009e9c:	e689      	b.n	8009bb2 <_printf_float+0xc2>
 8009e9e:	9a05      	ldr	r2, [sp, #20]
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4442      	add	r2, r8
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d1c1      	bne.n	8009e32 <_printf_float+0x342>
 8009eae:	e680      	b.n	8009bb2 <_printf_float+0xc2>
 8009eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb2:	2a01      	cmp	r2, #1
 8009eb4:	dc01      	bgt.n	8009eba <_printf_float+0x3ca>
 8009eb6:	07db      	lsls	r3, r3, #31
 8009eb8:	d538      	bpl.n	8009f2c <_printf_float+0x43c>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b8      	blx	r7
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	f43f ae74 	beq.w	8009bb2 <_printf_float+0xc2>
 8009eca:	ee18 3a10 	vmov	r3, s16
 8009ece:	4652      	mov	r2, sl
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f43f ae6b 	beq.w	8009bb2 <_printf_float+0xc2>
 8009edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f7f6 fe08 	bl	8000af8 <__aeabi_dcmpeq>
 8009ee8:	b9d8      	cbnz	r0, 8009f22 <_printf_float+0x432>
 8009eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eec:	f108 0201 	add.w	r2, r8, #1
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b8      	blx	r7
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d10e      	bne.n	8009f1a <_printf_float+0x42a>
 8009efc:	e659      	b.n	8009bb2 <_printf_float+0xc2>
 8009efe:	2301      	movs	r3, #1
 8009f00:	4652      	mov	r2, sl
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f43f ae52 	beq.w	8009bb2 <_printf_float+0xc2>
 8009f0e:	f108 0801 	add.w	r8, r8, #1
 8009f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f14:	3b01      	subs	r3, #1
 8009f16:	4543      	cmp	r3, r8
 8009f18:	dcf1      	bgt.n	8009efe <_printf_float+0x40e>
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f20:	e6dc      	b.n	8009cdc <_printf_float+0x1ec>
 8009f22:	f04f 0800 	mov.w	r8, #0
 8009f26:	f104 0a1a 	add.w	sl, r4, #26
 8009f2a:	e7f2      	b.n	8009f12 <_printf_float+0x422>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4642      	mov	r2, r8
 8009f30:	e7df      	b.n	8009ef2 <_printf_float+0x402>
 8009f32:	2301      	movs	r3, #1
 8009f34:	464a      	mov	r2, r9
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f43f ae38 	beq.w	8009bb2 <_printf_float+0xc2>
 8009f42:	f108 0801 	add.w	r8, r8, #1
 8009f46:	68e3      	ldr	r3, [r4, #12]
 8009f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f4a:	1a5b      	subs	r3, r3, r1
 8009f4c:	4543      	cmp	r3, r8
 8009f4e:	dcf0      	bgt.n	8009f32 <_printf_float+0x442>
 8009f50:	e6fa      	b.n	8009d48 <_printf_float+0x258>
 8009f52:	f04f 0800 	mov.w	r8, #0
 8009f56:	f104 0919 	add.w	r9, r4, #25
 8009f5a:	e7f4      	b.n	8009f46 <_printf_float+0x456>

08009f5c <_printf_common>:
 8009f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	4616      	mov	r6, r2
 8009f62:	4699      	mov	r9, r3
 8009f64:	688a      	ldr	r2, [r1, #8]
 8009f66:	690b      	ldr	r3, [r1, #16]
 8009f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	bfb8      	it	lt
 8009f70:	4613      	movlt	r3, r2
 8009f72:	6033      	str	r3, [r6, #0]
 8009f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f78:	4607      	mov	r7, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	b10a      	cbz	r2, 8009f82 <_printf_common+0x26>
 8009f7e:	3301      	adds	r3, #1
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	0699      	lsls	r1, r3, #26
 8009f86:	bf42      	ittt	mi
 8009f88:	6833      	ldrmi	r3, [r6, #0]
 8009f8a:	3302      	addmi	r3, #2
 8009f8c:	6033      	strmi	r3, [r6, #0]
 8009f8e:	6825      	ldr	r5, [r4, #0]
 8009f90:	f015 0506 	ands.w	r5, r5, #6
 8009f94:	d106      	bne.n	8009fa4 <_printf_common+0x48>
 8009f96:	f104 0a19 	add.w	sl, r4, #25
 8009f9a:	68e3      	ldr	r3, [r4, #12]
 8009f9c:	6832      	ldr	r2, [r6, #0]
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	dc26      	bgt.n	8009ff2 <_printf_common+0x96>
 8009fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fa8:	1e13      	subs	r3, r2, #0
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	bf18      	it	ne
 8009fae:	2301      	movne	r3, #1
 8009fb0:	0692      	lsls	r2, r2, #26
 8009fb2:	d42b      	bmi.n	800a00c <_printf_common+0xb0>
 8009fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4638      	mov	r0, r7
 8009fbc:	47c0      	blx	r8
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d01e      	beq.n	800a000 <_printf_common+0xa4>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	68e5      	ldr	r5, [r4, #12]
 8009fc6:	6832      	ldr	r2, [r6, #0]
 8009fc8:	f003 0306 	and.w	r3, r3, #6
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	bf08      	it	eq
 8009fd0:	1aad      	subeq	r5, r5, r2
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	6922      	ldr	r2, [r4, #16]
 8009fd6:	bf0c      	ite	eq
 8009fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fdc:	2500      	movne	r5, #0
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	bfc4      	itt	gt
 8009fe2:	1a9b      	subgt	r3, r3, r2
 8009fe4:	18ed      	addgt	r5, r5, r3
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	341a      	adds	r4, #26
 8009fea:	42b5      	cmp	r5, r6
 8009fec:	d11a      	bne.n	800a024 <_printf_common+0xc8>
 8009fee:	2000      	movs	r0, #0
 8009ff0:	e008      	b.n	800a004 <_printf_common+0xa8>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	47c0      	blx	r8
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d103      	bne.n	800a008 <_printf_common+0xac>
 800a000:	f04f 30ff 	mov.w	r0, #4294967295
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	3501      	adds	r5, #1
 800a00a:	e7c6      	b.n	8009f9a <_printf_common+0x3e>
 800a00c:	18e1      	adds	r1, r4, r3
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	2030      	movs	r0, #48	; 0x30
 800a012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a016:	4422      	add	r2, r4
 800a018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a01c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a020:	3302      	adds	r3, #2
 800a022:	e7c7      	b.n	8009fb4 <_printf_common+0x58>
 800a024:	2301      	movs	r3, #1
 800a026:	4622      	mov	r2, r4
 800a028:	4649      	mov	r1, r9
 800a02a:	4638      	mov	r0, r7
 800a02c:	47c0      	blx	r8
 800a02e:	3001      	adds	r0, #1
 800a030:	d0e6      	beq.n	800a000 <_printf_common+0xa4>
 800a032:	3601      	adds	r6, #1
 800a034:	e7d9      	b.n	8009fea <_printf_common+0x8e>
	...

0800a038 <_printf_i>:
 800a038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	7e0f      	ldrb	r7, [r1, #24]
 800a03e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a040:	2f78      	cmp	r7, #120	; 0x78
 800a042:	4691      	mov	r9, r2
 800a044:	4680      	mov	r8, r0
 800a046:	460c      	mov	r4, r1
 800a048:	469a      	mov	sl, r3
 800a04a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a04e:	d807      	bhi.n	800a060 <_printf_i+0x28>
 800a050:	2f62      	cmp	r7, #98	; 0x62
 800a052:	d80a      	bhi.n	800a06a <_printf_i+0x32>
 800a054:	2f00      	cmp	r7, #0
 800a056:	f000 80d8 	beq.w	800a20a <_printf_i+0x1d2>
 800a05a:	2f58      	cmp	r7, #88	; 0x58
 800a05c:	f000 80a3 	beq.w	800a1a6 <_printf_i+0x16e>
 800a060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a068:	e03a      	b.n	800a0e0 <_printf_i+0xa8>
 800a06a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a06e:	2b15      	cmp	r3, #21
 800a070:	d8f6      	bhi.n	800a060 <_printf_i+0x28>
 800a072:	a101      	add	r1, pc, #4	; (adr r1, 800a078 <_printf_i+0x40>)
 800a074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a078:	0800a0d1 	.word	0x0800a0d1
 800a07c:	0800a0e5 	.word	0x0800a0e5
 800a080:	0800a061 	.word	0x0800a061
 800a084:	0800a061 	.word	0x0800a061
 800a088:	0800a061 	.word	0x0800a061
 800a08c:	0800a061 	.word	0x0800a061
 800a090:	0800a0e5 	.word	0x0800a0e5
 800a094:	0800a061 	.word	0x0800a061
 800a098:	0800a061 	.word	0x0800a061
 800a09c:	0800a061 	.word	0x0800a061
 800a0a0:	0800a061 	.word	0x0800a061
 800a0a4:	0800a1f1 	.word	0x0800a1f1
 800a0a8:	0800a115 	.word	0x0800a115
 800a0ac:	0800a1d3 	.word	0x0800a1d3
 800a0b0:	0800a061 	.word	0x0800a061
 800a0b4:	0800a061 	.word	0x0800a061
 800a0b8:	0800a213 	.word	0x0800a213
 800a0bc:	0800a061 	.word	0x0800a061
 800a0c0:	0800a115 	.word	0x0800a115
 800a0c4:	0800a061 	.word	0x0800a061
 800a0c8:	0800a061 	.word	0x0800a061
 800a0cc:	0800a1db 	.word	0x0800a1db
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	1d1a      	adds	r2, r3, #4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	602a      	str	r2, [r5, #0]
 800a0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e0a3      	b.n	800a22c <_printf_i+0x1f4>
 800a0e4:	6820      	ldr	r0, [r4, #0]
 800a0e6:	6829      	ldr	r1, [r5, #0]
 800a0e8:	0606      	lsls	r6, r0, #24
 800a0ea:	f101 0304 	add.w	r3, r1, #4
 800a0ee:	d50a      	bpl.n	800a106 <_printf_i+0xce>
 800a0f0:	680e      	ldr	r6, [r1, #0]
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	2e00      	cmp	r6, #0
 800a0f6:	da03      	bge.n	800a100 <_printf_i+0xc8>
 800a0f8:	232d      	movs	r3, #45	; 0x2d
 800a0fa:	4276      	negs	r6, r6
 800a0fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a100:	485e      	ldr	r0, [pc, #376]	; (800a27c <_printf_i+0x244>)
 800a102:	230a      	movs	r3, #10
 800a104:	e019      	b.n	800a13a <_printf_i+0x102>
 800a106:	680e      	ldr	r6, [r1, #0]
 800a108:	602b      	str	r3, [r5, #0]
 800a10a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a10e:	bf18      	it	ne
 800a110:	b236      	sxthne	r6, r6
 800a112:	e7ef      	b.n	800a0f4 <_printf_i+0xbc>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	6820      	ldr	r0, [r4, #0]
 800a118:	1d19      	adds	r1, r3, #4
 800a11a:	6029      	str	r1, [r5, #0]
 800a11c:	0601      	lsls	r1, r0, #24
 800a11e:	d501      	bpl.n	800a124 <_printf_i+0xec>
 800a120:	681e      	ldr	r6, [r3, #0]
 800a122:	e002      	b.n	800a12a <_printf_i+0xf2>
 800a124:	0646      	lsls	r6, r0, #25
 800a126:	d5fb      	bpl.n	800a120 <_printf_i+0xe8>
 800a128:	881e      	ldrh	r6, [r3, #0]
 800a12a:	4854      	ldr	r0, [pc, #336]	; (800a27c <_printf_i+0x244>)
 800a12c:	2f6f      	cmp	r7, #111	; 0x6f
 800a12e:	bf0c      	ite	eq
 800a130:	2308      	moveq	r3, #8
 800a132:	230a      	movne	r3, #10
 800a134:	2100      	movs	r1, #0
 800a136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a13a:	6865      	ldr	r5, [r4, #4]
 800a13c:	60a5      	str	r5, [r4, #8]
 800a13e:	2d00      	cmp	r5, #0
 800a140:	bfa2      	ittt	ge
 800a142:	6821      	ldrge	r1, [r4, #0]
 800a144:	f021 0104 	bicge.w	r1, r1, #4
 800a148:	6021      	strge	r1, [r4, #0]
 800a14a:	b90e      	cbnz	r6, 800a150 <_printf_i+0x118>
 800a14c:	2d00      	cmp	r5, #0
 800a14e:	d04d      	beq.n	800a1ec <_printf_i+0x1b4>
 800a150:	4615      	mov	r5, r2
 800a152:	fbb6 f1f3 	udiv	r1, r6, r3
 800a156:	fb03 6711 	mls	r7, r3, r1, r6
 800a15a:	5dc7      	ldrb	r7, [r0, r7]
 800a15c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a160:	4637      	mov	r7, r6
 800a162:	42bb      	cmp	r3, r7
 800a164:	460e      	mov	r6, r1
 800a166:	d9f4      	bls.n	800a152 <_printf_i+0x11a>
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d10b      	bne.n	800a184 <_printf_i+0x14c>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	07de      	lsls	r6, r3, #31
 800a170:	d508      	bpl.n	800a184 <_printf_i+0x14c>
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	6861      	ldr	r1, [r4, #4]
 800a176:	4299      	cmp	r1, r3
 800a178:	bfde      	ittt	le
 800a17a:	2330      	movle	r3, #48	; 0x30
 800a17c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a180:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a184:	1b52      	subs	r2, r2, r5
 800a186:	6122      	str	r2, [r4, #16]
 800a188:	f8cd a000 	str.w	sl, [sp]
 800a18c:	464b      	mov	r3, r9
 800a18e:	aa03      	add	r2, sp, #12
 800a190:	4621      	mov	r1, r4
 800a192:	4640      	mov	r0, r8
 800a194:	f7ff fee2 	bl	8009f5c <_printf_common>
 800a198:	3001      	adds	r0, #1
 800a19a:	d14c      	bne.n	800a236 <_printf_i+0x1fe>
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	b004      	add	sp, #16
 800a1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a6:	4835      	ldr	r0, [pc, #212]	; (800a27c <_printf_i+0x244>)
 800a1a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1ac:	6829      	ldr	r1, [r5, #0]
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1b4:	6029      	str	r1, [r5, #0]
 800a1b6:	061d      	lsls	r5, r3, #24
 800a1b8:	d514      	bpl.n	800a1e4 <_printf_i+0x1ac>
 800a1ba:	07df      	lsls	r7, r3, #31
 800a1bc:	bf44      	itt	mi
 800a1be:	f043 0320 	orrmi.w	r3, r3, #32
 800a1c2:	6023      	strmi	r3, [r4, #0]
 800a1c4:	b91e      	cbnz	r6, 800a1ce <_printf_i+0x196>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	f023 0320 	bic.w	r3, r3, #32
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	2310      	movs	r3, #16
 800a1d0:	e7b0      	b.n	800a134 <_printf_i+0xfc>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	f043 0320 	orr.w	r3, r3, #32
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	2378      	movs	r3, #120	; 0x78
 800a1dc:	4828      	ldr	r0, [pc, #160]	; (800a280 <_printf_i+0x248>)
 800a1de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1e2:	e7e3      	b.n	800a1ac <_printf_i+0x174>
 800a1e4:	0659      	lsls	r1, r3, #25
 800a1e6:	bf48      	it	mi
 800a1e8:	b2b6      	uxthmi	r6, r6
 800a1ea:	e7e6      	b.n	800a1ba <_printf_i+0x182>
 800a1ec:	4615      	mov	r5, r2
 800a1ee:	e7bb      	b.n	800a168 <_printf_i+0x130>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	6826      	ldr	r6, [r4, #0]
 800a1f4:	6961      	ldr	r1, [r4, #20]
 800a1f6:	1d18      	adds	r0, r3, #4
 800a1f8:	6028      	str	r0, [r5, #0]
 800a1fa:	0635      	lsls	r5, r6, #24
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	d501      	bpl.n	800a204 <_printf_i+0x1cc>
 800a200:	6019      	str	r1, [r3, #0]
 800a202:	e002      	b.n	800a20a <_printf_i+0x1d2>
 800a204:	0670      	lsls	r0, r6, #25
 800a206:	d5fb      	bpl.n	800a200 <_printf_i+0x1c8>
 800a208:	8019      	strh	r1, [r3, #0]
 800a20a:	2300      	movs	r3, #0
 800a20c:	6123      	str	r3, [r4, #16]
 800a20e:	4615      	mov	r5, r2
 800a210:	e7ba      	b.n	800a188 <_printf_i+0x150>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	1d1a      	adds	r2, r3, #4
 800a216:	602a      	str	r2, [r5, #0]
 800a218:	681d      	ldr	r5, [r3, #0]
 800a21a:	6862      	ldr	r2, [r4, #4]
 800a21c:	2100      	movs	r1, #0
 800a21e:	4628      	mov	r0, r5
 800a220:	f7f5 fff6 	bl	8000210 <memchr>
 800a224:	b108      	cbz	r0, 800a22a <_printf_i+0x1f2>
 800a226:	1b40      	subs	r0, r0, r5
 800a228:	6060      	str	r0, [r4, #4]
 800a22a:	6863      	ldr	r3, [r4, #4]
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	2300      	movs	r3, #0
 800a230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a234:	e7a8      	b.n	800a188 <_printf_i+0x150>
 800a236:	6923      	ldr	r3, [r4, #16]
 800a238:	462a      	mov	r2, r5
 800a23a:	4649      	mov	r1, r9
 800a23c:	4640      	mov	r0, r8
 800a23e:	47d0      	blx	sl
 800a240:	3001      	adds	r0, #1
 800a242:	d0ab      	beq.n	800a19c <_printf_i+0x164>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	079b      	lsls	r3, r3, #30
 800a248:	d413      	bmi.n	800a272 <_printf_i+0x23a>
 800a24a:	68e0      	ldr	r0, [r4, #12]
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	4298      	cmp	r0, r3
 800a250:	bfb8      	it	lt
 800a252:	4618      	movlt	r0, r3
 800a254:	e7a4      	b.n	800a1a0 <_printf_i+0x168>
 800a256:	2301      	movs	r3, #1
 800a258:	4632      	mov	r2, r6
 800a25a:	4649      	mov	r1, r9
 800a25c:	4640      	mov	r0, r8
 800a25e:	47d0      	blx	sl
 800a260:	3001      	adds	r0, #1
 800a262:	d09b      	beq.n	800a19c <_printf_i+0x164>
 800a264:	3501      	adds	r5, #1
 800a266:	68e3      	ldr	r3, [r4, #12]
 800a268:	9903      	ldr	r1, [sp, #12]
 800a26a:	1a5b      	subs	r3, r3, r1
 800a26c:	42ab      	cmp	r3, r5
 800a26e:	dcf2      	bgt.n	800a256 <_printf_i+0x21e>
 800a270:	e7eb      	b.n	800a24a <_printf_i+0x212>
 800a272:	2500      	movs	r5, #0
 800a274:	f104 0619 	add.w	r6, r4, #25
 800a278:	e7f5      	b.n	800a266 <_printf_i+0x22e>
 800a27a:	bf00      	nop
 800a27c:	08028286 	.word	0x08028286
 800a280:	08028297 	.word	0x08028297

0800a284 <_sbrk_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	; (800a2a0 <_sbrk_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f8 f822 	bl	80022d8 <_sbrk>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_sbrk_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_sbrk_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	2001b674 	.word	0x2001b674

0800a2a4 <siprintf>:
 800a2a4:	b40e      	push	{r1, r2, r3}
 800a2a6:	b500      	push	{lr}
 800a2a8:	b09c      	sub	sp, #112	; 0x70
 800a2aa:	ab1d      	add	r3, sp, #116	; 0x74
 800a2ac:	9002      	str	r0, [sp, #8]
 800a2ae:	9006      	str	r0, [sp, #24]
 800a2b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2b4:	4809      	ldr	r0, [pc, #36]	; (800a2dc <siprintf+0x38>)
 800a2b6:	9107      	str	r1, [sp, #28]
 800a2b8:	9104      	str	r1, [sp, #16]
 800a2ba:	4909      	ldr	r1, [pc, #36]	; (800a2e0 <siprintf+0x3c>)
 800a2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c0:	9105      	str	r1, [sp, #20]
 800a2c2:	6800      	ldr	r0, [r0, #0]
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	a902      	add	r1, sp, #8
 800a2c8:	f001 fabc 	bl	800b844 <_svfiprintf_r>
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	701a      	strb	r2, [r3, #0]
 800a2d2:	b01c      	add	sp, #112	; 0x70
 800a2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2d8:	b003      	add	sp, #12
 800a2da:	4770      	bx	lr
 800a2dc:	20000560 	.word	0x20000560
 800a2e0:	ffff0208 	.word	0xffff0208

0800a2e4 <quorem>:
 800a2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	6903      	ldr	r3, [r0, #16]
 800a2ea:	690c      	ldr	r4, [r1, #16]
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	4607      	mov	r7, r0
 800a2f0:	f2c0 8081 	blt.w	800a3f6 <quorem+0x112>
 800a2f4:	3c01      	subs	r4, #1
 800a2f6:	f101 0814 	add.w	r8, r1, #20
 800a2fa:	f100 0514 	add.w	r5, r0, #20
 800a2fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a30c:	3301      	adds	r3, #1
 800a30e:	429a      	cmp	r2, r3
 800a310:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a314:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a318:	fbb2 f6f3 	udiv	r6, r2, r3
 800a31c:	d331      	bcc.n	800a382 <quorem+0x9e>
 800a31e:	f04f 0e00 	mov.w	lr, #0
 800a322:	4640      	mov	r0, r8
 800a324:	46ac      	mov	ip, r5
 800a326:	46f2      	mov	sl, lr
 800a328:	f850 2b04 	ldr.w	r2, [r0], #4
 800a32c:	b293      	uxth	r3, r2
 800a32e:	fb06 e303 	mla	r3, r6, r3, lr
 800a332:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a336:	b29b      	uxth	r3, r3
 800a338:	ebaa 0303 	sub.w	r3, sl, r3
 800a33c:	f8dc a000 	ldr.w	sl, [ip]
 800a340:	0c12      	lsrs	r2, r2, #16
 800a342:	fa13 f38a 	uxtah	r3, r3, sl
 800a346:	fb06 e202 	mla	r2, r6, r2, lr
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	9b00      	ldr	r3, [sp, #0]
 800a34e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a352:	b292      	uxth	r2, r2
 800a354:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a35c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a360:	4581      	cmp	r9, r0
 800a362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a366:	f84c 3b04 	str.w	r3, [ip], #4
 800a36a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a36e:	d2db      	bcs.n	800a328 <quorem+0x44>
 800a370:	f855 300b 	ldr.w	r3, [r5, fp]
 800a374:	b92b      	cbnz	r3, 800a382 <quorem+0x9e>
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	3b04      	subs	r3, #4
 800a37a:	429d      	cmp	r5, r3
 800a37c:	461a      	mov	r2, r3
 800a37e:	d32e      	bcc.n	800a3de <quorem+0xfa>
 800a380:	613c      	str	r4, [r7, #16]
 800a382:	4638      	mov	r0, r7
 800a384:	f001 f8bc 	bl	800b500 <__mcmp>
 800a388:	2800      	cmp	r0, #0
 800a38a:	db24      	blt.n	800a3d6 <quorem+0xf2>
 800a38c:	3601      	adds	r6, #1
 800a38e:	4628      	mov	r0, r5
 800a390:	f04f 0c00 	mov.w	ip, #0
 800a394:	f858 2b04 	ldr.w	r2, [r8], #4
 800a398:	f8d0 e000 	ldr.w	lr, [r0]
 800a39c:	b293      	uxth	r3, r2
 800a39e:	ebac 0303 	sub.w	r3, ip, r3
 800a3a2:	0c12      	lsrs	r2, r2, #16
 800a3a4:	fa13 f38e 	uxtah	r3, r3, lr
 800a3a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3b6:	45c1      	cmp	r9, r8
 800a3b8:	f840 3b04 	str.w	r3, [r0], #4
 800a3bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3c0:	d2e8      	bcs.n	800a394 <quorem+0xb0>
 800a3c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3ca:	b922      	cbnz	r2, 800a3d6 <quorem+0xf2>
 800a3cc:	3b04      	subs	r3, #4
 800a3ce:	429d      	cmp	r5, r3
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	d30a      	bcc.n	800a3ea <quorem+0x106>
 800a3d4:	613c      	str	r4, [r7, #16]
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	b003      	add	sp, #12
 800a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3de:	6812      	ldr	r2, [r2, #0]
 800a3e0:	3b04      	subs	r3, #4
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	d1cc      	bne.n	800a380 <quorem+0x9c>
 800a3e6:	3c01      	subs	r4, #1
 800a3e8:	e7c7      	b.n	800a37a <quorem+0x96>
 800a3ea:	6812      	ldr	r2, [r2, #0]
 800a3ec:	3b04      	subs	r3, #4
 800a3ee:	2a00      	cmp	r2, #0
 800a3f0:	d1f0      	bne.n	800a3d4 <quorem+0xf0>
 800a3f2:	3c01      	subs	r4, #1
 800a3f4:	e7eb      	b.n	800a3ce <quorem+0xea>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	e7ee      	b.n	800a3d8 <quorem+0xf4>
 800a3fa:	0000      	movs	r0, r0
 800a3fc:	0000      	movs	r0, r0
	...

0800a400 <_dtoa_r>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	ed2d 8b04 	vpush	{d8-d9}
 800a408:	ec57 6b10 	vmov	r6, r7, d0
 800a40c:	b093      	sub	sp, #76	; 0x4c
 800a40e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a414:	9106      	str	r1, [sp, #24]
 800a416:	ee10 aa10 	vmov	sl, s0
 800a41a:	4604      	mov	r4, r0
 800a41c:	9209      	str	r2, [sp, #36]	; 0x24
 800a41e:	930c      	str	r3, [sp, #48]	; 0x30
 800a420:	46bb      	mov	fp, r7
 800a422:	b975      	cbnz	r5, 800a442 <_dtoa_r+0x42>
 800a424:	2010      	movs	r0, #16
 800a426:	f7ff f9c5 	bl	80097b4 <malloc>
 800a42a:	4602      	mov	r2, r0
 800a42c:	6260      	str	r0, [r4, #36]	; 0x24
 800a42e:	b920      	cbnz	r0, 800a43a <_dtoa_r+0x3a>
 800a430:	4ba7      	ldr	r3, [pc, #668]	; (800a6d0 <_dtoa_r+0x2d0>)
 800a432:	21ea      	movs	r1, #234	; 0xea
 800a434:	48a7      	ldr	r0, [pc, #668]	; (800a6d4 <_dtoa_r+0x2d4>)
 800a436:	f001 fb05 	bl	800ba44 <__assert_func>
 800a43a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a43e:	6005      	str	r5, [r0, #0]
 800a440:	60c5      	str	r5, [r0, #12]
 800a442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a444:	6819      	ldr	r1, [r3, #0]
 800a446:	b151      	cbz	r1, 800a45e <_dtoa_r+0x5e>
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	604a      	str	r2, [r1, #4]
 800a44c:	2301      	movs	r3, #1
 800a44e:	4093      	lsls	r3, r2
 800a450:	608b      	str	r3, [r1, #8]
 800a452:	4620      	mov	r0, r4
 800a454:	f000 fe12 	bl	800b07c <_Bfree>
 800a458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a45a:	2200      	movs	r2, #0
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	1e3b      	subs	r3, r7, #0
 800a460:	bfaa      	itet	ge
 800a462:	2300      	movge	r3, #0
 800a464:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a468:	f8c8 3000 	strge.w	r3, [r8]
 800a46c:	4b9a      	ldr	r3, [pc, #616]	; (800a6d8 <_dtoa_r+0x2d8>)
 800a46e:	bfbc      	itt	lt
 800a470:	2201      	movlt	r2, #1
 800a472:	f8c8 2000 	strlt.w	r2, [r8]
 800a476:	ea33 030b 	bics.w	r3, r3, fp
 800a47a:	d11b      	bne.n	800a4b4 <_dtoa_r+0xb4>
 800a47c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a47e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a488:	4333      	orrs	r3, r6
 800a48a:	f000 8592 	beq.w	800afb2 <_dtoa_r+0xbb2>
 800a48e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a490:	b963      	cbnz	r3, 800a4ac <_dtoa_r+0xac>
 800a492:	4b92      	ldr	r3, [pc, #584]	; (800a6dc <_dtoa_r+0x2dc>)
 800a494:	e022      	b.n	800a4dc <_dtoa_r+0xdc>
 800a496:	4b92      	ldr	r3, [pc, #584]	; (800a6e0 <_dtoa_r+0x2e0>)
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	3308      	adds	r3, #8
 800a49c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	9801      	ldr	r0, [sp, #4]
 800a4a2:	b013      	add	sp, #76	; 0x4c
 800a4a4:	ecbd 8b04 	vpop	{d8-d9}
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	4b8b      	ldr	r3, [pc, #556]	; (800a6dc <_dtoa_r+0x2dc>)
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	3303      	adds	r3, #3
 800a4b2:	e7f3      	b.n	800a49c <_dtoa_r+0x9c>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	4659      	mov	r1, fp
 800a4bc:	f7f6 fb1c 	bl	8000af8 <__aeabi_dcmpeq>
 800a4c0:	ec4b ab19 	vmov	d9, sl, fp
 800a4c4:	4680      	mov	r8, r0
 800a4c6:	b158      	cbz	r0, 800a4e0 <_dtoa_r+0xe0>
 800a4c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 856b 	beq.w	800afac <_dtoa_r+0xbac>
 800a4d6:	4883      	ldr	r0, [pc, #524]	; (800a6e4 <_dtoa_r+0x2e4>)
 800a4d8:	6018      	str	r0, [r3, #0]
 800a4da:	1e43      	subs	r3, r0, #1
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	e7df      	b.n	800a4a0 <_dtoa_r+0xa0>
 800a4e0:	ec4b ab10 	vmov	d0, sl, fp
 800a4e4:	aa10      	add	r2, sp, #64	; 0x40
 800a4e6:	a911      	add	r1, sp, #68	; 0x44
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f001 f8af 	bl	800b64c <__d2b>
 800a4ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a4f2:	ee08 0a10 	vmov	s16, r0
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	f000 8084 	beq.w	800a604 <_dtoa_r+0x204>
 800a4fc:	ee19 3a90 	vmov	r3, s19
 800a500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a504:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a508:	4656      	mov	r6, sl
 800a50a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a50e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a516:	4b74      	ldr	r3, [pc, #464]	; (800a6e8 <_dtoa_r+0x2e8>)
 800a518:	2200      	movs	r2, #0
 800a51a:	4630      	mov	r0, r6
 800a51c:	4639      	mov	r1, r7
 800a51e:	f7f5 fecb 	bl	80002b8 <__aeabi_dsub>
 800a522:	a365      	add	r3, pc, #404	; (adr r3, 800a6b8 <_dtoa_r+0x2b8>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f7f6 f87e 	bl	8000628 <__aeabi_dmul>
 800a52c:	a364      	add	r3, pc, #400	; (adr r3, 800a6c0 <_dtoa_r+0x2c0>)
 800a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a532:	f7f5 fec3 	bl	80002bc <__adddf3>
 800a536:	4606      	mov	r6, r0
 800a538:	4628      	mov	r0, r5
 800a53a:	460f      	mov	r7, r1
 800a53c:	f7f6 f80a 	bl	8000554 <__aeabi_i2d>
 800a540:	a361      	add	r3, pc, #388	; (adr r3, 800a6c8 <_dtoa_r+0x2c8>)
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f7f6 f86f 	bl	8000628 <__aeabi_dmul>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4630      	mov	r0, r6
 800a550:	4639      	mov	r1, r7
 800a552:	f7f5 feb3 	bl	80002bc <__adddf3>
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	f7f6 fb15 	bl	8000b88 <__aeabi_d2iz>
 800a55e:	2200      	movs	r2, #0
 800a560:	9000      	str	r0, [sp, #0]
 800a562:	2300      	movs	r3, #0
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f6 fad0 	bl	8000b0c <__aeabi_dcmplt>
 800a56c:	b150      	cbz	r0, 800a584 <_dtoa_r+0x184>
 800a56e:	9800      	ldr	r0, [sp, #0]
 800a570:	f7f5 fff0 	bl	8000554 <__aeabi_i2d>
 800a574:	4632      	mov	r2, r6
 800a576:	463b      	mov	r3, r7
 800a578:	f7f6 fabe 	bl	8000af8 <__aeabi_dcmpeq>
 800a57c:	b910      	cbnz	r0, 800a584 <_dtoa_r+0x184>
 800a57e:	9b00      	ldr	r3, [sp, #0]
 800a580:	3b01      	subs	r3, #1
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	9b00      	ldr	r3, [sp, #0]
 800a586:	2b16      	cmp	r3, #22
 800a588:	d85a      	bhi.n	800a640 <_dtoa_r+0x240>
 800a58a:	9a00      	ldr	r2, [sp, #0]
 800a58c:	4b57      	ldr	r3, [pc, #348]	; (800a6ec <_dtoa_r+0x2ec>)
 800a58e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	ec51 0b19 	vmov	r0, r1, d9
 800a59a:	f7f6 fab7 	bl	8000b0c <__aeabi_dcmplt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d050      	beq.n	800a644 <_dtoa_r+0x244>
 800a5a2:	9b00      	ldr	r3, [sp, #0]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ae:	1b5d      	subs	r5, r3, r5
 800a5b0:	1e6b      	subs	r3, r5, #1
 800a5b2:	9305      	str	r3, [sp, #20]
 800a5b4:	bf45      	ittet	mi
 800a5b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a5ba:	9304      	strmi	r3, [sp, #16]
 800a5bc:	2300      	movpl	r3, #0
 800a5be:	2300      	movmi	r3, #0
 800a5c0:	bf4c      	ite	mi
 800a5c2:	9305      	strmi	r3, [sp, #20]
 800a5c4:	9304      	strpl	r3, [sp, #16]
 800a5c6:	9b00      	ldr	r3, [sp, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	db3d      	blt.n	800a648 <_dtoa_r+0x248>
 800a5cc:	9b05      	ldr	r3, [sp, #20]
 800a5ce:	9a00      	ldr	r2, [sp, #0]
 800a5d0:	920a      	str	r2, [sp, #40]	; 0x28
 800a5d2:	4413      	add	r3, r2
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	9307      	str	r3, [sp, #28]
 800a5da:	9b06      	ldr	r3, [sp, #24]
 800a5dc:	2b09      	cmp	r3, #9
 800a5de:	f200 8089 	bhi.w	800a6f4 <_dtoa_r+0x2f4>
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	bfc4      	itt	gt
 800a5e6:	3b04      	subgt	r3, #4
 800a5e8:	9306      	strgt	r3, [sp, #24]
 800a5ea:	9b06      	ldr	r3, [sp, #24]
 800a5ec:	f1a3 0302 	sub.w	r3, r3, #2
 800a5f0:	bfcc      	ite	gt
 800a5f2:	2500      	movgt	r5, #0
 800a5f4:	2501      	movle	r5, #1
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	f200 8087 	bhi.w	800a70a <_dtoa_r+0x30a>
 800a5fc:	e8df f003 	tbb	[pc, r3]
 800a600:	59383a2d 	.word	0x59383a2d
 800a604:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a608:	441d      	add	r5, r3
 800a60a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a60e:	2b20      	cmp	r3, #32
 800a610:	bfc1      	itttt	gt
 800a612:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a616:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a61a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a61e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a622:	bfda      	itte	le
 800a624:	f1c3 0320 	rsble	r3, r3, #32
 800a628:	fa06 f003 	lslle.w	r0, r6, r3
 800a62c:	4318      	orrgt	r0, r3
 800a62e:	f7f5 ff81 	bl	8000534 <__aeabi_ui2d>
 800a632:	2301      	movs	r3, #1
 800a634:	4606      	mov	r6, r0
 800a636:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a63a:	3d01      	subs	r5, #1
 800a63c:	930e      	str	r3, [sp, #56]	; 0x38
 800a63e:	e76a      	b.n	800a516 <_dtoa_r+0x116>
 800a640:	2301      	movs	r3, #1
 800a642:	e7b2      	b.n	800a5aa <_dtoa_r+0x1aa>
 800a644:	900b      	str	r0, [sp, #44]	; 0x2c
 800a646:	e7b1      	b.n	800a5ac <_dtoa_r+0x1ac>
 800a648:	9b04      	ldr	r3, [sp, #16]
 800a64a:	9a00      	ldr	r2, [sp, #0]
 800a64c:	1a9b      	subs	r3, r3, r2
 800a64e:	9304      	str	r3, [sp, #16]
 800a650:	4253      	negs	r3, r2
 800a652:	9307      	str	r3, [sp, #28]
 800a654:	2300      	movs	r3, #0
 800a656:	930a      	str	r3, [sp, #40]	; 0x28
 800a658:	e7bf      	b.n	800a5da <_dtoa_r+0x1da>
 800a65a:	2300      	movs	r3, #0
 800a65c:	9308      	str	r3, [sp, #32]
 800a65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	dc55      	bgt.n	800a710 <_dtoa_r+0x310>
 800a664:	2301      	movs	r3, #1
 800a666:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a66a:	461a      	mov	r2, r3
 800a66c:	9209      	str	r2, [sp, #36]	; 0x24
 800a66e:	e00c      	b.n	800a68a <_dtoa_r+0x28a>
 800a670:	2301      	movs	r3, #1
 800a672:	e7f3      	b.n	800a65c <_dtoa_r+0x25c>
 800a674:	2300      	movs	r3, #0
 800a676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a678:	9308      	str	r3, [sp, #32]
 800a67a:	9b00      	ldr	r3, [sp, #0]
 800a67c:	4413      	add	r3, r2
 800a67e:	9302      	str	r3, [sp, #8]
 800a680:	3301      	adds	r3, #1
 800a682:	2b01      	cmp	r3, #1
 800a684:	9303      	str	r3, [sp, #12]
 800a686:	bfb8      	it	lt
 800a688:	2301      	movlt	r3, #1
 800a68a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a68c:	2200      	movs	r2, #0
 800a68e:	6042      	str	r2, [r0, #4]
 800a690:	2204      	movs	r2, #4
 800a692:	f102 0614 	add.w	r6, r2, #20
 800a696:	429e      	cmp	r6, r3
 800a698:	6841      	ldr	r1, [r0, #4]
 800a69a:	d93d      	bls.n	800a718 <_dtoa_r+0x318>
 800a69c:	4620      	mov	r0, r4
 800a69e:	f000 fcad 	bl	800affc <_Balloc>
 800a6a2:	9001      	str	r0, [sp, #4]
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d13b      	bne.n	800a720 <_dtoa_r+0x320>
 800a6a8:	4b11      	ldr	r3, [pc, #68]	; (800a6f0 <_dtoa_r+0x2f0>)
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6b0:	e6c0      	b.n	800a434 <_dtoa_r+0x34>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e7df      	b.n	800a676 <_dtoa_r+0x276>
 800a6b6:	bf00      	nop
 800a6b8:	636f4361 	.word	0x636f4361
 800a6bc:	3fd287a7 	.word	0x3fd287a7
 800a6c0:	8b60c8b3 	.word	0x8b60c8b3
 800a6c4:	3fc68a28 	.word	0x3fc68a28
 800a6c8:	509f79fb 	.word	0x509f79fb
 800a6cc:	3fd34413 	.word	0x3fd34413
 800a6d0:	080282b5 	.word	0x080282b5
 800a6d4:	080282cc 	.word	0x080282cc
 800a6d8:	7ff00000 	.word	0x7ff00000
 800a6dc:	080282b1 	.word	0x080282b1
 800a6e0:	080282a8 	.word	0x080282a8
 800a6e4:	08028285 	.word	0x08028285
 800a6e8:	3ff80000 	.word	0x3ff80000
 800a6ec:	080283c0 	.word	0x080283c0
 800a6f0:	08028327 	.word	0x08028327
 800a6f4:	2501      	movs	r5, #1
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9306      	str	r3, [sp, #24]
 800a6fa:	9508      	str	r5, [sp, #32]
 800a6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a700:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a704:	2200      	movs	r2, #0
 800a706:	2312      	movs	r3, #18
 800a708:	e7b0      	b.n	800a66c <_dtoa_r+0x26c>
 800a70a:	2301      	movs	r3, #1
 800a70c:	9308      	str	r3, [sp, #32]
 800a70e:	e7f5      	b.n	800a6fc <_dtoa_r+0x2fc>
 800a710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a712:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a716:	e7b8      	b.n	800a68a <_dtoa_r+0x28a>
 800a718:	3101      	adds	r1, #1
 800a71a:	6041      	str	r1, [r0, #4]
 800a71c:	0052      	lsls	r2, r2, #1
 800a71e:	e7b8      	b.n	800a692 <_dtoa_r+0x292>
 800a720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a722:	9a01      	ldr	r2, [sp, #4]
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	9b03      	ldr	r3, [sp, #12]
 800a728:	2b0e      	cmp	r3, #14
 800a72a:	f200 809d 	bhi.w	800a868 <_dtoa_r+0x468>
 800a72e:	2d00      	cmp	r5, #0
 800a730:	f000 809a 	beq.w	800a868 <_dtoa_r+0x468>
 800a734:	9b00      	ldr	r3, [sp, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	dd32      	ble.n	800a7a0 <_dtoa_r+0x3a0>
 800a73a:	4ab7      	ldr	r2, [pc, #732]	; (800aa18 <_dtoa_r+0x618>)
 800a73c:	f003 030f 	and.w	r3, r3, #15
 800a740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a744:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a748:	9b00      	ldr	r3, [sp, #0]
 800a74a:	05d8      	lsls	r0, r3, #23
 800a74c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a750:	d516      	bpl.n	800a780 <_dtoa_r+0x380>
 800a752:	4bb2      	ldr	r3, [pc, #712]	; (800aa1c <_dtoa_r+0x61c>)
 800a754:	ec51 0b19 	vmov	r0, r1, d9
 800a758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a75c:	f7f6 f88e 	bl	800087c <__aeabi_ddiv>
 800a760:	f007 070f 	and.w	r7, r7, #15
 800a764:	4682      	mov	sl, r0
 800a766:	468b      	mov	fp, r1
 800a768:	2503      	movs	r5, #3
 800a76a:	4eac      	ldr	r6, [pc, #688]	; (800aa1c <_dtoa_r+0x61c>)
 800a76c:	b957      	cbnz	r7, 800a784 <_dtoa_r+0x384>
 800a76e:	4642      	mov	r2, r8
 800a770:	464b      	mov	r3, r9
 800a772:	4650      	mov	r0, sl
 800a774:	4659      	mov	r1, fp
 800a776:	f7f6 f881 	bl	800087c <__aeabi_ddiv>
 800a77a:	4682      	mov	sl, r0
 800a77c:	468b      	mov	fp, r1
 800a77e:	e028      	b.n	800a7d2 <_dtoa_r+0x3d2>
 800a780:	2502      	movs	r5, #2
 800a782:	e7f2      	b.n	800a76a <_dtoa_r+0x36a>
 800a784:	07f9      	lsls	r1, r7, #31
 800a786:	d508      	bpl.n	800a79a <_dtoa_r+0x39a>
 800a788:	4640      	mov	r0, r8
 800a78a:	4649      	mov	r1, r9
 800a78c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a790:	f7f5 ff4a 	bl	8000628 <__aeabi_dmul>
 800a794:	3501      	adds	r5, #1
 800a796:	4680      	mov	r8, r0
 800a798:	4689      	mov	r9, r1
 800a79a:	107f      	asrs	r7, r7, #1
 800a79c:	3608      	adds	r6, #8
 800a79e:	e7e5      	b.n	800a76c <_dtoa_r+0x36c>
 800a7a0:	f000 809b 	beq.w	800a8da <_dtoa_r+0x4da>
 800a7a4:	9b00      	ldr	r3, [sp, #0]
 800a7a6:	4f9d      	ldr	r7, [pc, #628]	; (800aa1c <_dtoa_r+0x61c>)
 800a7a8:	425e      	negs	r6, r3
 800a7aa:	4b9b      	ldr	r3, [pc, #620]	; (800aa18 <_dtoa_r+0x618>)
 800a7ac:	f006 020f 	and.w	r2, r6, #15
 800a7b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	ec51 0b19 	vmov	r0, r1, d9
 800a7bc:	f7f5 ff34 	bl	8000628 <__aeabi_dmul>
 800a7c0:	1136      	asrs	r6, r6, #4
 800a7c2:	4682      	mov	sl, r0
 800a7c4:	468b      	mov	fp, r1
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2502      	movs	r5, #2
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d17a      	bne.n	800a8c4 <_dtoa_r+0x4c4>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1d3      	bne.n	800a77a <_dtoa_r+0x37a>
 800a7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8082 	beq.w	800a8de <_dtoa_r+0x4de>
 800a7da:	4b91      	ldr	r3, [pc, #580]	; (800aa20 <_dtoa_r+0x620>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	4650      	mov	r0, sl
 800a7e0:	4659      	mov	r1, fp
 800a7e2:	f7f6 f993 	bl	8000b0c <__aeabi_dcmplt>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d079      	beq.n	800a8de <_dtoa_r+0x4de>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d076      	beq.n	800a8de <_dtoa_r+0x4de>
 800a7f0:	9b02      	ldr	r3, [sp, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	dd36      	ble.n	800a864 <_dtoa_r+0x464>
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	4659      	mov	r1, fp
 800a7fc:	1e5f      	subs	r7, r3, #1
 800a7fe:	2200      	movs	r2, #0
 800a800:	4b88      	ldr	r3, [pc, #544]	; (800aa24 <_dtoa_r+0x624>)
 800a802:	f7f5 ff11 	bl	8000628 <__aeabi_dmul>
 800a806:	9e02      	ldr	r6, [sp, #8]
 800a808:	4682      	mov	sl, r0
 800a80a:	468b      	mov	fp, r1
 800a80c:	3501      	adds	r5, #1
 800a80e:	4628      	mov	r0, r5
 800a810:	f7f5 fea0 	bl	8000554 <__aeabi_i2d>
 800a814:	4652      	mov	r2, sl
 800a816:	465b      	mov	r3, fp
 800a818:	f7f5 ff06 	bl	8000628 <__aeabi_dmul>
 800a81c:	4b82      	ldr	r3, [pc, #520]	; (800aa28 <_dtoa_r+0x628>)
 800a81e:	2200      	movs	r2, #0
 800a820:	f7f5 fd4c 	bl	80002bc <__adddf3>
 800a824:	46d0      	mov	r8, sl
 800a826:	46d9      	mov	r9, fp
 800a828:	4682      	mov	sl, r0
 800a82a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a82e:	2e00      	cmp	r6, #0
 800a830:	d158      	bne.n	800a8e4 <_dtoa_r+0x4e4>
 800a832:	4b7e      	ldr	r3, [pc, #504]	; (800aa2c <_dtoa_r+0x62c>)
 800a834:	2200      	movs	r2, #0
 800a836:	4640      	mov	r0, r8
 800a838:	4649      	mov	r1, r9
 800a83a:	f7f5 fd3d 	bl	80002b8 <__aeabi_dsub>
 800a83e:	4652      	mov	r2, sl
 800a840:	465b      	mov	r3, fp
 800a842:	4680      	mov	r8, r0
 800a844:	4689      	mov	r9, r1
 800a846:	f7f6 f97f 	bl	8000b48 <__aeabi_dcmpgt>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	f040 8295 	bne.w	800ad7a <_dtoa_r+0x97a>
 800a850:	4652      	mov	r2, sl
 800a852:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f6 f957 	bl	8000b0c <__aeabi_dcmplt>
 800a85e:	2800      	cmp	r0, #0
 800a860:	f040 8289 	bne.w	800ad76 <_dtoa_r+0x976>
 800a864:	ec5b ab19 	vmov	sl, fp, d9
 800a868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f2c0 8148 	blt.w	800ab00 <_dtoa_r+0x700>
 800a870:	9a00      	ldr	r2, [sp, #0]
 800a872:	2a0e      	cmp	r2, #14
 800a874:	f300 8144 	bgt.w	800ab00 <_dtoa_r+0x700>
 800a878:	4b67      	ldr	r3, [pc, #412]	; (800aa18 <_dtoa_r+0x618>)
 800a87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a87e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a884:	2b00      	cmp	r3, #0
 800a886:	f280 80d5 	bge.w	800aa34 <_dtoa_r+0x634>
 800a88a:	9b03      	ldr	r3, [sp, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f300 80d1 	bgt.w	800aa34 <_dtoa_r+0x634>
 800a892:	f040 826f 	bne.w	800ad74 <_dtoa_r+0x974>
 800a896:	4b65      	ldr	r3, [pc, #404]	; (800aa2c <_dtoa_r+0x62c>)
 800a898:	2200      	movs	r2, #0
 800a89a:	4640      	mov	r0, r8
 800a89c:	4649      	mov	r1, r9
 800a89e:	f7f5 fec3 	bl	8000628 <__aeabi_dmul>
 800a8a2:	4652      	mov	r2, sl
 800a8a4:	465b      	mov	r3, fp
 800a8a6:	f7f6 f945 	bl	8000b34 <__aeabi_dcmpge>
 800a8aa:	9e03      	ldr	r6, [sp, #12]
 800a8ac:	4637      	mov	r7, r6
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f040 8245 	bne.w	800ad3e <_dtoa_r+0x93e>
 800a8b4:	9d01      	ldr	r5, [sp, #4]
 800a8b6:	2331      	movs	r3, #49	; 0x31
 800a8b8:	f805 3b01 	strb.w	r3, [r5], #1
 800a8bc:	9b00      	ldr	r3, [sp, #0]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	e240      	b.n	800ad46 <_dtoa_r+0x946>
 800a8c4:	07f2      	lsls	r2, r6, #31
 800a8c6:	d505      	bpl.n	800a8d4 <_dtoa_r+0x4d4>
 800a8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8cc:	f7f5 feac 	bl	8000628 <__aeabi_dmul>
 800a8d0:	3501      	adds	r5, #1
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	1076      	asrs	r6, r6, #1
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	e777      	b.n	800a7ca <_dtoa_r+0x3ca>
 800a8da:	2502      	movs	r5, #2
 800a8dc:	e779      	b.n	800a7d2 <_dtoa_r+0x3d2>
 800a8de:	9f00      	ldr	r7, [sp, #0]
 800a8e0:	9e03      	ldr	r6, [sp, #12]
 800a8e2:	e794      	b.n	800a80e <_dtoa_r+0x40e>
 800a8e4:	9901      	ldr	r1, [sp, #4]
 800a8e6:	4b4c      	ldr	r3, [pc, #304]	; (800aa18 <_dtoa_r+0x618>)
 800a8e8:	4431      	add	r1, r6
 800a8ea:	910d      	str	r1, [sp, #52]	; 0x34
 800a8ec:	9908      	ldr	r1, [sp, #32]
 800a8ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8f6:	2900      	cmp	r1, #0
 800a8f8:	d043      	beq.n	800a982 <_dtoa_r+0x582>
 800a8fa:	494d      	ldr	r1, [pc, #308]	; (800aa30 <_dtoa_r+0x630>)
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f7f5 ffbd 	bl	800087c <__aeabi_ddiv>
 800a902:	4652      	mov	r2, sl
 800a904:	465b      	mov	r3, fp
 800a906:	f7f5 fcd7 	bl	80002b8 <__aeabi_dsub>
 800a90a:	9d01      	ldr	r5, [sp, #4]
 800a90c:	4682      	mov	sl, r0
 800a90e:	468b      	mov	fp, r1
 800a910:	4649      	mov	r1, r9
 800a912:	4640      	mov	r0, r8
 800a914:	f7f6 f938 	bl	8000b88 <__aeabi_d2iz>
 800a918:	4606      	mov	r6, r0
 800a91a:	f7f5 fe1b 	bl	8000554 <__aeabi_i2d>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4640      	mov	r0, r8
 800a924:	4649      	mov	r1, r9
 800a926:	f7f5 fcc7 	bl	80002b8 <__aeabi_dsub>
 800a92a:	3630      	adds	r6, #48	; 0x30
 800a92c:	f805 6b01 	strb.w	r6, [r5], #1
 800a930:	4652      	mov	r2, sl
 800a932:	465b      	mov	r3, fp
 800a934:	4680      	mov	r8, r0
 800a936:	4689      	mov	r9, r1
 800a938:	f7f6 f8e8 	bl	8000b0c <__aeabi_dcmplt>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d163      	bne.n	800aa08 <_dtoa_r+0x608>
 800a940:	4642      	mov	r2, r8
 800a942:	464b      	mov	r3, r9
 800a944:	4936      	ldr	r1, [pc, #216]	; (800aa20 <_dtoa_r+0x620>)
 800a946:	2000      	movs	r0, #0
 800a948:	f7f5 fcb6 	bl	80002b8 <__aeabi_dsub>
 800a94c:	4652      	mov	r2, sl
 800a94e:	465b      	mov	r3, fp
 800a950:	f7f6 f8dc 	bl	8000b0c <__aeabi_dcmplt>
 800a954:	2800      	cmp	r0, #0
 800a956:	f040 80b5 	bne.w	800aac4 <_dtoa_r+0x6c4>
 800a95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a95c:	429d      	cmp	r5, r3
 800a95e:	d081      	beq.n	800a864 <_dtoa_r+0x464>
 800a960:	4b30      	ldr	r3, [pc, #192]	; (800aa24 <_dtoa_r+0x624>)
 800a962:	2200      	movs	r2, #0
 800a964:	4650      	mov	r0, sl
 800a966:	4659      	mov	r1, fp
 800a968:	f7f5 fe5e 	bl	8000628 <__aeabi_dmul>
 800a96c:	4b2d      	ldr	r3, [pc, #180]	; (800aa24 <_dtoa_r+0x624>)
 800a96e:	4682      	mov	sl, r0
 800a970:	468b      	mov	fp, r1
 800a972:	4640      	mov	r0, r8
 800a974:	4649      	mov	r1, r9
 800a976:	2200      	movs	r2, #0
 800a978:	f7f5 fe56 	bl	8000628 <__aeabi_dmul>
 800a97c:	4680      	mov	r8, r0
 800a97e:	4689      	mov	r9, r1
 800a980:	e7c6      	b.n	800a910 <_dtoa_r+0x510>
 800a982:	4650      	mov	r0, sl
 800a984:	4659      	mov	r1, fp
 800a986:	f7f5 fe4f 	bl	8000628 <__aeabi_dmul>
 800a98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a98c:	9d01      	ldr	r5, [sp, #4]
 800a98e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a990:	4682      	mov	sl, r0
 800a992:	468b      	mov	fp, r1
 800a994:	4649      	mov	r1, r9
 800a996:	4640      	mov	r0, r8
 800a998:	f7f6 f8f6 	bl	8000b88 <__aeabi_d2iz>
 800a99c:	4606      	mov	r6, r0
 800a99e:	f7f5 fdd9 	bl	8000554 <__aeabi_i2d>
 800a9a2:	3630      	adds	r6, #48	; 0x30
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	f7f5 fc84 	bl	80002b8 <__aeabi_dsub>
 800a9b0:	f805 6b01 	strb.w	r6, [r5], #1
 800a9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9b6:	429d      	cmp	r5, r3
 800a9b8:	4680      	mov	r8, r0
 800a9ba:	4689      	mov	r9, r1
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	d124      	bne.n	800aa0c <_dtoa_r+0x60c>
 800a9c2:	4b1b      	ldr	r3, [pc, #108]	; (800aa30 <_dtoa_r+0x630>)
 800a9c4:	4650      	mov	r0, sl
 800a9c6:	4659      	mov	r1, fp
 800a9c8:	f7f5 fc78 	bl	80002bc <__adddf3>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	f7f6 f8b8 	bl	8000b48 <__aeabi_dcmpgt>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d173      	bne.n	800aac4 <_dtoa_r+0x6c4>
 800a9dc:	4652      	mov	r2, sl
 800a9de:	465b      	mov	r3, fp
 800a9e0:	4913      	ldr	r1, [pc, #76]	; (800aa30 <_dtoa_r+0x630>)
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	f7f5 fc68 	bl	80002b8 <__aeabi_dsub>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	f7f6 f88c 	bl	8000b0c <__aeabi_dcmplt>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	f43f af35 	beq.w	800a864 <_dtoa_r+0x464>
 800a9fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9fc:	1e6b      	subs	r3, r5, #1
 800a9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa04:	2b30      	cmp	r3, #48	; 0x30
 800aa06:	d0f8      	beq.n	800a9fa <_dtoa_r+0x5fa>
 800aa08:	9700      	str	r7, [sp, #0]
 800aa0a:	e049      	b.n	800aaa0 <_dtoa_r+0x6a0>
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <_dtoa_r+0x624>)
 800aa0e:	f7f5 fe0b 	bl	8000628 <__aeabi_dmul>
 800aa12:	4680      	mov	r8, r0
 800aa14:	4689      	mov	r9, r1
 800aa16:	e7bd      	b.n	800a994 <_dtoa_r+0x594>
 800aa18:	080283c0 	.word	0x080283c0
 800aa1c:	08028398 	.word	0x08028398
 800aa20:	3ff00000 	.word	0x3ff00000
 800aa24:	40240000 	.word	0x40240000
 800aa28:	401c0000 	.word	0x401c0000
 800aa2c:	40140000 	.word	0x40140000
 800aa30:	3fe00000 	.word	0x3fe00000
 800aa34:	9d01      	ldr	r5, [sp, #4]
 800aa36:	4656      	mov	r6, sl
 800aa38:	465f      	mov	r7, fp
 800aa3a:	4642      	mov	r2, r8
 800aa3c:	464b      	mov	r3, r9
 800aa3e:	4630      	mov	r0, r6
 800aa40:	4639      	mov	r1, r7
 800aa42:	f7f5 ff1b 	bl	800087c <__aeabi_ddiv>
 800aa46:	f7f6 f89f 	bl	8000b88 <__aeabi_d2iz>
 800aa4a:	4682      	mov	sl, r0
 800aa4c:	f7f5 fd82 	bl	8000554 <__aeabi_i2d>
 800aa50:	4642      	mov	r2, r8
 800aa52:	464b      	mov	r3, r9
 800aa54:	f7f5 fde8 	bl	8000628 <__aeabi_dmul>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	4639      	mov	r1, r7
 800aa60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aa64:	f7f5 fc28 	bl	80002b8 <__aeabi_dsub>
 800aa68:	f805 6b01 	strb.w	r6, [r5], #1
 800aa6c:	9e01      	ldr	r6, [sp, #4]
 800aa6e:	9f03      	ldr	r7, [sp, #12]
 800aa70:	1bae      	subs	r6, r5, r6
 800aa72:	42b7      	cmp	r7, r6
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	d135      	bne.n	800aae6 <_dtoa_r+0x6e6>
 800aa7a:	f7f5 fc1f 	bl	80002bc <__adddf3>
 800aa7e:	4642      	mov	r2, r8
 800aa80:	464b      	mov	r3, r9
 800aa82:	4606      	mov	r6, r0
 800aa84:	460f      	mov	r7, r1
 800aa86:	f7f6 f85f 	bl	8000b48 <__aeabi_dcmpgt>
 800aa8a:	b9d0      	cbnz	r0, 800aac2 <_dtoa_r+0x6c2>
 800aa8c:	4642      	mov	r2, r8
 800aa8e:	464b      	mov	r3, r9
 800aa90:	4630      	mov	r0, r6
 800aa92:	4639      	mov	r1, r7
 800aa94:	f7f6 f830 	bl	8000af8 <__aeabi_dcmpeq>
 800aa98:	b110      	cbz	r0, 800aaa0 <_dtoa_r+0x6a0>
 800aa9a:	f01a 0f01 	tst.w	sl, #1
 800aa9e:	d110      	bne.n	800aac2 <_dtoa_r+0x6c2>
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	ee18 1a10 	vmov	r1, s16
 800aaa6:	f000 fae9 	bl	800b07c <_Bfree>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9800      	ldr	r0, [sp, #0]
 800aaae:	702b      	strb	r3, [r5, #0]
 800aab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aab2:	3001      	adds	r0, #1
 800aab4:	6018      	str	r0, [r3, #0]
 800aab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f43f acf1 	beq.w	800a4a0 <_dtoa_r+0xa0>
 800aabe:	601d      	str	r5, [r3, #0]
 800aac0:	e4ee      	b.n	800a4a0 <_dtoa_r+0xa0>
 800aac2:	9f00      	ldr	r7, [sp, #0]
 800aac4:	462b      	mov	r3, r5
 800aac6:	461d      	mov	r5, r3
 800aac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aacc:	2a39      	cmp	r2, #57	; 0x39
 800aace:	d106      	bne.n	800aade <_dtoa_r+0x6de>
 800aad0:	9a01      	ldr	r2, [sp, #4]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d1f7      	bne.n	800aac6 <_dtoa_r+0x6c6>
 800aad6:	9901      	ldr	r1, [sp, #4]
 800aad8:	2230      	movs	r2, #48	; 0x30
 800aada:	3701      	adds	r7, #1
 800aadc:	700a      	strb	r2, [r1, #0]
 800aade:	781a      	ldrb	r2, [r3, #0]
 800aae0:	3201      	adds	r2, #1
 800aae2:	701a      	strb	r2, [r3, #0]
 800aae4:	e790      	b.n	800aa08 <_dtoa_r+0x608>
 800aae6:	4ba6      	ldr	r3, [pc, #664]	; (800ad80 <_dtoa_r+0x980>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	f7f5 fd9d 	bl	8000628 <__aeabi_dmul>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460f      	mov	r7, r1
 800aaf6:	f7f5 ffff 	bl	8000af8 <__aeabi_dcmpeq>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d09d      	beq.n	800aa3a <_dtoa_r+0x63a>
 800aafe:	e7cf      	b.n	800aaa0 <_dtoa_r+0x6a0>
 800ab00:	9a08      	ldr	r2, [sp, #32]
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	f000 80d7 	beq.w	800acb6 <_dtoa_r+0x8b6>
 800ab08:	9a06      	ldr	r2, [sp, #24]
 800ab0a:	2a01      	cmp	r2, #1
 800ab0c:	f300 80ba 	bgt.w	800ac84 <_dtoa_r+0x884>
 800ab10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	f000 80b2 	beq.w	800ac7c <_dtoa_r+0x87c>
 800ab18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab1c:	9e07      	ldr	r6, [sp, #28]
 800ab1e:	9d04      	ldr	r5, [sp, #16]
 800ab20:	9a04      	ldr	r2, [sp, #16]
 800ab22:	441a      	add	r2, r3
 800ab24:	9204      	str	r2, [sp, #16]
 800ab26:	9a05      	ldr	r2, [sp, #20]
 800ab28:	2101      	movs	r1, #1
 800ab2a:	441a      	add	r2, r3
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	9205      	str	r2, [sp, #20]
 800ab30:	f000 fb5c 	bl	800b1ec <__i2b>
 800ab34:	4607      	mov	r7, r0
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	dd0c      	ble.n	800ab54 <_dtoa_r+0x754>
 800ab3a:	9b05      	ldr	r3, [sp, #20]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dd09      	ble.n	800ab54 <_dtoa_r+0x754>
 800ab40:	42ab      	cmp	r3, r5
 800ab42:	9a04      	ldr	r2, [sp, #16]
 800ab44:	bfa8      	it	ge
 800ab46:	462b      	movge	r3, r5
 800ab48:	1ad2      	subs	r2, r2, r3
 800ab4a:	9204      	str	r2, [sp, #16]
 800ab4c:	9a05      	ldr	r2, [sp, #20]
 800ab4e:	1aed      	subs	r5, r5, r3
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	9305      	str	r3, [sp, #20]
 800ab54:	9b07      	ldr	r3, [sp, #28]
 800ab56:	b31b      	cbz	r3, 800aba0 <_dtoa_r+0x7a0>
 800ab58:	9b08      	ldr	r3, [sp, #32]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 80af 	beq.w	800acbe <_dtoa_r+0x8be>
 800ab60:	2e00      	cmp	r6, #0
 800ab62:	dd13      	ble.n	800ab8c <_dtoa_r+0x78c>
 800ab64:	4639      	mov	r1, r7
 800ab66:	4632      	mov	r2, r6
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 fbff 	bl	800b36c <__pow5mult>
 800ab6e:	ee18 2a10 	vmov	r2, s16
 800ab72:	4601      	mov	r1, r0
 800ab74:	4607      	mov	r7, r0
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fb4e 	bl	800b218 <__multiply>
 800ab7c:	ee18 1a10 	vmov	r1, s16
 800ab80:	4680      	mov	r8, r0
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 fa7a 	bl	800b07c <_Bfree>
 800ab88:	ee08 8a10 	vmov	s16, r8
 800ab8c:	9b07      	ldr	r3, [sp, #28]
 800ab8e:	1b9a      	subs	r2, r3, r6
 800ab90:	d006      	beq.n	800aba0 <_dtoa_r+0x7a0>
 800ab92:	ee18 1a10 	vmov	r1, s16
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fbe8 	bl	800b36c <__pow5mult>
 800ab9c:	ee08 0a10 	vmov	s16, r0
 800aba0:	2101      	movs	r1, #1
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 fb22 	bl	800b1ec <__i2b>
 800aba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abaa:	2b00      	cmp	r3, #0
 800abac:	4606      	mov	r6, r0
 800abae:	f340 8088 	ble.w	800acc2 <_dtoa_r+0x8c2>
 800abb2:	461a      	mov	r2, r3
 800abb4:	4601      	mov	r1, r0
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fbd8 	bl	800b36c <__pow5mult>
 800abbc:	9b06      	ldr	r3, [sp, #24]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	4606      	mov	r6, r0
 800abc2:	f340 8081 	ble.w	800acc8 <_dtoa_r+0x8c8>
 800abc6:	f04f 0800 	mov.w	r8, #0
 800abca:	6933      	ldr	r3, [r6, #16]
 800abcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abd0:	6918      	ldr	r0, [r3, #16]
 800abd2:	f000 fabb 	bl	800b14c <__hi0bits>
 800abd6:	f1c0 0020 	rsb	r0, r0, #32
 800abda:	9b05      	ldr	r3, [sp, #20]
 800abdc:	4418      	add	r0, r3
 800abde:	f010 001f 	ands.w	r0, r0, #31
 800abe2:	f000 8092 	beq.w	800ad0a <_dtoa_r+0x90a>
 800abe6:	f1c0 0320 	rsb	r3, r0, #32
 800abea:	2b04      	cmp	r3, #4
 800abec:	f340 808a 	ble.w	800ad04 <_dtoa_r+0x904>
 800abf0:	f1c0 001c 	rsb	r0, r0, #28
 800abf4:	9b04      	ldr	r3, [sp, #16]
 800abf6:	4403      	add	r3, r0
 800abf8:	9304      	str	r3, [sp, #16]
 800abfa:	9b05      	ldr	r3, [sp, #20]
 800abfc:	4403      	add	r3, r0
 800abfe:	4405      	add	r5, r0
 800ac00:	9305      	str	r3, [sp, #20]
 800ac02:	9b04      	ldr	r3, [sp, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	dd07      	ble.n	800ac18 <_dtoa_r+0x818>
 800ac08:	ee18 1a10 	vmov	r1, s16
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 fc06 	bl	800b420 <__lshift>
 800ac14:	ee08 0a10 	vmov	s16, r0
 800ac18:	9b05      	ldr	r3, [sp, #20]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dd05      	ble.n	800ac2a <_dtoa_r+0x82a>
 800ac1e:	4631      	mov	r1, r6
 800ac20:	461a      	mov	r2, r3
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 fbfc 	bl	800b420 <__lshift>
 800ac28:	4606      	mov	r6, r0
 800ac2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d06e      	beq.n	800ad0e <_dtoa_r+0x90e>
 800ac30:	ee18 0a10 	vmov	r0, s16
 800ac34:	4631      	mov	r1, r6
 800ac36:	f000 fc63 	bl	800b500 <__mcmp>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	da67      	bge.n	800ad0e <_dtoa_r+0x90e>
 800ac3e:	9b00      	ldr	r3, [sp, #0]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	ee18 1a10 	vmov	r1, s16
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	220a      	movs	r2, #10
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 fa37 	bl	800b0c0 <__multadd>
 800ac52:	9b08      	ldr	r3, [sp, #32]
 800ac54:	ee08 0a10 	vmov	s16, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 81b1 	beq.w	800afc0 <_dtoa_r+0xbc0>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	4639      	mov	r1, r7
 800ac62:	220a      	movs	r2, #10
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 fa2b 	bl	800b0c0 <__multadd>
 800ac6a:	9b02      	ldr	r3, [sp, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	4607      	mov	r7, r0
 800ac70:	f300 808e 	bgt.w	800ad90 <_dtoa_r+0x990>
 800ac74:	9b06      	ldr	r3, [sp, #24]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	dc51      	bgt.n	800ad1e <_dtoa_r+0x91e>
 800ac7a:	e089      	b.n	800ad90 <_dtoa_r+0x990>
 800ac7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac82:	e74b      	b.n	800ab1c <_dtoa_r+0x71c>
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	1e5e      	subs	r6, r3, #1
 800ac88:	9b07      	ldr	r3, [sp, #28]
 800ac8a:	42b3      	cmp	r3, r6
 800ac8c:	bfbf      	itttt	lt
 800ac8e:	9b07      	ldrlt	r3, [sp, #28]
 800ac90:	9607      	strlt	r6, [sp, #28]
 800ac92:	1af2      	sublt	r2, r6, r3
 800ac94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac96:	bfb6      	itet	lt
 800ac98:	189b      	addlt	r3, r3, r2
 800ac9a:	1b9e      	subge	r6, r3, r6
 800ac9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	bfb8      	it	lt
 800aca2:	2600      	movlt	r6, #0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bfb7      	itett	lt
 800aca8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800acac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800acb0:	1a9d      	sublt	r5, r3, r2
 800acb2:	2300      	movlt	r3, #0
 800acb4:	e734      	b.n	800ab20 <_dtoa_r+0x720>
 800acb6:	9e07      	ldr	r6, [sp, #28]
 800acb8:	9d04      	ldr	r5, [sp, #16]
 800acba:	9f08      	ldr	r7, [sp, #32]
 800acbc:	e73b      	b.n	800ab36 <_dtoa_r+0x736>
 800acbe:	9a07      	ldr	r2, [sp, #28]
 800acc0:	e767      	b.n	800ab92 <_dtoa_r+0x792>
 800acc2:	9b06      	ldr	r3, [sp, #24]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	dc18      	bgt.n	800acfa <_dtoa_r+0x8fa>
 800acc8:	f1ba 0f00 	cmp.w	sl, #0
 800accc:	d115      	bne.n	800acfa <_dtoa_r+0x8fa>
 800acce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acd2:	b993      	cbnz	r3, 800acfa <_dtoa_r+0x8fa>
 800acd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800acd8:	0d1b      	lsrs	r3, r3, #20
 800acda:	051b      	lsls	r3, r3, #20
 800acdc:	b183      	cbz	r3, 800ad00 <_dtoa_r+0x900>
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	3301      	adds	r3, #1
 800ace2:	9304      	str	r3, [sp, #16]
 800ace4:	9b05      	ldr	r3, [sp, #20]
 800ace6:	3301      	adds	r3, #1
 800ace8:	9305      	str	r3, [sp, #20]
 800acea:	f04f 0801 	mov.w	r8, #1
 800acee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f47f af6a 	bne.w	800abca <_dtoa_r+0x7ca>
 800acf6:	2001      	movs	r0, #1
 800acf8:	e76f      	b.n	800abda <_dtoa_r+0x7da>
 800acfa:	f04f 0800 	mov.w	r8, #0
 800acfe:	e7f6      	b.n	800acee <_dtoa_r+0x8ee>
 800ad00:	4698      	mov	r8, r3
 800ad02:	e7f4      	b.n	800acee <_dtoa_r+0x8ee>
 800ad04:	f43f af7d 	beq.w	800ac02 <_dtoa_r+0x802>
 800ad08:	4618      	mov	r0, r3
 800ad0a:	301c      	adds	r0, #28
 800ad0c:	e772      	b.n	800abf4 <_dtoa_r+0x7f4>
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dc37      	bgt.n	800ad84 <_dtoa_r+0x984>
 800ad14:	9b06      	ldr	r3, [sp, #24]
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	dd34      	ble.n	800ad84 <_dtoa_r+0x984>
 800ad1a:	9b03      	ldr	r3, [sp, #12]
 800ad1c:	9302      	str	r3, [sp, #8]
 800ad1e:	9b02      	ldr	r3, [sp, #8]
 800ad20:	b96b      	cbnz	r3, 800ad3e <_dtoa_r+0x93e>
 800ad22:	4631      	mov	r1, r6
 800ad24:	2205      	movs	r2, #5
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 f9ca 	bl	800b0c0 <__multadd>
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	4606      	mov	r6, r0
 800ad30:	ee18 0a10 	vmov	r0, s16
 800ad34:	f000 fbe4 	bl	800b500 <__mcmp>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	f73f adbb 	bgt.w	800a8b4 <_dtoa_r+0x4b4>
 800ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad40:	9d01      	ldr	r5, [sp, #4]
 800ad42:	43db      	mvns	r3, r3
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	f04f 0800 	mov.w	r8, #0
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f000 f995 	bl	800b07c <_Bfree>
 800ad52:	2f00      	cmp	r7, #0
 800ad54:	f43f aea4 	beq.w	800aaa0 <_dtoa_r+0x6a0>
 800ad58:	f1b8 0f00 	cmp.w	r8, #0
 800ad5c:	d005      	beq.n	800ad6a <_dtoa_r+0x96a>
 800ad5e:	45b8      	cmp	r8, r7
 800ad60:	d003      	beq.n	800ad6a <_dtoa_r+0x96a>
 800ad62:	4641      	mov	r1, r8
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 f989 	bl	800b07c <_Bfree>
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 f985 	bl	800b07c <_Bfree>
 800ad72:	e695      	b.n	800aaa0 <_dtoa_r+0x6a0>
 800ad74:	2600      	movs	r6, #0
 800ad76:	4637      	mov	r7, r6
 800ad78:	e7e1      	b.n	800ad3e <_dtoa_r+0x93e>
 800ad7a:	9700      	str	r7, [sp, #0]
 800ad7c:	4637      	mov	r7, r6
 800ad7e:	e599      	b.n	800a8b4 <_dtoa_r+0x4b4>
 800ad80:	40240000 	.word	0x40240000
 800ad84:	9b08      	ldr	r3, [sp, #32]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 80ca 	beq.w	800af20 <_dtoa_r+0xb20>
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	9302      	str	r3, [sp, #8]
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	dd05      	ble.n	800ada0 <_dtoa_r+0x9a0>
 800ad94:	4639      	mov	r1, r7
 800ad96:	462a      	mov	r2, r5
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 fb41 	bl	800b420 <__lshift>
 800ad9e:	4607      	mov	r7, r0
 800ada0:	f1b8 0f00 	cmp.w	r8, #0
 800ada4:	d05b      	beq.n	800ae5e <_dtoa_r+0xa5e>
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 f927 	bl	800affc <_Balloc>
 800adae:	4605      	mov	r5, r0
 800adb0:	b928      	cbnz	r0, 800adbe <_dtoa_r+0x9be>
 800adb2:	4b87      	ldr	r3, [pc, #540]	; (800afd0 <_dtoa_r+0xbd0>)
 800adb4:	4602      	mov	r2, r0
 800adb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adba:	f7ff bb3b 	b.w	800a434 <_dtoa_r+0x34>
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	3202      	adds	r2, #2
 800adc2:	0092      	lsls	r2, r2, #2
 800adc4:	f107 010c 	add.w	r1, r7, #12
 800adc8:	300c      	adds	r0, #12
 800adca:	f7fe fcfb 	bl	80097c4 <memcpy>
 800adce:	2201      	movs	r2, #1
 800add0:	4629      	mov	r1, r5
 800add2:	4620      	mov	r0, r4
 800add4:	f000 fb24 	bl	800b420 <__lshift>
 800add8:	9b01      	ldr	r3, [sp, #4]
 800adda:	f103 0901 	add.w	r9, r3, #1
 800adde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ade2:	4413      	add	r3, r2
 800ade4:	9305      	str	r3, [sp, #20]
 800ade6:	f00a 0301 	and.w	r3, sl, #1
 800adea:	46b8      	mov	r8, r7
 800adec:	9304      	str	r3, [sp, #16]
 800adee:	4607      	mov	r7, r0
 800adf0:	4631      	mov	r1, r6
 800adf2:	ee18 0a10 	vmov	r0, s16
 800adf6:	f7ff fa75 	bl	800a2e4 <quorem>
 800adfa:	4641      	mov	r1, r8
 800adfc:	9002      	str	r0, [sp, #8]
 800adfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae02:	ee18 0a10 	vmov	r0, s16
 800ae06:	f000 fb7b 	bl	800b500 <__mcmp>
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	9003      	str	r0, [sp, #12]
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 fb91 	bl	800b538 <__mdiff>
 800ae16:	68c2      	ldr	r2, [r0, #12]
 800ae18:	f109 3bff 	add.w	fp, r9, #4294967295
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	bb02      	cbnz	r2, 800ae62 <_dtoa_r+0xa62>
 800ae20:	4601      	mov	r1, r0
 800ae22:	ee18 0a10 	vmov	r0, s16
 800ae26:	f000 fb6b 	bl	800b500 <__mcmp>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4620      	mov	r0, r4
 800ae30:	9207      	str	r2, [sp, #28]
 800ae32:	f000 f923 	bl	800b07c <_Bfree>
 800ae36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ae3a:	ea43 0102 	orr.w	r1, r3, r2
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	430b      	orrs	r3, r1
 800ae42:	464d      	mov	r5, r9
 800ae44:	d10f      	bne.n	800ae66 <_dtoa_r+0xa66>
 800ae46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae4a:	d02a      	beq.n	800aea2 <_dtoa_r+0xaa2>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	dd02      	ble.n	800ae58 <_dtoa_r+0xa58>
 800ae52:	9b02      	ldr	r3, [sp, #8]
 800ae54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ae58:	f88b a000 	strb.w	sl, [fp]
 800ae5c:	e775      	b.n	800ad4a <_dtoa_r+0x94a>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	e7ba      	b.n	800add8 <_dtoa_r+0x9d8>
 800ae62:	2201      	movs	r2, #1
 800ae64:	e7e2      	b.n	800ae2c <_dtoa_r+0xa2c>
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	db04      	blt.n	800ae76 <_dtoa_r+0xa76>
 800ae6c:	9906      	ldr	r1, [sp, #24]
 800ae6e:	430b      	orrs	r3, r1
 800ae70:	9904      	ldr	r1, [sp, #16]
 800ae72:	430b      	orrs	r3, r1
 800ae74:	d122      	bne.n	800aebc <_dtoa_r+0xabc>
 800ae76:	2a00      	cmp	r2, #0
 800ae78:	ddee      	ble.n	800ae58 <_dtoa_r+0xa58>
 800ae7a:	ee18 1a10 	vmov	r1, s16
 800ae7e:	2201      	movs	r2, #1
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 facd 	bl	800b420 <__lshift>
 800ae86:	4631      	mov	r1, r6
 800ae88:	ee08 0a10 	vmov	s16, r0
 800ae8c:	f000 fb38 	bl	800b500 <__mcmp>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	dc03      	bgt.n	800ae9c <_dtoa_r+0xa9c>
 800ae94:	d1e0      	bne.n	800ae58 <_dtoa_r+0xa58>
 800ae96:	f01a 0f01 	tst.w	sl, #1
 800ae9a:	d0dd      	beq.n	800ae58 <_dtoa_r+0xa58>
 800ae9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aea0:	d1d7      	bne.n	800ae52 <_dtoa_r+0xa52>
 800aea2:	2339      	movs	r3, #57	; 0x39
 800aea4:	f88b 3000 	strb.w	r3, [fp]
 800aea8:	462b      	mov	r3, r5
 800aeaa:	461d      	mov	r5, r3
 800aeac:	3b01      	subs	r3, #1
 800aeae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aeb2:	2a39      	cmp	r2, #57	; 0x39
 800aeb4:	d071      	beq.n	800af9a <_dtoa_r+0xb9a>
 800aeb6:	3201      	adds	r2, #1
 800aeb8:	701a      	strb	r2, [r3, #0]
 800aeba:	e746      	b.n	800ad4a <_dtoa_r+0x94a>
 800aebc:	2a00      	cmp	r2, #0
 800aebe:	dd07      	ble.n	800aed0 <_dtoa_r+0xad0>
 800aec0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aec4:	d0ed      	beq.n	800aea2 <_dtoa_r+0xaa2>
 800aec6:	f10a 0301 	add.w	r3, sl, #1
 800aeca:	f88b 3000 	strb.w	r3, [fp]
 800aece:	e73c      	b.n	800ad4a <_dtoa_r+0x94a>
 800aed0:	9b05      	ldr	r3, [sp, #20]
 800aed2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aed6:	4599      	cmp	r9, r3
 800aed8:	d047      	beq.n	800af6a <_dtoa_r+0xb6a>
 800aeda:	ee18 1a10 	vmov	r1, s16
 800aede:	2300      	movs	r3, #0
 800aee0:	220a      	movs	r2, #10
 800aee2:	4620      	mov	r0, r4
 800aee4:	f000 f8ec 	bl	800b0c0 <__multadd>
 800aee8:	45b8      	cmp	r8, r7
 800aeea:	ee08 0a10 	vmov	s16, r0
 800aeee:	f04f 0300 	mov.w	r3, #0
 800aef2:	f04f 020a 	mov.w	r2, #10
 800aef6:	4641      	mov	r1, r8
 800aef8:	4620      	mov	r0, r4
 800aefa:	d106      	bne.n	800af0a <_dtoa_r+0xb0a>
 800aefc:	f000 f8e0 	bl	800b0c0 <__multadd>
 800af00:	4680      	mov	r8, r0
 800af02:	4607      	mov	r7, r0
 800af04:	f109 0901 	add.w	r9, r9, #1
 800af08:	e772      	b.n	800adf0 <_dtoa_r+0x9f0>
 800af0a:	f000 f8d9 	bl	800b0c0 <__multadd>
 800af0e:	4639      	mov	r1, r7
 800af10:	4680      	mov	r8, r0
 800af12:	2300      	movs	r3, #0
 800af14:	220a      	movs	r2, #10
 800af16:	4620      	mov	r0, r4
 800af18:	f000 f8d2 	bl	800b0c0 <__multadd>
 800af1c:	4607      	mov	r7, r0
 800af1e:	e7f1      	b.n	800af04 <_dtoa_r+0xb04>
 800af20:	9b03      	ldr	r3, [sp, #12]
 800af22:	9302      	str	r3, [sp, #8]
 800af24:	9d01      	ldr	r5, [sp, #4]
 800af26:	ee18 0a10 	vmov	r0, s16
 800af2a:	4631      	mov	r1, r6
 800af2c:	f7ff f9da 	bl	800a2e4 <quorem>
 800af30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	f805 ab01 	strb.w	sl, [r5], #1
 800af3a:	1aea      	subs	r2, r5, r3
 800af3c:	9b02      	ldr	r3, [sp, #8]
 800af3e:	4293      	cmp	r3, r2
 800af40:	dd09      	ble.n	800af56 <_dtoa_r+0xb56>
 800af42:	ee18 1a10 	vmov	r1, s16
 800af46:	2300      	movs	r3, #0
 800af48:	220a      	movs	r2, #10
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 f8b8 	bl	800b0c0 <__multadd>
 800af50:	ee08 0a10 	vmov	s16, r0
 800af54:	e7e7      	b.n	800af26 <_dtoa_r+0xb26>
 800af56:	9b02      	ldr	r3, [sp, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bfc8      	it	gt
 800af5c:	461d      	movgt	r5, r3
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	bfd8      	it	le
 800af62:	2501      	movle	r5, #1
 800af64:	441d      	add	r5, r3
 800af66:	f04f 0800 	mov.w	r8, #0
 800af6a:	ee18 1a10 	vmov	r1, s16
 800af6e:	2201      	movs	r2, #1
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fa55 	bl	800b420 <__lshift>
 800af76:	4631      	mov	r1, r6
 800af78:	ee08 0a10 	vmov	s16, r0
 800af7c:	f000 fac0 	bl	800b500 <__mcmp>
 800af80:	2800      	cmp	r0, #0
 800af82:	dc91      	bgt.n	800aea8 <_dtoa_r+0xaa8>
 800af84:	d102      	bne.n	800af8c <_dtoa_r+0xb8c>
 800af86:	f01a 0f01 	tst.w	sl, #1
 800af8a:	d18d      	bne.n	800aea8 <_dtoa_r+0xaa8>
 800af8c:	462b      	mov	r3, r5
 800af8e:	461d      	mov	r5, r3
 800af90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af94:	2a30      	cmp	r2, #48	; 0x30
 800af96:	d0fa      	beq.n	800af8e <_dtoa_r+0xb8e>
 800af98:	e6d7      	b.n	800ad4a <_dtoa_r+0x94a>
 800af9a:	9a01      	ldr	r2, [sp, #4]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d184      	bne.n	800aeaa <_dtoa_r+0xaaa>
 800afa0:	9b00      	ldr	r3, [sp, #0]
 800afa2:	3301      	adds	r3, #1
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	2331      	movs	r3, #49	; 0x31
 800afa8:	7013      	strb	r3, [r2, #0]
 800afaa:	e6ce      	b.n	800ad4a <_dtoa_r+0x94a>
 800afac:	4b09      	ldr	r3, [pc, #36]	; (800afd4 <_dtoa_r+0xbd4>)
 800afae:	f7ff ba95 	b.w	800a4dc <_dtoa_r+0xdc>
 800afb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f47f aa6e 	bne.w	800a496 <_dtoa_r+0x96>
 800afba:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <_dtoa_r+0xbd8>)
 800afbc:	f7ff ba8e 	b.w	800a4dc <_dtoa_r+0xdc>
 800afc0:	9b02      	ldr	r3, [sp, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dcae      	bgt.n	800af24 <_dtoa_r+0xb24>
 800afc6:	9b06      	ldr	r3, [sp, #24]
 800afc8:	2b02      	cmp	r3, #2
 800afca:	f73f aea8 	bgt.w	800ad1e <_dtoa_r+0x91e>
 800afce:	e7a9      	b.n	800af24 <_dtoa_r+0xb24>
 800afd0:	08028327 	.word	0x08028327
 800afd4:	08028284 	.word	0x08028284
 800afd8:	080282a8 	.word	0x080282a8

0800afdc <_localeconv_r>:
 800afdc:	4800      	ldr	r0, [pc, #0]	; (800afe0 <_localeconv_r+0x4>)
 800afde:	4770      	bx	lr
 800afe0:	200006b4 	.word	0x200006b4

0800afe4 <__malloc_lock>:
 800afe4:	4801      	ldr	r0, [pc, #4]	; (800afec <__malloc_lock+0x8>)
 800afe6:	f000 bd5e 	b.w	800baa6 <__retarget_lock_acquire_recursive>
 800afea:	bf00      	nop
 800afec:	2001b678 	.word	0x2001b678

0800aff0 <__malloc_unlock>:
 800aff0:	4801      	ldr	r0, [pc, #4]	; (800aff8 <__malloc_unlock+0x8>)
 800aff2:	f000 bd59 	b.w	800baa8 <__retarget_lock_release_recursive>
 800aff6:	bf00      	nop
 800aff8:	2001b678 	.word	0x2001b678

0800affc <_Balloc>:
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b000:	4604      	mov	r4, r0
 800b002:	460d      	mov	r5, r1
 800b004:	b976      	cbnz	r6, 800b024 <_Balloc+0x28>
 800b006:	2010      	movs	r0, #16
 800b008:	f7fe fbd4 	bl	80097b4 <malloc>
 800b00c:	4602      	mov	r2, r0
 800b00e:	6260      	str	r0, [r4, #36]	; 0x24
 800b010:	b920      	cbnz	r0, 800b01c <_Balloc+0x20>
 800b012:	4b18      	ldr	r3, [pc, #96]	; (800b074 <_Balloc+0x78>)
 800b014:	4818      	ldr	r0, [pc, #96]	; (800b078 <_Balloc+0x7c>)
 800b016:	2166      	movs	r1, #102	; 0x66
 800b018:	f000 fd14 	bl	800ba44 <__assert_func>
 800b01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b020:	6006      	str	r6, [r0, #0]
 800b022:	60c6      	str	r6, [r0, #12]
 800b024:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b026:	68f3      	ldr	r3, [r6, #12]
 800b028:	b183      	cbz	r3, 800b04c <_Balloc+0x50>
 800b02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b032:	b9b8      	cbnz	r0, 800b064 <_Balloc+0x68>
 800b034:	2101      	movs	r1, #1
 800b036:	fa01 f605 	lsl.w	r6, r1, r5
 800b03a:	1d72      	adds	r2, r6, #5
 800b03c:	0092      	lsls	r2, r2, #2
 800b03e:	4620      	mov	r0, r4
 800b040:	f000 fb60 	bl	800b704 <_calloc_r>
 800b044:	b160      	cbz	r0, 800b060 <_Balloc+0x64>
 800b046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b04a:	e00e      	b.n	800b06a <_Balloc+0x6e>
 800b04c:	2221      	movs	r2, #33	; 0x21
 800b04e:	2104      	movs	r1, #4
 800b050:	4620      	mov	r0, r4
 800b052:	f000 fb57 	bl	800b704 <_calloc_r>
 800b056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b058:	60f0      	str	r0, [r6, #12]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1e4      	bne.n	800b02a <_Balloc+0x2e>
 800b060:	2000      	movs	r0, #0
 800b062:	bd70      	pop	{r4, r5, r6, pc}
 800b064:	6802      	ldr	r2, [r0, #0]
 800b066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b06a:	2300      	movs	r3, #0
 800b06c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b070:	e7f7      	b.n	800b062 <_Balloc+0x66>
 800b072:	bf00      	nop
 800b074:	080282b5 	.word	0x080282b5
 800b078:	08028338 	.word	0x08028338

0800b07c <_Bfree>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b080:	4605      	mov	r5, r0
 800b082:	460c      	mov	r4, r1
 800b084:	b976      	cbnz	r6, 800b0a4 <_Bfree+0x28>
 800b086:	2010      	movs	r0, #16
 800b088:	f7fe fb94 	bl	80097b4 <malloc>
 800b08c:	4602      	mov	r2, r0
 800b08e:	6268      	str	r0, [r5, #36]	; 0x24
 800b090:	b920      	cbnz	r0, 800b09c <_Bfree+0x20>
 800b092:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <_Bfree+0x3c>)
 800b094:	4809      	ldr	r0, [pc, #36]	; (800b0bc <_Bfree+0x40>)
 800b096:	218a      	movs	r1, #138	; 0x8a
 800b098:	f000 fcd4 	bl	800ba44 <__assert_func>
 800b09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0a0:	6006      	str	r6, [r0, #0]
 800b0a2:	60c6      	str	r6, [r0, #12]
 800b0a4:	b13c      	cbz	r4, 800b0b6 <_Bfree+0x3a>
 800b0a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0a8:	6862      	ldr	r2, [r4, #4]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0b0:	6021      	str	r1, [r4, #0]
 800b0b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}
 800b0b8:	080282b5 	.word	0x080282b5
 800b0bc:	08028338 	.word	0x08028338

0800b0c0 <__multadd>:
 800b0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c4:	690d      	ldr	r5, [r1, #16]
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	461e      	mov	r6, r3
 800b0cc:	f101 0c14 	add.w	ip, r1, #20
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f8dc 3000 	ldr.w	r3, [ip]
 800b0d6:	b299      	uxth	r1, r3
 800b0d8:	fb02 6101 	mla	r1, r2, r1, r6
 800b0dc:	0c1e      	lsrs	r6, r3, #16
 800b0de:	0c0b      	lsrs	r3, r1, #16
 800b0e0:	fb02 3306 	mla	r3, r2, r6, r3
 800b0e4:	b289      	uxth	r1, r1
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0ec:	4285      	cmp	r5, r0
 800b0ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b0f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0f6:	dcec      	bgt.n	800b0d2 <__multadd+0x12>
 800b0f8:	b30e      	cbz	r6, 800b13e <__multadd+0x7e>
 800b0fa:	68a3      	ldr	r3, [r4, #8]
 800b0fc:	42ab      	cmp	r3, r5
 800b0fe:	dc19      	bgt.n	800b134 <__multadd+0x74>
 800b100:	6861      	ldr	r1, [r4, #4]
 800b102:	4638      	mov	r0, r7
 800b104:	3101      	adds	r1, #1
 800b106:	f7ff ff79 	bl	800affc <_Balloc>
 800b10a:	4680      	mov	r8, r0
 800b10c:	b928      	cbnz	r0, 800b11a <__multadd+0x5a>
 800b10e:	4602      	mov	r2, r0
 800b110:	4b0c      	ldr	r3, [pc, #48]	; (800b144 <__multadd+0x84>)
 800b112:	480d      	ldr	r0, [pc, #52]	; (800b148 <__multadd+0x88>)
 800b114:	21b5      	movs	r1, #181	; 0xb5
 800b116:	f000 fc95 	bl	800ba44 <__assert_func>
 800b11a:	6922      	ldr	r2, [r4, #16]
 800b11c:	3202      	adds	r2, #2
 800b11e:	f104 010c 	add.w	r1, r4, #12
 800b122:	0092      	lsls	r2, r2, #2
 800b124:	300c      	adds	r0, #12
 800b126:	f7fe fb4d 	bl	80097c4 <memcpy>
 800b12a:	4621      	mov	r1, r4
 800b12c:	4638      	mov	r0, r7
 800b12e:	f7ff ffa5 	bl	800b07c <_Bfree>
 800b132:	4644      	mov	r4, r8
 800b134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b138:	3501      	adds	r5, #1
 800b13a:	615e      	str	r6, [r3, #20]
 800b13c:	6125      	str	r5, [r4, #16]
 800b13e:	4620      	mov	r0, r4
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	08028327 	.word	0x08028327
 800b148:	08028338 	.word	0x08028338

0800b14c <__hi0bits>:
 800b14c:	0c03      	lsrs	r3, r0, #16
 800b14e:	041b      	lsls	r3, r3, #16
 800b150:	b9d3      	cbnz	r3, 800b188 <__hi0bits+0x3c>
 800b152:	0400      	lsls	r0, r0, #16
 800b154:	2310      	movs	r3, #16
 800b156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b15a:	bf04      	itt	eq
 800b15c:	0200      	lsleq	r0, r0, #8
 800b15e:	3308      	addeq	r3, #8
 800b160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b164:	bf04      	itt	eq
 800b166:	0100      	lsleq	r0, r0, #4
 800b168:	3304      	addeq	r3, #4
 800b16a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b16e:	bf04      	itt	eq
 800b170:	0080      	lsleq	r0, r0, #2
 800b172:	3302      	addeq	r3, #2
 800b174:	2800      	cmp	r0, #0
 800b176:	db05      	blt.n	800b184 <__hi0bits+0x38>
 800b178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b17c:	f103 0301 	add.w	r3, r3, #1
 800b180:	bf08      	it	eq
 800b182:	2320      	moveq	r3, #32
 800b184:	4618      	mov	r0, r3
 800b186:	4770      	bx	lr
 800b188:	2300      	movs	r3, #0
 800b18a:	e7e4      	b.n	800b156 <__hi0bits+0xa>

0800b18c <__lo0bits>:
 800b18c:	6803      	ldr	r3, [r0, #0]
 800b18e:	f013 0207 	ands.w	r2, r3, #7
 800b192:	4601      	mov	r1, r0
 800b194:	d00b      	beq.n	800b1ae <__lo0bits+0x22>
 800b196:	07da      	lsls	r2, r3, #31
 800b198:	d423      	bmi.n	800b1e2 <__lo0bits+0x56>
 800b19a:	0798      	lsls	r0, r3, #30
 800b19c:	bf49      	itett	mi
 800b19e:	085b      	lsrmi	r3, r3, #1
 800b1a0:	089b      	lsrpl	r3, r3, #2
 800b1a2:	2001      	movmi	r0, #1
 800b1a4:	600b      	strmi	r3, [r1, #0]
 800b1a6:	bf5c      	itt	pl
 800b1a8:	600b      	strpl	r3, [r1, #0]
 800b1aa:	2002      	movpl	r0, #2
 800b1ac:	4770      	bx	lr
 800b1ae:	b298      	uxth	r0, r3
 800b1b0:	b9a8      	cbnz	r0, 800b1de <__lo0bits+0x52>
 800b1b2:	0c1b      	lsrs	r3, r3, #16
 800b1b4:	2010      	movs	r0, #16
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	b90a      	cbnz	r2, 800b1be <__lo0bits+0x32>
 800b1ba:	3008      	adds	r0, #8
 800b1bc:	0a1b      	lsrs	r3, r3, #8
 800b1be:	071a      	lsls	r2, r3, #28
 800b1c0:	bf04      	itt	eq
 800b1c2:	091b      	lsreq	r3, r3, #4
 800b1c4:	3004      	addeq	r0, #4
 800b1c6:	079a      	lsls	r2, r3, #30
 800b1c8:	bf04      	itt	eq
 800b1ca:	089b      	lsreq	r3, r3, #2
 800b1cc:	3002      	addeq	r0, #2
 800b1ce:	07da      	lsls	r2, r3, #31
 800b1d0:	d403      	bmi.n	800b1da <__lo0bits+0x4e>
 800b1d2:	085b      	lsrs	r3, r3, #1
 800b1d4:	f100 0001 	add.w	r0, r0, #1
 800b1d8:	d005      	beq.n	800b1e6 <__lo0bits+0x5a>
 800b1da:	600b      	str	r3, [r1, #0]
 800b1dc:	4770      	bx	lr
 800b1de:	4610      	mov	r0, r2
 800b1e0:	e7e9      	b.n	800b1b6 <__lo0bits+0x2a>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	4770      	bx	lr
 800b1e6:	2020      	movs	r0, #32
 800b1e8:	4770      	bx	lr
	...

0800b1ec <__i2b>:
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	f7ff ff03 	bl	800affc <_Balloc>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	b928      	cbnz	r0, 800b206 <__i2b+0x1a>
 800b1fa:	4b05      	ldr	r3, [pc, #20]	; (800b210 <__i2b+0x24>)
 800b1fc:	4805      	ldr	r0, [pc, #20]	; (800b214 <__i2b+0x28>)
 800b1fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b202:	f000 fc1f 	bl	800ba44 <__assert_func>
 800b206:	2301      	movs	r3, #1
 800b208:	6144      	str	r4, [r0, #20]
 800b20a:	6103      	str	r3, [r0, #16]
 800b20c:	bd10      	pop	{r4, pc}
 800b20e:	bf00      	nop
 800b210:	08028327 	.word	0x08028327
 800b214:	08028338 	.word	0x08028338

0800b218 <__multiply>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	4691      	mov	r9, r2
 800b21e:	690a      	ldr	r2, [r1, #16]
 800b220:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b224:	429a      	cmp	r2, r3
 800b226:	bfb8      	it	lt
 800b228:	460b      	movlt	r3, r1
 800b22a:	460c      	mov	r4, r1
 800b22c:	bfbc      	itt	lt
 800b22e:	464c      	movlt	r4, r9
 800b230:	4699      	movlt	r9, r3
 800b232:	6927      	ldr	r7, [r4, #16]
 800b234:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b238:	68a3      	ldr	r3, [r4, #8]
 800b23a:	6861      	ldr	r1, [r4, #4]
 800b23c:	eb07 060a 	add.w	r6, r7, sl
 800b240:	42b3      	cmp	r3, r6
 800b242:	b085      	sub	sp, #20
 800b244:	bfb8      	it	lt
 800b246:	3101      	addlt	r1, #1
 800b248:	f7ff fed8 	bl	800affc <_Balloc>
 800b24c:	b930      	cbnz	r0, 800b25c <__multiply+0x44>
 800b24e:	4602      	mov	r2, r0
 800b250:	4b44      	ldr	r3, [pc, #272]	; (800b364 <__multiply+0x14c>)
 800b252:	4845      	ldr	r0, [pc, #276]	; (800b368 <__multiply+0x150>)
 800b254:	f240 115d 	movw	r1, #349	; 0x15d
 800b258:	f000 fbf4 	bl	800ba44 <__assert_func>
 800b25c:	f100 0514 	add.w	r5, r0, #20
 800b260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b264:	462b      	mov	r3, r5
 800b266:	2200      	movs	r2, #0
 800b268:	4543      	cmp	r3, r8
 800b26a:	d321      	bcc.n	800b2b0 <__multiply+0x98>
 800b26c:	f104 0314 	add.w	r3, r4, #20
 800b270:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b274:	f109 0314 	add.w	r3, r9, #20
 800b278:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b27c:	9202      	str	r2, [sp, #8]
 800b27e:	1b3a      	subs	r2, r7, r4
 800b280:	3a15      	subs	r2, #21
 800b282:	f022 0203 	bic.w	r2, r2, #3
 800b286:	3204      	adds	r2, #4
 800b288:	f104 0115 	add.w	r1, r4, #21
 800b28c:	428f      	cmp	r7, r1
 800b28e:	bf38      	it	cc
 800b290:	2204      	movcc	r2, #4
 800b292:	9201      	str	r2, [sp, #4]
 800b294:	9a02      	ldr	r2, [sp, #8]
 800b296:	9303      	str	r3, [sp, #12]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d80c      	bhi.n	800b2b6 <__multiply+0x9e>
 800b29c:	2e00      	cmp	r6, #0
 800b29e:	dd03      	ble.n	800b2a8 <__multiply+0x90>
 800b2a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d05a      	beq.n	800b35e <__multiply+0x146>
 800b2a8:	6106      	str	r6, [r0, #16]
 800b2aa:	b005      	add	sp, #20
 800b2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b0:	f843 2b04 	str.w	r2, [r3], #4
 800b2b4:	e7d8      	b.n	800b268 <__multiply+0x50>
 800b2b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2ba:	f1ba 0f00 	cmp.w	sl, #0
 800b2be:	d024      	beq.n	800b30a <__multiply+0xf2>
 800b2c0:	f104 0e14 	add.w	lr, r4, #20
 800b2c4:	46a9      	mov	r9, r5
 800b2c6:	f04f 0c00 	mov.w	ip, #0
 800b2ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2ce:	f8d9 1000 	ldr.w	r1, [r9]
 800b2d2:	fa1f fb82 	uxth.w	fp, r2
 800b2d6:	b289      	uxth	r1, r1
 800b2d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b2e0:	f8d9 2000 	ldr.w	r2, [r9]
 800b2e4:	4461      	add	r1, ip
 800b2e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800b2ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2f2:	b289      	uxth	r1, r1
 800b2f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2f8:	4577      	cmp	r7, lr
 800b2fa:	f849 1b04 	str.w	r1, [r9], #4
 800b2fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b302:	d8e2      	bhi.n	800b2ca <__multiply+0xb2>
 800b304:	9a01      	ldr	r2, [sp, #4]
 800b306:	f845 c002 	str.w	ip, [r5, r2]
 800b30a:	9a03      	ldr	r2, [sp, #12]
 800b30c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b310:	3304      	adds	r3, #4
 800b312:	f1b9 0f00 	cmp.w	r9, #0
 800b316:	d020      	beq.n	800b35a <__multiply+0x142>
 800b318:	6829      	ldr	r1, [r5, #0]
 800b31a:	f104 0c14 	add.w	ip, r4, #20
 800b31e:	46ae      	mov	lr, r5
 800b320:	f04f 0a00 	mov.w	sl, #0
 800b324:	f8bc b000 	ldrh.w	fp, [ip]
 800b328:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b32c:	fb09 220b 	mla	r2, r9, fp, r2
 800b330:	4492      	add	sl, r2
 800b332:	b289      	uxth	r1, r1
 800b334:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b338:	f84e 1b04 	str.w	r1, [lr], #4
 800b33c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b340:	f8be 1000 	ldrh.w	r1, [lr]
 800b344:	0c12      	lsrs	r2, r2, #16
 800b346:	fb09 1102 	mla	r1, r9, r2, r1
 800b34a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b34e:	4567      	cmp	r7, ip
 800b350:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b354:	d8e6      	bhi.n	800b324 <__multiply+0x10c>
 800b356:	9a01      	ldr	r2, [sp, #4]
 800b358:	50a9      	str	r1, [r5, r2]
 800b35a:	3504      	adds	r5, #4
 800b35c:	e79a      	b.n	800b294 <__multiply+0x7c>
 800b35e:	3e01      	subs	r6, #1
 800b360:	e79c      	b.n	800b29c <__multiply+0x84>
 800b362:	bf00      	nop
 800b364:	08028327 	.word	0x08028327
 800b368:	08028338 	.word	0x08028338

0800b36c <__pow5mult>:
 800b36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b370:	4615      	mov	r5, r2
 800b372:	f012 0203 	ands.w	r2, r2, #3
 800b376:	4606      	mov	r6, r0
 800b378:	460f      	mov	r7, r1
 800b37a:	d007      	beq.n	800b38c <__pow5mult+0x20>
 800b37c:	4c25      	ldr	r4, [pc, #148]	; (800b414 <__pow5mult+0xa8>)
 800b37e:	3a01      	subs	r2, #1
 800b380:	2300      	movs	r3, #0
 800b382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b386:	f7ff fe9b 	bl	800b0c0 <__multadd>
 800b38a:	4607      	mov	r7, r0
 800b38c:	10ad      	asrs	r5, r5, #2
 800b38e:	d03d      	beq.n	800b40c <__pow5mult+0xa0>
 800b390:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b392:	b97c      	cbnz	r4, 800b3b4 <__pow5mult+0x48>
 800b394:	2010      	movs	r0, #16
 800b396:	f7fe fa0d 	bl	80097b4 <malloc>
 800b39a:	4602      	mov	r2, r0
 800b39c:	6270      	str	r0, [r6, #36]	; 0x24
 800b39e:	b928      	cbnz	r0, 800b3ac <__pow5mult+0x40>
 800b3a0:	4b1d      	ldr	r3, [pc, #116]	; (800b418 <__pow5mult+0xac>)
 800b3a2:	481e      	ldr	r0, [pc, #120]	; (800b41c <__pow5mult+0xb0>)
 800b3a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3a8:	f000 fb4c 	bl	800ba44 <__assert_func>
 800b3ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3b0:	6004      	str	r4, [r0, #0]
 800b3b2:	60c4      	str	r4, [r0, #12]
 800b3b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3bc:	b94c      	cbnz	r4, 800b3d2 <__pow5mult+0x66>
 800b3be:	f240 2171 	movw	r1, #625	; 0x271
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7ff ff12 	bl	800b1ec <__i2b>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	6003      	str	r3, [r0, #0]
 800b3d2:	f04f 0900 	mov.w	r9, #0
 800b3d6:	07eb      	lsls	r3, r5, #31
 800b3d8:	d50a      	bpl.n	800b3f0 <__pow5mult+0x84>
 800b3da:	4639      	mov	r1, r7
 800b3dc:	4622      	mov	r2, r4
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7ff ff1a 	bl	800b218 <__multiply>
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	4680      	mov	r8, r0
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f7ff fe47 	bl	800b07c <_Bfree>
 800b3ee:	4647      	mov	r7, r8
 800b3f0:	106d      	asrs	r5, r5, #1
 800b3f2:	d00b      	beq.n	800b40c <__pow5mult+0xa0>
 800b3f4:	6820      	ldr	r0, [r4, #0]
 800b3f6:	b938      	cbnz	r0, 800b408 <__pow5mult+0x9c>
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f7ff ff0b 	bl	800b218 <__multiply>
 800b402:	6020      	str	r0, [r4, #0]
 800b404:	f8c0 9000 	str.w	r9, [r0]
 800b408:	4604      	mov	r4, r0
 800b40a:	e7e4      	b.n	800b3d6 <__pow5mult+0x6a>
 800b40c:	4638      	mov	r0, r7
 800b40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b412:	bf00      	nop
 800b414:	08028488 	.word	0x08028488
 800b418:	080282b5 	.word	0x080282b5
 800b41c:	08028338 	.word	0x08028338

0800b420 <__lshift>:
 800b420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b424:	460c      	mov	r4, r1
 800b426:	6849      	ldr	r1, [r1, #4]
 800b428:	6923      	ldr	r3, [r4, #16]
 800b42a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b42e:	68a3      	ldr	r3, [r4, #8]
 800b430:	4607      	mov	r7, r0
 800b432:	4691      	mov	r9, r2
 800b434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b438:	f108 0601 	add.w	r6, r8, #1
 800b43c:	42b3      	cmp	r3, r6
 800b43e:	db0b      	blt.n	800b458 <__lshift+0x38>
 800b440:	4638      	mov	r0, r7
 800b442:	f7ff fddb 	bl	800affc <_Balloc>
 800b446:	4605      	mov	r5, r0
 800b448:	b948      	cbnz	r0, 800b45e <__lshift+0x3e>
 800b44a:	4602      	mov	r2, r0
 800b44c:	4b2a      	ldr	r3, [pc, #168]	; (800b4f8 <__lshift+0xd8>)
 800b44e:	482b      	ldr	r0, [pc, #172]	; (800b4fc <__lshift+0xdc>)
 800b450:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b454:	f000 faf6 	bl	800ba44 <__assert_func>
 800b458:	3101      	adds	r1, #1
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	e7ee      	b.n	800b43c <__lshift+0x1c>
 800b45e:	2300      	movs	r3, #0
 800b460:	f100 0114 	add.w	r1, r0, #20
 800b464:	f100 0210 	add.w	r2, r0, #16
 800b468:	4618      	mov	r0, r3
 800b46a:	4553      	cmp	r3, sl
 800b46c:	db37      	blt.n	800b4de <__lshift+0xbe>
 800b46e:	6920      	ldr	r0, [r4, #16]
 800b470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b474:	f104 0314 	add.w	r3, r4, #20
 800b478:	f019 091f 	ands.w	r9, r9, #31
 800b47c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b480:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b484:	d02f      	beq.n	800b4e6 <__lshift+0xc6>
 800b486:	f1c9 0e20 	rsb	lr, r9, #32
 800b48a:	468a      	mov	sl, r1
 800b48c:	f04f 0c00 	mov.w	ip, #0
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	fa02 f209 	lsl.w	r2, r2, r9
 800b496:	ea42 020c 	orr.w	r2, r2, ip
 800b49a:	f84a 2b04 	str.w	r2, [sl], #4
 800b49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a2:	4298      	cmp	r0, r3
 800b4a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b4a8:	d8f2      	bhi.n	800b490 <__lshift+0x70>
 800b4aa:	1b03      	subs	r3, r0, r4
 800b4ac:	3b15      	subs	r3, #21
 800b4ae:	f023 0303 	bic.w	r3, r3, #3
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	f104 0215 	add.w	r2, r4, #21
 800b4b8:	4290      	cmp	r0, r2
 800b4ba:	bf38      	it	cc
 800b4bc:	2304      	movcc	r3, #4
 800b4be:	f841 c003 	str.w	ip, [r1, r3]
 800b4c2:	f1bc 0f00 	cmp.w	ip, #0
 800b4c6:	d001      	beq.n	800b4cc <__lshift+0xac>
 800b4c8:	f108 0602 	add.w	r6, r8, #2
 800b4cc:	3e01      	subs	r6, #1
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	612e      	str	r6, [r5, #16]
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	f7ff fdd2 	bl	800b07c <_Bfree>
 800b4d8:	4628      	mov	r0, r5
 800b4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	e7c1      	b.n	800b46a <__lshift+0x4a>
 800b4e6:	3904      	subs	r1, #4
 800b4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4f0:	4298      	cmp	r0, r3
 800b4f2:	d8f9      	bhi.n	800b4e8 <__lshift+0xc8>
 800b4f4:	e7ea      	b.n	800b4cc <__lshift+0xac>
 800b4f6:	bf00      	nop
 800b4f8:	08028327 	.word	0x08028327
 800b4fc:	08028338 	.word	0x08028338

0800b500 <__mcmp>:
 800b500:	b530      	push	{r4, r5, lr}
 800b502:	6902      	ldr	r2, [r0, #16]
 800b504:	690c      	ldr	r4, [r1, #16]
 800b506:	1b12      	subs	r2, r2, r4
 800b508:	d10e      	bne.n	800b528 <__mcmp+0x28>
 800b50a:	f100 0314 	add.w	r3, r0, #20
 800b50e:	3114      	adds	r1, #20
 800b510:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b514:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b518:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b51c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b520:	42a5      	cmp	r5, r4
 800b522:	d003      	beq.n	800b52c <__mcmp+0x2c>
 800b524:	d305      	bcc.n	800b532 <__mcmp+0x32>
 800b526:	2201      	movs	r2, #1
 800b528:	4610      	mov	r0, r2
 800b52a:	bd30      	pop	{r4, r5, pc}
 800b52c:	4283      	cmp	r3, r0
 800b52e:	d3f3      	bcc.n	800b518 <__mcmp+0x18>
 800b530:	e7fa      	b.n	800b528 <__mcmp+0x28>
 800b532:	f04f 32ff 	mov.w	r2, #4294967295
 800b536:	e7f7      	b.n	800b528 <__mcmp+0x28>

0800b538 <__mdiff>:
 800b538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	460c      	mov	r4, r1
 800b53e:	4606      	mov	r6, r0
 800b540:	4611      	mov	r1, r2
 800b542:	4620      	mov	r0, r4
 800b544:	4690      	mov	r8, r2
 800b546:	f7ff ffdb 	bl	800b500 <__mcmp>
 800b54a:	1e05      	subs	r5, r0, #0
 800b54c:	d110      	bne.n	800b570 <__mdiff+0x38>
 800b54e:	4629      	mov	r1, r5
 800b550:	4630      	mov	r0, r6
 800b552:	f7ff fd53 	bl	800affc <_Balloc>
 800b556:	b930      	cbnz	r0, 800b566 <__mdiff+0x2e>
 800b558:	4b3a      	ldr	r3, [pc, #232]	; (800b644 <__mdiff+0x10c>)
 800b55a:	4602      	mov	r2, r0
 800b55c:	f240 2132 	movw	r1, #562	; 0x232
 800b560:	4839      	ldr	r0, [pc, #228]	; (800b648 <__mdiff+0x110>)
 800b562:	f000 fa6f 	bl	800ba44 <__assert_func>
 800b566:	2301      	movs	r3, #1
 800b568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b56c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b570:	bfa4      	itt	ge
 800b572:	4643      	movge	r3, r8
 800b574:	46a0      	movge	r8, r4
 800b576:	4630      	mov	r0, r6
 800b578:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b57c:	bfa6      	itte	ge
 800b57e:	461c      	movge	r4, r3
 800b580:	2500      	movge	r5, #0
 800b582:	2501      	movlt	r5, #1
 800b584:	f7ff fd3a 	bl	800affc <_Balloc>
 800b588:	b920      	cbnz	r0, 800b594 <__mdiff+0x5c>
 800b58a:	4b2e      	ldr	r3, [pc, #184]	; (800b644 <__mdiff+0x10c>)
 800b58c:	4602      	mov	r2, r0
 800b58e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b592:	e7e5      	b.n	800b560 <__mdiff+0x28>
 800b594:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b598:	6926      	ldr	r6, [r4, #16]
 800b59a:	60c5      	str	r5, [r0, #12]
 800b59c:	f104 0914 	add.w	r9, r4, #20
 800b5a0:	f108 0514 	add.w	r5, r8, #20
 800b5a4:	f100 0e14 	add.w	lr, r0, #20
 800b5a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5b0:	f108 0210 	add.w	r2, r8, #16
 800b5b4:	46f2      	mov	sl, lr
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5c0:	fa1f f883 	uxth.w	r8, r3
 800b5c4:	fa11 f18b 	uxtah	r1, r1, fp
 800b5c8:	0c1b      	lsrs	r3, r3, #16
 800b5ca:	eba1 0808 	sub.w	r8, r1, r8
 800b5ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5d6:	fa1f f888 	uxth.w	r8, r8
 800b5da:	1419      	asrs	r1, r3, #16
 800b5dc:	454e      	cmp	r6, r9
 800b5de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5e2:	f84a 3b04 	str.w	r3, [sl], #4
 800b5e6:	d8e7      	bhi.n	800b5b8 <__mdiff+0x80>
 800b5e8:	1b33      	subs	r3, r6, r4
 800b5ea:	3b15      	subs	r3, #21
 800b5ec:	f023 0303 	bic.w	r3, r3, #3
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	3415      	adds	r4, #21
 800b5f4:	42a6      	cmp	r6, r4
 800b5f6:	bf38      	it	cc
 800b5f8:	2304      	movcc	r3, #4
 800b5fa:	441d      	add	r5, r3
 800b5fc:	4473      	add	r3, lr
 800b5fe:	469e      	mov	lr, r3
 800b600:	462e      	mov	r6, r5
 800b602:	4566      	cmp	r6, ip
 800b604:	d30e      	bcc.n	800b624 <__mdiff+0xec>
 800b606:	f10c 0203 	add.w	r2, ip, #3
 800b60a:	1b52      	subs	r2, r2, r5
 800b60c:	f022 0203 	bic.w	r2, r2, #3
 800b610:	3d03      	subs	r5, #3
 800b612:	45ac      	cmp	ip, r5
 800b614:	bf38      	it	cc
 800b616:	2200      	movcc	r2, #0
 800b618:	441a      	add	r2, r3
 800b61a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b61e:	b17b      	cbz	r3, 800b640 <__mdiff+0x108>
 800b620:	6107      	str	r7, [r0, #16]
 800b622:	e7a3      	b.n	800b56c <__mdiff+0x34>
 800b624:	f856 8b04 	ldr.w	r8, [r6], #4
 800b628:	fa11 f288 	uxtah	r2, r1, r8
 800b62c:	1414      	asrs	r4, r2, #16
 800b62e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b632:	b292      	uxth	r2, r2
 800b634:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b638:	f84e 2b04 	str.w	r2, [lr], #4
 800b63c:	1421      	asrs	r1, r4, #16
 800b63e:	e7e0      	b.n	800b602 <__mdiff+0xca>
 800b640:	3f01      	subs	r7, #1
 800b642:	e7ea      	b.n	800b61a <__mdiff+0xe2>
 800b644:	08028327 	.word	0x08028327
 800b648:	08028338 	.word	0x08028338

0800b64c <__d2b>:
 800b64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b650:	4689      	mov	r9, r1
 800b652:	2101      	movs	r1, #1
 800b654:	ec57 6b10 	vmov	r6, r7, d0
 800b658:	4690      	mov	r8, r2
 800b65a:	f7ff fccf 	bl	800affc <_Balloc>
 800b65e:	4604      	mov	r4, r0
 800b660:	b930      	cbnz	r0, 800b670 <__d2b+0x24>
 800b662:	4602      	mov	r2, r0
 800b664:	4b25      	ldr	r3, [pc, #148]	; (800b6fc <__d2b+0xb0>)
 800b666:	4826      	ldr	r0, [pc, #152]	; (800b700 <__d2b+0xb4>)
 800b668:	f240 310a 	movw	r1, #778	; 0x30a
 800b66c:	f000 f9ea 	bl	800ba44 <__assert_func>
 800b670:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b674:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b678:	bb35      	cbnz	r5, 800b6c8 <__d2b+0x7c>
 800b67a:	2e00      	cmp	r6, #0
 800b67c:	9301      	str	r3, [sp, #4]
 800b67e:	d028      	beq.n	800b6d2 <__d2b+0x86>
 800b680:	4668      	mov	r0, sp
 800b682:	9600      	str	r6, [sp, #0]
 800b684:	f7ff fd82 	bl	800b18c <__lo0bits>
 800b688:	9900      	ldr	r1, [sp, #0]
 800b68a:	b300      	cbz	r0, 800b6ce <__d2b+0x82>
 800b68c:	9a01      	ldr	r2, [sp, #4]
 800b68e:	f1c0 0320 	rsb	r3, r0, #32
 800b692:	fa02 f303 	lsl.w	r3, r2, r3
 800b696:	430b      	orrs	r3, r1
 800b698:	40c2      	lsrs	r2, r0
 800b69a:	6163      	str	r3, [r4, #20]
 800b69c:	9201      	str	r2, [sp, #4]
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	61a3      	str	r3, [r4, #24]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	bf14      	ite	ne
 800b6a6:	2202      	movne	r2, #2
 800b6a8:	2201      	moveq	r2, #1
 800b6aa:	6122      	str	r2, [r4, #16]
 800b6ac:	b1d5      	cbz	r5, 800b6e4 <__d2b+0x98>
 800b6ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6b2:	4405      	add	r5, r0
 800b6b4:	f8c9 5000 	str.w	r5, [r9]
 800b6b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6bc:	f8c8 0000 	str.w	r0, [r8]
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	b003      	add	sp, #12
 800b6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6cc:	e7d5      	b.n	800b67a <__d2b+0x2e>
 800b6ce:	6161      	str	r1, [r4, #20]
 800b6d0:	e7e5      	b.n	800b69e <__d2b+0x52>
 800b6d2:	a801      	add	r0, sp, #4
 800b6d4:	f7ff fd5a 	bl	800b18c <__lo0bits>
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	6163      	str	r3, [r4, #20]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	6122      	str	r2, [r4, #16]
 800b6e0:	3020      	adds	r0, #32
 800b6e2:	e7e3      	b.n	800b6ac <__d2b+0x60>
 800b6e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6ec:	f8c9 0000 	str.w	r0, [r9]
 800b6f0:	6918      	ldr	r0, [r3, #16]
 800b6f2:	f7ff fd2b 	bl	800b14c <__hi0bits>
 800b6f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6fa:	e7df      	b.n	800b6bc <__d2b+0x70>
 800b6fc:	08028327 	.word	0x08028327
 800b700:	08028338 	.word	0x08028338

0800b704 <_calloc_r>:
 800b704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b706:	fba1 2402 	umull	r2, r4, r1, r2
 800b70a:	b94c      	cbnz	r4, 800b720 <_calloc_r+0x1c>
 800b70c:	4611      	mov	r1, r2
 800b70e:	9201      	str	r2, [sp, #4]
 800b710:	f7fe f8da 	bl	80098c8 <_malloc_r>
 800b714:	9a01      	ldr	r2, [sp, #4]
 800b716:	4605      	mov	r5, r0
 800b718:	b930      	cbnz	r0, 800b728 <_calloc_r+0x24>
 800b71a:	4628      	mov	r0, r5
 800b71c:	b003      	add	sp, #12
 800b71e:	bd30      	pop	{r4, r5, pc}
 800b720:	220c      	movs	r2, #12
 800b722:	6002      	str	r2, [r0, #0]
 800b724:	2500      	movs	r5, #0
 800b726:	e7f8      	b.n	800b71a <_calloc_r+0x16>
 800b728:	4621      	mov	r1, r4
 800b72a:	f7fe f859 	bl	80097e0 <memset>
 800b72e:	e7f4      	b.n	800b71a <_calloc_r+0x16>

0800b730 <_realloc_r>:
 800b730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b734:	4680      	mov	r8, r0
 800b736:	4614      	mov	r4, r2
 800b738:	460e      	mov	r6, r1
 800b73a:	b921      	cbnz	r1, 800b746 <_realloc_r+0x16>
 800b73c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b740:	4611      	mov	r1, r2
 800b742:	f7fe b8c1 	b.w	80098c8 <_malloc_r>
 800b746:	b92a      	cbnz	r2, 800b754 <_realloc_r+0x24>
 800b748:	f7fe f852 	bl	80097f0 <_free_r>
 800b74c:	4625      	mov	r5, r4
 800b74e:	4628      	mov	r0, r5
 800b750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b754:	f000 f9d5 	bl	800bb02 <_malloc_usable_size_r>
 800b758:	4284      	cmp	r4, r0
 800b75a:	4607      	mov	r7, r0
 800b75c:	d802      	bhi.n	800b764 <_realloc_r+0x34>
 800b75e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b762:	d812      	bhi.n	800b78a <_realloc_r+0x5a>
 800b764:	4621      	mov	r1, r4
 800b766:	4640      	mov	r0, r8
 800b768:	f7fe f8ae 	bl	80098c8 <_malloc_r>
 800b76c:	4605      	mov	r5, r0
 800b76e:	2800      	cmp	r0, #0
 800b770:	d0ed      	beq.n	800b74e <_realloc_r+0x1e>
 800b772:	42bc      	cmp	r4, r7
 800b774:	4622      	mov	r2, r4
 800b776:	4631      	mov	r1, r6
 800b778:	bf28      	it	cs
 800b77a:	463a      	movcs	r2, r7
 800b77c:	f7fe f822 	bl	80097c4 <memcpy>
 800b780:	4631      	mov	r1, r6
 800b782:	4640      	mov	r0, r8
 800b784:	f7fe f834 	bl	80097f0 <_free_r>
 800b788:	e7e1      	b.n	800b74e <_realloc_r+0x1e>
 800b78a:	4635      	mov	r5, r6
 800b78c:	e7df      	b.n	800b74e <_realloc_r+0x1e>

0800b78e <__ssputs_r>:
 800b78e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b792:	688e      	ldr	r6, [r1, #8]
 800b794:	429e      	cmp	r6, r3
 800b796:	4682      	mov	sl, r0
 800b798:	460c      	mov	r4, r1
 800b79a:	4690      	mov	r8, r2
 800b79c:	461f      	mov	r7, r3
 800b79e:	d838      	bhi.n	800b812 <__ssputs_r+0x84>
 800b7a0:	898a      	ldrh	r2, [r1, #12]
 800b7a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7a6:	d032      	beq.n	800b80e <__ssputs_r+0x80>
 800b7a8:	6825      	ldr	r5, [r4, #0]
 800b7aa:	6909      	ldr	r1, [r1, #16]
 800b7ac:	eba5 0901 	sub.w	r9, r5, r1
 800b7b0:	6965      	ldr	r5, [r4, #20]
 800b7b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	444b      	add	r3, r9
 800b7be:	106d      	asrs	r5, r5, #1
 800b7c0:	429d      	cmp	r5, r3
 800b7c2:	bf38      	it	cc
 800b7c4:	461d      	movcc	r5, r3
 800b7c6:	0553      	lsls	r3, r2, #21
 800b7c8:	d531      	bpl.n	800b82e <__ssputs_r+0xa0>
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	f7fe f87c 	bl	80098c8 <_malloc_r>
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	b950      	cbnz	r0, 800b7ea <__ssputs_r+0x5c>
 800b7d4:	230c      	movs	r3, #12
 800b7d6:	f8ca 3000 	str.w	r3, [sl]
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e0:	81a3      	strh	r3, [r4, #12]
 800b7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ea:	6921      	ldr	r1, [r4, #16]
 800b7ec:	464a      	mov	r2, r9
 800b7ee:	f7fd ffe9 	bl	80097c4 <memcpy>
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7fc:	81a3      	strh	r3, [r4, #12]
 800b7fe:	6126      	str	r6, [r4, #16]
 800b800:	6165      	str	r5, [r4, #20]
 800b802:	444e      	add	r6, r9
 800b804:	eba5 0509 	sub.w	r5, r5, r9
 800b808:	6026      	str	r6, [r4, #0]
 800b80a:	60a5      	str	r5, [r4, #8]
 800b80c:	463e      	mov	r6, r7
 800b80e:	42be      	cmp	r6, r7
 800b810:	d900      	bls.n	800b814 <__ssputs_r+0x86>
 800b812:	463e      	mov	r6, r7
 800b814:	6820      	ldr	r0, [r4, #0]
 800b816:	4632      	mov	r2, r6
 800b818:	4641      	mov	r1, r8
 800b81a:	f000 f958 	bl	800bace <memmove>
 800b81e:	68a3      	ldr	r3, [r4, #8]
 800b820:	1b9b      	subs	r3, r3, r6
 800b822:	60a3      	str	r3, [r4, #8]
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	4433      	add	r3, r6
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	2000      	movs	r0, #0
 800b82c:	e7db      	b.n	800b7e6 <__ssputs_r+0x58>
 800b82e:	462a      	mov	r2, r5
 800b830:	f7ff ff7e 	bl	800b730 <_realloc_r>
 800b834:	4606      	mov	r6, r0
 800b836:	2800      	cmp	r0, #0
 800b838:	d1e1      	bne.n	800b7fe <__ssputs_r+0x70>
 800b83a:	6921      	ldr	r1, [r4, #16]
 800b83c:	4650      	mov	r0, sl
 800b83e:	f7fd ffd7 	bl	80097f0 <_free_r>
 800b842:	e7c7      	b.n	800b7d4 <__ssputs_r+0x46>

0800b844 <_svfiprintf_r>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	4698      	mov	r8, r3
 800b84a:	898b      	ldrh	r3, [r1, #12]
 800b84c:	061b      	lsls	r3, r3, #24
 800b84e:	b09d      	sub	sp, #116	; 0x74
 800b850:	4607      	mov	r7, r0
 800b852:	460d      	mov	r5, r1
 800b854:	4614      	mov	r4, r2
 800b856:	d50e      	bpl.n	800b876 <_svfiprintf_r+0x32>
 800b858:	690b      	ldr	r3, [r1, #16]
 800b85a:	b963      	cbnz	r3, 800b876 <_svfiprintf_r+0x32>
 800b85c:	2140      	movs	r1, #64	; 0x40
 800b85e:	f7fe f833 	bl	80098c8 <_malloc_r>
 800b862:	6028      	str	r0, [r5, #0]
 800b864:	6128      	str	r0, [r5, #16]
 800b866:	b920      	cbnz	r0, 800b872 <_svfiprintf_r+0x2e>
 800b868:	230c      	movs	r3, #12
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	e0d1      	b.n	800ba16 <_svfiprintf_r+0x1d2>
 800b872:	2340      	movs	r3, #64	; 0x40
 800b874:	616b      	str	r3, [r5, #20]
 800b876:	2300      	movs	r3, #0
 800b878:	9309      	str	r3, [sp, #36]	; 0x24
 800b87a:	2320      	movs	r3, #32
 800b87c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b880:	f8cd 800c 	str.w	r8, [sp, #12]
 800b884:	2330      	movs	r3, #48	; 0x30
 800b886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba30 <_svfiprintf_r+0x1ec>
 800b88a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b88e:	f04f 0901 	mov.w	r9, #1
 800b892:	4623      	mov	r3, r4
 800b894:	469a      	mov	sl, r3
 800b896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89a:	b10a      	cbz	r2, 800b8a0 <_svfiprintf_r+0x5c>
 800b89c:	2a25      	cmp	r2, #37	; 0x25
 800b89e:	d1f9      	bne.n	800b894 <_svfiprintf_r+0x50>
 800b8a0:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a4:	d00b      	beq.n	800b8be <_svfiprintf_r+0x7a>
 800b8a6:	465b      	mov	r3, fp
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff ff6e 	bl	800b78e <__ssputs_r>
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f000 80aa 	beq.w	800ba0c <_svfiprintf_r+0x1c8>
 800b8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ba:	445a      	add	r2, fp
 800b8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b8be:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80a2 	beq.w	800ba0c <_svfiprintf_r+0x1c8>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d2:	f10a 0a01 	add.w	sl, sl, #1
 800b8d6:	9304      	str	r3, [sp, #16]
 800b8d8:	9307      	str	r3, [sp, #28]
 800b8da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8de:	931a      	str	r3, [sp, #104]	; 0x68
 800b8e0:	4654      	mov	r4, sl
 800b8e2:	2205      	movs	r2, #5
 800b8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e8:	4851      	ldr	r0, [pc, #324]	; (800ba30 <_svfiprintf_r+0x1ec>)
 800b8ea:	f7f4 fc91 	bl	8000210 <memchr>
 800b8ee:	9a04      	ldr	r2, [sp, #16]
 800b8f0:	b9d8      	cbnz	r0, 800b92a <_svfiprintf_r+0xe6>
 800b8f2:	06d0      	lsls	r0, r2, #27
 800b8f4:	bf44      	itt	mi
 800b8f6:	2320      	movmi	r3, #32
 800b8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8fc:	0711      	lsls	r1, r2, #28
 800b8fe:	bf44      	itt	mi
 800b900:	232b      	movmi	r3, #43	; 0x2b
 800b902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b906:	f89a 3000 	ldrb.w	r3, [sl]
 800b90a:	2b2a      	cmp	r3, #42	; 0x2a
 800b90c:	d015      	beq.n	800b93a <_svfiprintf_r+0xf6>
 800b90e:	9a07      	ldr	r2, [sp, #28]
 800b910:	4654      	mov	r4, sl
 800b912:	2000      	movs	r0, #0
 800b914:	f04f 0c0a 	mov.w	ip, #10
 800b918:	4621      	mov	r1, r4
 800b91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b91e:	3b30      	subs	r3, #48	; 0x30
 800b920:	2b09      	cmp	r3, #9
 800b922:	d94e      	bls.n	800b9c2 <_svfiprintf_r+0x17e>
 800b924:	b1b0      	cbz	r0, 800b954 <_svfiprintf_r+0x110>
 800b926:	9207      	str	r2, [sp, #28]
 800b928:	e014      	b.n	800b954 <_svfiprintf_r+0x110>
 800b92a:	eba0 0308 	sub.w	r3, r0, r8
 800b92e:	fa09 f303 	lsl.w	r3, r9, r3
 800b932:	4313      	orrs	r3, r2
 800b934:	9304      	str	r3, [sp, #16]
 800b936:	46a2      	mov	sl, r4
 800b938:	e7d2      	b.n	800b8e0 <_svfiprintf_r+0x9c>
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	1d19      	adds	r1, r3, #4
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	9103      	str	r1, [sp, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	bfbb      	ittet	lt
 800b946:	425b      	neglt	r3, r3
 800b948:	f042 0202 	orrlt.w	r2, r2, #2
 800b94c:	9307      	strge	r3, [sp, #28]
 800b94e:	9307      	strlt	r3, [sp, #28]
 800b950:	bfb8      	it	lt
 800b952:	9204      	strlt	r2, [sp, #16]
 800b954:	7823      	ldrb	r3, [r4, #0]
 800b956:	2b2e      	cmp	r3, #46	; 0x2e
 800b958:	d10c      	bne.n	800b974 <_svfiprintf_r+0x130>
 800b95a:	7863      	ldrb	r3, [r4, #1]
 800b95c:	2b2a      	cmp	r3, #42	; 0x2a
 800b95e:	d135      	bne.n	800b9cc <_svfiprintf_r+0x188>
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	1d1a      	adds	r2, r3, #4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	9203      	str	r2, [sp, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bfb8      	it	lt
 800b96c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b970:	3402      	adds	r4, #2
 800b972:	9305      	str	r3, [sp, #20]
 800b974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba40 <_svfiprintf_r+0x1fc>
 800b978:	7821      	ldrb	r1, [r4, #0]
 800b97a:	2203      	movs	r2, #3
 800b97c:	4650      	mov	r0, sl
 800b97e:	f7f4 fc47 	bl	8000210 <memchr>
 800b982:	b140      	cbz	r0, 800b996 <_svfiprintf_r+0x152>
 800b984:	2340      	movs	r3, #64	; 0x40
 800b986:	eba0 000a 	sub.w	r0, r0, sl
 800b98a:	fa03 f000 	lsl.w	r0, r3, r0
 800b98e:	9b04      	ldr	r3, [sp, #16]
 800b990:	4303      	orrs	r3, r0
 800b992:	3401      	adds	r4, #1
 800b994:	9304      	str	r3, [sp, #16]
 800b996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99a:	4826      	ldr	r0, [pc, #152]	; (800ba34 <_svfiprintf_r+0x1f0>)
 800b99c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9a0:	2206      	movs	r2, #6
 800b9a2:	f7f4 fc35 	bl	8000210 <memchr>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d038      	beq.n	800ba1c <_svfiprintf_r+0x1d8>
 800b9aa:	4b23      	ldr	r3, [pc, #140]	; (800ba38 <_svfiprintf_r+0x1f4>)
 800b9ac:	bb1b      	cbnz	r3, 800b9f6 <_svfiprintf_r+0x1b2>
 800b9ae:	9b03      	ldr	r3, [sp, #12]
 800b9b0:	3307      	adds	r3, #7
 800b9b2:	f023 0307 	bic.w	r3, r3, #7
 800b9b6:	3308      	adds	r3, #8
 800b9b8:	9303      	str	r3, [sp, #12]
 800b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9bc:	4433      	add	r3, r6
 800b9be:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c0:	e767      	b.n	800b892 <_svfiprintf_r+0x4e>
 800b9c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	e7a5      	b.n	800b918 <_svfiprintf_r+0xd4>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	3401      	adds	r4, #1
 800b9d0:	9305      	str	r3, [sp, #20]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	f04f 0c0a 	mov.w	ip, #10
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9de:	3a30      	subs	r2, #48	; 0x30
 800b9e0:	2a09      	cmp	r2, #9
 800b9e2:	d903      	bls.n	800b9ec <_svfiprintf_r+0x1a8>
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d0c5      	beq.n	800b974 <_svfiprintf_r+0x130>
 800b9e8:	9105      	str	r1, [sp, #20]
 800b9ea:	e7c3      	b.n	800b974 <_svfiprintf_r+0x130>
 800b9ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e7f0      	b.n	800b9d8 <_svfiprintf_r+0x194>
 800b9f6:	ab03      	add	r3, sp, #12
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	462a      	mov	r2, r5
 800b9fc:	4b0f      	ldr	r3, [pc, #60]	; (800ba3c <_svfiprintf_r+0x1f8>)
 800b9fe:	a904      	add	r1, sp, #16
 800ba00:	4638      	mov	r0, r7
 800ba02:	f7fe f875 	bl	8009af0 <_printf_float>
 800ba06:	1c42      	adds	r2, r0, #1
 800ba08:	4606      	mov	r6, r0
 800ba0a:	d1d6      	bne.n	800b9ba <_svfiprintf_r+0x176>
 800ba0c:	89ab      	ldrh	r3, [r5, #12]
 800ba0e:	065b      	lsls	r3, r3, #25
 800ba10:	f53f af2c 	bmi.w	800b86c <_svfiprintf_r+0x28>
 800ba14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba16:	b01d      	add	sp, #116	; 0x74
 800ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1c:	ab03      	add	r3, sp, #12
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	462a      	mov	r2, r5
 800ba22:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <_svfiprintf_r+0x1f8>)
 800ba24:	a904      	add	r1, sp, #16
 800ba26:	4638      	mov	r0, r7
 800ba28:	f7fe fb06 	bl	800a038 <_printf_i>
 800ba2c:	e7eb      	b.n	800ba06 <_svfiprintf_r+0x1c2>
 800ba2e:	bf00      	nop
 800ba30:	08028494 	.word	0x08028494
 800ba34:	0802849e 	.word	0x0802849e
 800ba38:	08009af1 	.word	0x08009af1
 800ba3c:	0800b78f 	.word	0x0800b78f
 800ba40:	0802849a 	.word	0x0802849a

0800ba44 <__assert_func>:
 800ba44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba46:	4614      	mov	r4, r2
 800ba48:	461a      	mov	r2, r3
 800ba4a:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <__assert_func+0x2c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4605      	mov	r5, r0
 800ba50:	68d8      	ldr	r0, [r3, #12]
 800ba52:	b14c      	cbz	r4, 800ba68 <__assert_func+0x24>
 800ba54:	4b07      	ldr	r3, [pc, #28]	; (800ba74 <__assert_func+0x30>)
 800ba56:	9100      	str	r1, [sp, #0]
 800ba58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba5c:	4906      	ldr	r1, [pc, #24]	; (800ba78 <__assert_func+0x34>)
 800ba5e:	462b      	mov	r3, r5
 800ba60:	f000 f80e 	bl	800ba80 <fiprintf>
 800ba64:	f000 fa7c 	bl	800bf60 <abort>
 800ba68:	4b04      	ldr	r3, [pc, #16]	; (800ba7c <__assert_func+0x38>)
 800ba6a:	461c      	mov	r4, r3
 800ba6c:	e7f3      	b.n	800ba56 <__assert_func+0x12>
 800ba6e:	bf00      	nop
 800ba70:	20000560 	.word	0x20000560
 800ba74:	080284a5 	.word	0x080284a5
 800ba78:	080284b2 	.word	0x080284b2
 800ba7c:	080284e0 	.word	0x080284e0

0800ba80 <fiprintf>:
 800ba80:	b40e      	push	{r1, r2, r3}
 800ba82:	b503      	push	{r0, r1, lr}
 800ba84:	4601      	mov	r1, r0
 800ba86:	ab03      	add	r3, sp, #12
 800ba88:	4805      	ldr	r0, [pc, #20]	; (800baa0 <fiprintf+0x20>)
 800ba8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8e:	6800      	ldr	r0, [r0, #0]
 800ba90:	9301      	str	r3, [sp, #4]
 800ba92:	f000 f867 	bl	800bb64 <_vfiprintf_r>
 800ba96:	b002      	add	sp, #8
 800ba98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba9c:	b003      	add	sp, #12
 800ba9e:	4770      	bx	lr
 800baa0:	20000560 	.word	0x20000560

0800baa4 <__retarget_lock_init_recursive>:
 800baa4:	4770      	bx	lr

0800baa6 <__retarget_lock_acquire_recursive>:
 800baa6:	4770      	bx	lr

0800baa8 <__retarget_lock_release_recursive>:
 800baa8:	4770      	bx	lr

0800baaa <__ascii_mbtowc>:
 800baaa:	b082      	sub	sp, #8
 800baac:	b901      	cbnz	r1, 800bab0 <__ascii_mbtowc+0x6>
 800baae:	a901      	add	r1, sp, #4
 800bab0:	b142      	cbz	r2, 800bac4 <__ascii_mbtowc+0x1a>
 800bab2:	b14b      	cbz	r3, 800bac8 <__ascii_mbtowc+0x1e>
 800bab4:	7813      	ldrb	r3, [r2, #0]
 800bab6:	600b      	str	r3, [r1, #0]
 800bab8:	7812      	ldrb	r2, [r2, #0]
 800baba:	1e10      	subs	r0, r2, #0
 800babc:	bf18      	it	ne
 800babe:	2001      	movne	r0, #1
 800bac0:	b002      	add	sp, #8
 800bac2:	4770      	bx	lr
 800bac4:	4610      	mov	r0, r2
 800bac6:	e7fb      	b.n	800bac0 <__ascii_mbtowc+0x16>
 800bac8:	f06f 0001 	mvn.w	r0, #1
 800bacc:	e7f8      	b.n	800bac0 <__ascii_mbtowc+0x16>

0800bace <memmove>:
 800bace:	4288      	cmp	r0, r1
 800bad0:	b510      	push	{r4, lr}
 800bad2:	eb01 0402 	add.w	r4, r1, r2
 800bad6:	d902      	bls.n	800bade <memmove+0x10>
 800bad8:	4284      	cmp	r4, r0
 800bada:	4623      	mov	r3, r4
 800badc:	d807      	bhi.n	800baee <memmove+0x20>
 800bade:	1e43      	subs	r3, r0, #1
 800bae0:	42a1      	cmp	r1, r4
 800bae2:	d008      	beq.n	800baf6 <memmove+0x28>
 800bae4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bae8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baec:	e7f8      	b.n	800bae0 <memmove+0x12>
 800baee:	4402      	add	r2, r0
 800baf0:	4601      	mov	r1, r0
 800baf2:	428a      	cmp	r2, r1
 800baf4:	d100      	bne.n	800baf8 <memmove+0x2a>
 800baf6:	bd10      	pop	{r4, pc}
 800baf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bafc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb00:	e7f7      	b.n	800baf2 <memmove+0x24>

0800bb02 <_malloc_usable_size_r>:
 800bb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb06:	1f18      	subs	r0, r3, #4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	bfbc      	itt	lt
 800bb0c:	580b      	ldrlt	r3, [r1, r0]
 800bb0e:	18c0      	addlt	r0, r0, r3
 800bb10:	4770      	bx	lr

0800bb12 <__sfputc_r>:
 800bb12:	6893      	ldr	r3, [r2, #8]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	b410      	push	{r4}
 800bb1a:	6093      	str	r3, [r2, #8]
 800bb1c:	da08      	bge.n	800bb30 <__sfputc_r+0x1e>
 800bb1e:	6994      	ldr	r4, [r2, #24]
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	db01      	blt.n	800bb28 <__sfputc_r+0x16>
 800bb24:	290a      	cmp	r1, #10
 800bb26:	d103      	bne.n	800bb30 <__sfputc_r+0x1e>
 800bb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb2c:	f000 b94a 	b.w	800bdc4 <__swbuf_r>
 800bb30:	6813      	ldr	r3, [r2, #0]
 800bb32:	1c58      	adds	r0, r3, #1
 800bb34:	6010      	str	r0, [r2, #0]
 800bb36:	7019      	strb	r1, [r3, #0]
 800bb38:	4608      	mov	r0, r1
 800bb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <__sfputs_r>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	4606      	mov	r6, r0
 800bb44:	460f      	mov	r7, r1
 800bb46:	4614      	mov	r4, r2
 800bb48:	18d5      	adds	r5, r2, r3
 800bb4a:	42ac      	cmp	r4, r5
 800bb4c:	d101      	bne.n	800bb52 <__sfputs_r+0x12>
 800bb4e:	2000      	movs	r0, #0
 800bb50:	e007      	b.n	800bb62 <__sfputs_r+0x22>
 800bb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb56:	463a      	mov	r2, r7
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7ff ffda 	bl	800bb12 <__sfputc_r>
 800bb5e:	1c43      	adds	r3, r0, #1
 800bb60:	d1f3      	bne.n	800bb4a <__sfputs_r+0xa>
 800bb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb64 <_vfiprintf_r>:
 800bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	460d      	mov	r5, r1
 800bb6a:	b09d      	sub	sp, #116	; 0x74
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	4698      	mov	r8, r3
 800bb70:	4606      	mov	r6, r0
 800bb72:	b118      	cbz	r0, 800bb7c <_vfiprintf_r+0x18>
 800bb74:	6983      	ldr	r3, [r0, #24]
 800bb76:	b90b      	cbnz	r3, 800bb7c <_vfiprintf_r+0x18>
 800bb78:	f000 fb14 	bl	800c1a4 <__sinit>
 800bb7c:	4b89      	ldr	r3, [pc, #548]	; (800bda4 <_vfiprintf_r+0x240>)
 800bb7e:	429d      	cmp	r5, r3
 800bb80:	d11b      	bne.n	800bbba <_vfiprintf_r+0x56>
 800bb82:	6875      	ldr	r5, [r6, #4]
 800bb84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb86:	07d9      	lsls	r1, r3, #31
 800bb88:	d405      	bmi.n	800bb96 <_vfiprintf_r+0x32>
 800bb8a:	89ab      	ldrh	r3, [r5, #12]
 800bb8c:	059a      	lsls	r2, r3, #22
 800bb8e:	d402      	bmi.n	800bb96 <_vfiprintf_r+0x32>
 800bb90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb92:	f7ff ff88 	bl	800baa6 <__retarget_lock_acquire_recursive>
 800bb96:	89ab      	ldrh	r3, [r5, #12]
 800bb98:	071b      	lsls	r3, r3, #28
 800bb9a:	d501      	bpl.n	800bba0 <_vfiprintf_r+0x3c>
 800bb9c:	692b      	ldr	r3, [r5, #16]
 800bb9e:	b9eb      	cbnz	r3, 800bbdc <_vfiprintf_r+0x78>
 800bba0:	4629      	mov	r1, r5
 800bba2:	4630      	mov	r0, r6
 800bba4:	f000 f96e 	bl	800be84 <__swsetup_r>
 800bba8:	b1c0      	cbz	r0, 800bbdc <_vfiprintf_r+0x78>
 800bbaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbac:	07dc      	lsls	r4, r3, #31
 800bbae:	d50e      	bpl.n	800bbce <_vfiprintf_r+0x6a>
 800bbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb4:	b01d      	add	sp, #116	; 0x74
 800bbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbba:	4b7b      	ldr	r3, [pc, #492]	; (800bda8 <_vfiprintf_r+0x244>)
 800bbbc:	429d      	cmp	r5, r3
 800bbbe:	d101      	bne.n	800bbc4 <_vfiprintf_r+0x60>
 800bbc0:	68b5      	ldr	r5, [r6, #8]
 800bbc2:	e7df      	b.n	800bb84 <_vfiprintf_r+0x20>
 800bbc4:	4b79      	ldr	r3, [pc, #484]	; (800bdac <_vfiprintf_r+0x248>)
 800bbc6:	429d      	cmp	r5, r3
 800bbc8:	bf08      	it	eq
 800bbca:	68f5      	ldreq	r5, [r6, #12]
 800bbcc:	e7da      	b.n	800bb84 <_vfiprintf_r+0x20>
 800bbce:	89ab      	ldrh	r3, [r5, #12]
 800bbd0:	0598      	lsls	r0, r3, #22
 800bbd2:	d4ed      	bmi.n	800bbb0 <_vfiprintf_r+0x4c>
 800bbd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbd6:	f7ff ff67 	bl	800baa8 <__retarget_lock_release_recursive>
 800bbda:	e7e9      	b.n	800bbb0 <_vfiprintf_r+0x4c>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe0:	2320      	movs	r3, #32
 800bbe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbea:	2330      	movs	r3, #48	; 0x30
 800bbec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdb0 <_vfiprintf_r+0x24c>
 800bbf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbf4:	f04f 0901 	mov.w	r9, #1
 800bbf8:	4623      	mov	r3, r4
 800bbfa:	469a      	mov	sl, r3
 800bbfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc00:	b10a      	cbz	r2, 800bc06 <_vfiprintf_r+0xa2>
 800bc02:	2a25      	cmp	r2, #37	; 0x25
 800bc04:	d1f9      	bne.n	800bbfa <_vfiprintf_r+0x96>
 800bc06:	ebba 0b04 	subs.w	fp, sl, r4
 800bc0a:	d00b      	beq.n	800bc24 <_vfiprintf_r+0xc0>
 800bc0c:	465b      	mov	r3, fp
 800bc0e:	4622      	mov	r2, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff ff94 	bl	800bb40 <__sfputs_r>
 800bc18:	3001      	adds	r0, #1
 800bc1a:	f000 80aa 	beq.w	800bd72 <_vfiprintf_r+0x20e>
 800bc1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc20:	445a      	add	r2, fp
 800bc22:	9209      	str	r2, [sp, #36]	; 0x24
 800bc24:	f89a 3000 	ldrb.w	r3, [sl]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 80a2 	beq.w	800bd72 <_vfiprintf_r+0x20e>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	f04f 32ff 	mov.w	r2, #4294967295
 800bc34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc38:	f10a 0a01 	add.w	sl, sl, #1
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	9307      	str	r3, [sp, #28]
 800bc40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc44:	931a      	str	r3, [sp, #104]	; 0x68
 800bc46:	4654      	mov	r4, sl
 800bc48:	2205      	movs	r2, #5
 800bc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc4e:	4858      	ldr	r0, [pc, #352]	; (800bdb0 <_vfiprintf_r+0x24c>)
 800bc50:	f7f4 fade 	bl	8000210 <memchr>
 800bc54:	9a04      	ldr	r2, [sp, #16]
 800bc56:	b9d8      	cbnz	r0, 800bc90 <_vfiprintf_r+0x12c>
 800bc58:	06d1      	lsls	r1, r2, #27
 800bc5a:	bf44      	itt	mi
 800bc5c:	2320      	movmi	r3, #32
 800bc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc62:	0713      	lsls	r3, r2, #28
 800bc64:	bf44      	itt	mi
 800bc66:	232b      	movmi	r3, #43	; 0x2b
 800bc68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc70:	2b2a      	cmp	r3, #42	; 0x2a
 800bc72:	d015      	beq.n	800bca0 <_vfiprintf_r+0x13c>
 800bc74:	9a07      	ldr	r2, [sp, #28]
 800bc76:	4654      	mov	r4, sl
 800bc78:	2000      	movs	r0, #0
 800bc7a:	f04f 0c0a 	mov.w	ip, #10
 800bc7e:	4621      	mov	r1, r4
 800bc80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc84:	3b30      	subs	r3, #48	; 0x30
 800bc86:	2b09      	cmp	r3, #9
 800bc88:	d94e      	bls.n	800bd28 <_vfiprintf_r+0x1c4>
 800bc8a:	b1b0      	cbz	r0, 800bcba <_vfiprintf_r+0x156>
 800bc8c:	9207      	str	r2, [sp, #28]
 800bc8e:	e014      	b.n	800bcba <_vfiprintf_r+0x156>
 800bc90:	eba0 0308 	sub.w	r3, r0, r8
 800bc94:	fa09 f303 	lsl.w	r3, r9, r3
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	9304      	str	r3, [sp, #16]
 800bc9c:	46a2      	mov	sl, r4
 800bc9e:	e7d2      	b.n	800bc46 <_vfiprintf_r+0xe2>
 800bca0:	9b03      	ldr	r3, [sp, #12]
 800bca2:	1d19      	adds	r1, r3, #4
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	9103      	str	r1, [sp, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bfbb      	ittet	lt
 800bcac:	425b      	neglt	r3, r3
 800bcae:	f042 0202 	orrlt.w	r2, r2, #2
 800bcb2:	9307      	strge	r3, [sp, #28]
 800bcb4:	9307      	strlt	r3, [sp, #28]
 800bcb6:	bfb8      	it	lt
 800bcb8:	9204      	strlt	r2, [sp, #16]
 800bcba:	7823      	ldrb	r3, [r4, #0]
 800bcbc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcbe:	d10c      	bne.n	800bcda <_vfiprintf_r+0x176>
 800bcc0:	7863      	ldrb	r3, [r4, #1]
 800bcc2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcc4:	d135      	bne.n	800bd32 <_vfiprintf_r+0x1ce>
 800bcc6:	9b03      	ldr	r3, [sp, #12]
 800bcc8:	1d1a      	adds	r2, r3, #4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	9203      	str	r2, [sp, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bfb8      	it	lt
 800bcd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcd6:	3402      	adds	r4, #2
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdc0 <_vfiprintf_r+0x25c>
 800bcde:	7821      	ldrb	r1, [r4, #0]
 800bce0:	2203      	movs	r2, #3
 800bce2:	4650      	mov	r0, sl
 800bce4:	f7f4 fa94 	bl	8000210 <memchr>
 800bce8:	b140      	cbz	r0, 800bcfc <_vfiprintf_r+0x198>
 800bcea:	2340      	movs	r3, #64	; 0x40
 800bcec:	eba0 000a 	sub.w	r0, r0, sl
 800bcf0:	fa03 f000 	lsl.w	r0, r3, r0
 800bcf4:	9b04      	ldr	r3, [sp, #16]
 800bcf6:	4303      	orrs	r3, r0
 800bcf8:	3401      	adds	r4, #1
 800bcfa:	9304      	str	r3, [sp, #16]
 800bcfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd00:	482c      	ldr	r0, [pc, #176]	; (800bdb4 <_vfiprintf_r+0x250>)
 800bd02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd06:	2206      	movs	r2, #6
 800bd08:	f7f4 fa82 	bl	8000210 <memchr>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d03f      	beq.n	800bd90 <_vfiprintf_r+0x22c>
 800bd10:	4b29      	ldr	r3, [pc, #164]	; (800bdb8 <_vfiprintf_r+0x254>)
 800bd12:	bb1b      	cbnz	r3, 800bd5c <_vfiprintf_r+0x1f8>
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	3307      	adds	r3, #7
 800bd18:	f023 0307 	bic.w	r3, r3, #7
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	9303      	str	r3, [sp, #12]
 800bd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd22:	443b      	add	r3, r7
 800bd24:	9309      	str	r3, [sp, #36]	; 0x24
 800bd26:	e767      	b.n	800bbf8 <_vfiprintf_r+0x94>
 800bd28:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	2001      	movs	r0, #1
 800bd30:	e7a5      	b.n	800bc7e <_vfiprintf_r+0x11a>
 800bd32:	2300      	movs	r3, #0
 800bd34:	3401      	adds	r4, #1
 800bd36:	9305      	str	r3, [sp, #20]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f04f 0c0a 	mov.w	ip, #10
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd44:	3a30      	subs	r2, #48	; 0x30
 800bd46:	2a09      	cmp	r2, #9
 800bd48:	d903      	bls.n	800bd52 <_vfiprintf_r+0x1ee>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d0c5      	beq.n	800bcda <_vfiprintf_r+0x176>
 800bd4e:	9105      	str	r1, [sp, #20]
 800bd50:	e7c3      	b.n	800bcda <_vfiprintf_r+0x176>
 800bd52:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd56:	4604      	mov	r4, r0
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e7f0      	b.n	800bd3e <_vfiprintf_r+0x1da>
 800bd5c:	ab03      	add	r3, sp, #12
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	462a      	mov	r2, r5
 800bd62:	4b16      	ldr	r3, [pc, #88]	; (800bdbc <_vfiprintf_r+0x258>)
 800bd64:	a904      	add	r1, sp, #16
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7fd fec2 	bl	8009af0 <_printf_float>
 800bd6c:	4607      	mov	r7, r0
 800bd6e:	1c78      	adds	r0, r7, #1
 800bd70:	d1d6      	bne.n	800bd20 <_vfiprintf_r+0x1bc>
 800bd72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd74:	07d9      	lsls	r1, r3, #31
 800bd76:	d405      	bmi.n	800bd84 <_vfiprintf_r+0x220>
 800bd78:	89ab      	ldrh	r3, [r5, #12]
 800bd7a:	059a      	lsls	r2, r3, #22
 800bd7c:	d402      	bmi.n	800bd84 <_vfiprintf_r+0x220>
 800bd7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd80:	f7ff fe92 	bl	800baa8 <__retarget_lock_release_recursive>
 800bd84:	89ab      	ldrh	r3, [r5, #12]
 800bd86:	065b      	lsls	r3, r3, #25
 800bd88:	f53f af12 	bmi.w	800bbb0 <_vfiprintf_r+0x4c>
 800bd8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd8e:	e711      	b.n	800bbb4 <_vfiprintf_r+0x50>
 800bd90:	ab03      	add	r3, sp, #12
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	462a      	mov	r2, r5
 800bd96:	4b09      	ldr	r3, [pc, #36]	; (800bdbc <_vfiprintf_r+0x258>)
 800bd98:	a904      	add	r1, sp, #16
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f7fe f94c 	bl	800a038 <_printf_i>
 800bda0:	e7e4      	b.n	800bd6c <_vfiprintf_r+0x208>
 800bda2:	bf00      	nop
 800bda4:	0802860c 	.word	0x0802860c
 800bda8:	0802862c 	.word	0x0802862c
 800bdac:	080285ec 	.word	0x080285ec
 800bdb0:	08028494 	.word	0x08028494
 800bdb4:	0802849e 	.word	0x0802849e
 800bdb8:	08009af1 	.word	0x08009af1
 800bdbc:	0800bb41 	.word	0x0800bb41
 800bdc0:	0802849a 	.word	0x0802849a

0800bdc4 <__swbuf_r>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	460e      	mov	r6, r1
 800bdc8:	4614      	mov	r4, r2
 800bdca:	4605      	mov	r5, r0
 800bdcc:	b118      	cbz	r0, 800bdd6 <__swbuf_r+0x12>
 800bdce:	6983      	ldr	r3, [r0, #24]
 800bdd0:	b90b      	cbnz	r3, 800bdd6 <__swbuf_r+0x12>
 800bdd2:	f000 f9e7 	bl	800c1a4 <__sinit>
 800bdd6:	4b21      	ldr	r3, [pc, #132]	; (800be5c <__swbuf_r+0x98>)
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	d12b      	bne.n	800be34 <__swbuf_r+0x70>
 800bddc:	686c      	ldr	r4, [r5, #4]
 800bdde:	69a3      	ldr	r3, [r4, #24]
 800bde0:	60a3      	str	r3, [r4, #8]
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	071a      	lsls	r2, r3, #28
 800bde6:	d52f      	bpl.n	800be48 <__swbuf_r+0x84>
 800bde8:	6923      	ldr	r3, [r4, #16]
 800bdea:	b36b      	cbz	r3, 800be48 <__swbuf_r+0x84>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	6820      	ldr	r0, [r4, #0]
 800bdf0:	1ac0      	subs	r0, r0, r3
 800bdf2:	6963      	ldr	r3, [r4, #20]
 800bdf4:	b2f6      	uxtb	r6, r6
 800bdf6:	4283      	cmp	r3, r0
 800bdf8:	4637      	mov	r7, r6
 800bdfa:	dc04      	bgt.n	800be06 <__swbuf_r+0x42>
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	4628      	mov	r0, r5
 800be00:	f000 f93c 	bl	800c07c <_fflush_r>
 800be04:	bb30      	cbnz	r0, 800be54 <__swbuf_r+0x90>
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	3b01      	subs	r3, #1
 800be0a:	60a3      	str	r3, [r4, #8]
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	6022      	str	r2, [r4, #0]
 800be12:	701e      	strb	r6, [r3, #0]
 800be14:	6963      	ldr	r3, [r4, #20]
 800be16:	3001      	adds	r0, #1
 800be18:	4283      	cmp	r3, r0
 800be1a:	d004      	beq.n	800be26 <__swbuf_r+0x62>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	07db      	lsls	r3, r3, #31
 800be20:	d506      	bpl.n	800be30 <__swbuf_r+0x6c>
 800be22:	2e0a      	cmp	r6, #10
 800be24:	d104      	bne.n	800be30 <__swbuf_r+0x6c>
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 f927 	bl	800c07c <_fflush_r>
 800be2e:	b988      	cbnz	r0, 800be54 <__swbuf_r+0x90>
 800be30:	4638      	mov	r0, r7
 800be32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be34:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <__swbuf_r+0x9c>)
 800be36:	429c      	cmp	r4, r3
 800be38:	d101      	bne.n	800be3e <__swbuf_r+0x7a>
 800be3a:	68ac      	ldr	r4, [r5, #8]
 800be3c:	e7cf      	b.n	800bdde <__swbuf_r+0x1a>
 800be3e:	4b09      	ldr	r3, [pc, #36]	; (800be64 <__swbuf_r+0xa0>)
 800be40:	429c      	cmp	r4, r3
 800be42:	bf08      	it	eq
 800be44:	68ec      	ldreq	r4, [r5, #12]
 800be46:	e7ca      	b.n	800bdde <__swbuf_r+0x1a>
 800be48:	4621      	mov	r1, r4
 800be4a:	4628      	mov	r0, r5
 800be4c:	f000 f81a 	bl	800be84 <__swsetup_r>
 800be50:	2800      	cmp	r0, #0
 800be52:	d0cb      	beq.n	800bdec <__swbuf_r+0x28>
 800be54:	f04f 37ff 	mov.w	r7, #4294967295
 800be58:	e7ea      	b.n	800be30 <__swbuf_r+0x6c>
 800be5a:	bf00      	nop
 800be5c:	0802860c 	.word	0x0802860c
 800be60:	0802862c 	.word	0x0802862c
 800be64:	080285ec 	.word	0x080285ec

0800be68 <__ascii_wctomb>:
 800be68:	b149      	cbz	r1, 800be7e <__ascii_wctomb+0x16>
 800be6a:	2aff      	cmp	r2, #255	; 0xff
 800be6c:	bf85      	ittet	hi
 800be6e:	238a      	movhi	r3, #138	; 0x8a
 800be70:	6003      	strhi	r3, [r0, #0]
 800be72:	700a      	strbls	r2, [r1, #0]
 800be74:	f04f 30ff 	movhi.w	r0, #4294967295
 800be78:	bf98      	it	ls
 800be7a:	2001      	movls	r0, #1
 800be7c:	4770      	bx	lr
 800be7e:	4608      	mov	r0, r1
 800be80:	4770      	bx	lr
	...

0800be84 <__swsetup_r>:
 800be84:	4b32      	ldr	r3, [pc, #200]	; (800bf50 <__swsetup_r+0xcc>)
 800be86:	b570      	push	{r4, r5, r6, lr}
 800be88:	681d      	ldr	r5, [r3, #0]
 800be8a:	4606      	mov	r6, r0
 800be8c:	460c      	mov	r4, r1
 800be8e:	b125      	cbz	r5, 800be9a <__swsetup_r+0x16>
 800be90:	69ab      	ldr	r3, [r5, #24]
 800be92:	b913      	cbnz	r3, 800be9a <__swsetup_r+0x16>
 800be94:	4628      	mov	r0, r5
 800be96:	f000 f985 	bl	800c1a4 <__sinit>
 800be9a:	4b2e      	ldr	r3, [pc, #184]	; (800bf54 <__swsetup_r+0xd0>)
 800be9c:	429c      	cmp	r4, r3
 800be9e:	d10f      	bne.n	800bec0 <__swsetup_r+0x3c>
 800bea0:	686c      	ldr	r4, [r5, #4]
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bea8:	0719      	lsls	r1, r3, #28
 800beaa:	d42c      	bmi.n	800bf06 <__swsetup_r+0x82>
 800beac:	06dd      	lsls	r5, r3, #27
 800beae:	d411      	bmi.n	800bed4 <__swsetup_r+0x50>
 800beb0:	2309      	movs	r3, #9
 800beb2:	6033      	str	r3, [r6, #0]
 800beb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800beb8:	81a3      	strh	r3, [r4, #12]
 800beba:	f04f 30ff 	mov.w	r0, #4294967295
 800bebe:	e03e      	b.n	800bf3e <__swsetup_r+0xba>
 800bec0:	4b25      	ldr	r3, [pc, #148]	; (800bf58 <__swsetup_r+0xd4>)
 800bec2:	429c      	cmp	r4, r3
 800bec4:	d101      	bne.n	800beca <__swsetup_r+0x46>
 800bec6:	68ac      	ldr	r4, [r5, #8]
 800bec8:	e7eb      	b.n	800bea2 <__swsetup_r+0x1e>
 800beca:	4b24      	ldr	r3, [pc, #144]	; (800bf5c <__swsetup_r+0xd8>)
 800becc:	429c      	cmp	r4, r3
 800bece:	bf08      	it	eq
 800bed0:	68ec      	ldreq	r4, [r5, #12]
 800bed2:	e7e6      	b.n	800bea2 <__swsetup_r+0x1e>
 800bed4:	0758      	lsls	r0, r3, #29
 800bed6:	d512      	bpl.n	800befe <__swsetup_r+0x7a>
 800bed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beda:	b141      	cbz	r1, 800beee <__swsetup_r+0x6a>
 800bedc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bee0:	4299      	cmp	r1, r3
 800bee2:	d002      	beq.n	800beea <__swsetup_r+0x66>
 800bee4:	4630      	mov	r0, r6
 800bee6:	f7fd fc83 	bl	80097f0 <_free_r>
 800beea:	2300      	movs	r3, #0
 800beec:	6363      	str	r3, [r4, #52]	; 0x34
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bef4:	81a3      	strh	r3, [r4, #12]
 800bef6:	2300      	movs	r3, #0
 800bef8:	6063      	str	r3, [r4, #4]
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	89a3      	ldrh	r3, [r4, #12]
 800bf00:	f043 0308 	orr.w	r3, r3, #8
 800bf04:	81a3      	strh	r3, [r4, #12]
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	b94b      	cbnz	r3, 800bf1e <__swsetup_r+0x9a>
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf14:	d003      	beq.n	800bf1e <__swsetup_r+0x9a>
 800bf16:	4621      	mov	r1, r4
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f000 fa05 	bl	800c328 <__smakebuf_r>
 800bf1e:	89a0      	ldrh	r0, [r4, #12]
 800bf20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf24:	f010 0301 	ands.w	r3, r0, #1
 800bf28:	d00a      	beq.n	800bf40 <__swsetup_r+0xbc>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60a3      	str	r3, [r4, #8]
 800bf2e:	6963      	ldr	r3, [r4, #20]
 800bf30:	425b      	negs	r3, r3
 800bf32:	61a3      	str	r3, [r4, #24]
 800bf34:	6923      	ldr	r3, [r4, #16]
 800bf36:	b943      	cbnz	r3, 800bf4a <__swsetup_r+0xc6>
 800bf38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf3c:	d1ba      	bne.n	800beb4 <__swsetup_r+0x30>
 800bf3e:	bd70      	pop	{r4, r5, r6, pc}
 800bf40:	0781      	lsls	r1, r0, #30
 800bf42:	bf58      	it	pl
 800bf44:	6963      	ldrpl	r3, [r4, #20]
 800bf46:	60a3      	str	r3, [r4, #8]
 800bf48:	e7f4      	b.n	800bf34 <__swsetup_r+0xb0>
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	e7f7      	b.n	800bf3e <__swsetup_r+0xba>
 800bf4e:	bf00      	nop
 800bf50:	20000560 	.word	0x20000560
 800bf54:	0802860c 	.word	0x0802860c
 800bf58:	0802862c 	.word	0x0802862c
 800bf5c:	080285ec 	.word	0x080285ec

0800bf60 <abort>:
 800bf60:	b508      	push	{r3, lr}
 800bf62:	2006      	movs	r0, #6
 800bf64:	f000 fa48 	bl	800c3f8 <raise>
 800bf68:	2001      	movs	r0, #1
 800bf6a:	f7f6 f93d 	bl	80021e8 <_exit>
	...

0800bf70 <__sflush_r>:
 800bf70:	898a      	ldrh	r2, [r1, #12]
 800bf72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf76:	4605      	mov	r5, r0
 800bf78:	0710      	lsls	r0, r2, #28
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	d458      	bmi.n	800c030 <__sflush_r+0xc0>
 800bf7e:	684b      	ldr	r3, [r1, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	dc05      	bgt.n	800bf90 <__sflush_r+0x20>
 800bf84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	dc02      	bgt.n	800bf90 <__sflush_r+0x20>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf92:	2e00      	cmp	r6, #0
 800bf94:	d0f9      	beq.n	800bf8a <__sflush_r+0x1a>
 800bf96:	2300      	movs	r3, #0
 800bf98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf9c:	682f      	ldr	r7, [r5, #0]
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	d032      	beq.n	800c008 <__sflush_r+0x98>
 800bfa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	075a      	lsls	r2, r3, #29
 800bfa8:	d505      	bpl.n	800bfb6 <__sflush_r+0x46>
 800bfaa:	6863      	ldr	r3, [r4, #4]
 800bfac:	1ac0      	subs	r0, r0, r3
 800bfae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfb0:	b10b      	cbz	r3, 800bfb6 <__sflush_r+0x46>
 800bfb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfb4:	1ac0      	subs	r0, r0, r3
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	4602      	mov	r2, r0
 800bfba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfbc:	6a21      	ldr	r1, [r4, #32]
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	47b0      	blx	r6
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	d106      	bne.n	800bfd6 <__sflush_r+0x66>
 800bfc8:	6829      	ldr	r1, [r5, #0]
 800bfca:	291d      	cmp	r1, #29
 800bfcc:	d82c      	bhi.n	800c028 <__sflush_r+0xb8>
 800bfce:	4a2a      	ldr	r2, [pc, #168]	; (800c078 <__sflush_r+0x108>)
 800bfd0:	40ca      	lsrs	r2, r1
 800bfd2:	07d6      	lsls	r6, r2, #31
 800bfd4:	d528      	bpl.n	800c028 <__sflush_r+0xb8>
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	6062      	str	r2, [r4, #4]
 800bfda:	04d9      	lsls	r1, r3, #19
 800bfdc:	6922      	ldr	r2, [r4, #16]
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	d504      	bpl.n	800bfec <__sflush_r+0x7c>
 800bfe2:	1c42      	adds	r2, r0, #1
 800bfe4:	d101      	bne.n	800bfea <__sflush_r+0x7a>
 800bfe6:	682b      	ldr	r3, [r5, #0]
 800bfe8:	b903      	cbnz	r3, 800bfec <__sflush_r+0x7c>
 800bfea:	6560      	str	r0, [r4, #84]	; 0x54
 800bfec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfee:	602f      	str	r7, [r5, #0]
 800bff0:	2900      	cmp	r1, #0
 800bff2:	d0ca      	beq.n	800bf8a <__sflush_r+0x1a>
 800bff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bff8:	4299      	cmp	r1, r3
 800bffa:	d002      	beq.n	800c002 <__sflush_r+0x92>
 800bffc:	4628      	mov	r0, r5
 800bffe:	f7fd fbf7 	bl	80097f0 <_free_r>
 800c002:	2000      	movs	r0, #0
 800c004:	6360      	str	r0, [r4, #52]	; 0x34
 800c006:	e7c1      	b.n	800bf8c <__sflush_r+0x1c>
 800c008:	6a21      	ldr	r1, [r4, #32]
 800c00a:	2301      	movs	r3, #1
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b0      	blx	r6
 800c010:	1c41      	adds	r1, r0, #1
 800c012:	d1c7      	bne.n	800bfa4 <__sflush_r+0x34>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0c4      	beq.n	800bfa4 <__sflush_r+0x34>
 800c01a:	2b1d      	cmp	r3, #29
 800c01c:	d001      	beq.n	800c022 <__sflush_r+0xb2>
 800c01e:	2b16      	cmp	r3, #22
 800c020:	d101      	bne.n	800c026 <__sflush_r+0xb6>
 800c022:	602f      	str	r7, [r5, #0]
 800c024:	e7b1      	b.n	800bf8a <__sflush_r+0x1a>
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c02c:	81a3      	strh	r3, [r4, #12]
 800c02e:	e7ad      	b.n	800bf8c <__sflush_r+0x1c>
 800c030:	690f      	ldr	r7, [r1, #16]
 800c032:	2f00      	cmp	r7, #0
 800c034:	d0a9      	beq.n	800bf8a <__sflush_r+0x1a>
 800c036:	0793      	lsls	r3, r2, #30
 800c038:	680e      	ldr	r6, [r1, #0]
 800c03a:	bf08      	it	eq
 800c03c:	694b      	ldreq	r3, [r1, #20]
 800c03e:	600f      	str	r7, [r1, #0]
 800c040:	bf18      	it	ne
 800c042:	2300      	movne	r3, #0
 800c044:	eba6 0807 	sub.w	r8, r6, r7
 800c048:	608b      	str	r3, [r1, #8]
 800c04a:	f1b8 0f00 	cmp.w	r8, #0
 800c04e:	dd9c      	ble.n	800bf8a <__sflush_r+0x1a>
 800c050:	6a21      	ldr	r1, [r4, #32]
 800c052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c054:	4643      	mov	r3, r8
 800c056:	463a      	mov	r2, r7
 800c058:	4628      	mov	r0, r5
 800c05a:	47b0      	blx	r6
 800c05c:	2800      	cmp	r0, #0
 800c05e:	dc06      	bgt.n	800c06e <__sflush_r+0xfe>
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c066:	81a3      	strh	r3, [r4, #12]
 800c068:	f04f 30ff 	mov.w	r0, #4294967295
 800c06c:	e78e      	b.n	800bf8c <__sflush_r+0x1c>
 800c06e:	4407      	add	r7, r0
 800c070:	eba8 0800 	sub.w	r8, r8, r0
 800c074:	e7e9      	b.n	800c04a <__sflush_r+0xda>
 800c076:	bf00      	nop
 800c078:	20400001 	.word	0x20400001

0800c07c <_fflush_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	690b      	ldr	r3, [r1, #16]
 800c080:	4605      	mov	r5, r0
 800c082:	460c      	mov	r4, r1
 800c084:	b913      	cbnz	r3, 800c08c <_fflush_r+0x10>
 800c086:	2500      	movs	r5, #0
 800c088:	4628      	mov	r0, r5
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	b118      	cbz	r0, 800c096 <_fflush_r+0x1a>
 800c08e:	6983      	ldr	r3, [r0, #24]
 800c090:	b90b      	cbnz	r3, 800c096 <_fflush_r+0x1a>
 800c092:	f000 f887 	bl	800c1a4 <__sinit>
 800c096:	4b14      	ldr	r3, [pc, #80]	; (800c0e8 <_fflush_r+0x6c>)
 800c098:	429c      	cmp	r4, r3
 800c09a:	d11b      	bne.n	800c0d4 <_fflush_r+0x58>
 800c09c:	686c      	ldr	r4, [r5, #4]
 800c09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d0ef      	beq.n	800c086 <_fflush_r+0xa>
 800c0a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0a8:	07d0      	lsls	r0, r2, #31
 800c0aa:	d404      	bmi.n	800c0b6 <_fflush_r+0x3a>
 800c0ac:	0599      	lsls	r1, r3, #22
 800c0ae:	d402      	bmi.n	800c0b6 <_fflush_r+0x3a>
 800c0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0b2:	f7ff fcf8 	bl	800baa6 <__retarget_lock_acquire_recursive>
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	f7ff ff59 	bl	800bf70 <__sflush_r>
 800c0be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0c0:	07da      	lsls	r2, r3, #31
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	d4e0      	bmi.n	800c088 <_fflush_r+0xc>
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	059b      	lsls	r3, r3, #22
 800c0ca:	d4dd      	bmi.n	800c088 <_fflush_r+0xc>
 800c0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ce:	f7ff fceb 	bl	800baa8 <__retarget_lock_release_recursive>
 800c0d2:	e7d9      	b.n	800c088 <_fflush_r+0xc>
 800c0d4:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <_fflush_r+0x70>)
 800c0d6:	429c      	cmp	r4, r3
 800c0d8:	d101      	bne.n	800c0de <_fflush_r+0x62>
 800c0da:	68ac      	ldr	r4, [r5, #8]
 800c0dc:	e7df      	b.n	800c09e <_fflush_r+0x22>
 800c0de:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <_fflush_r+0x74>)
 800c0e0:	429c      	cmp	r4, r3
 800c0e2:	bf08      	it	eq
 800c0e4:	68ec      	ldreq	r4, [r5, #12]
 800c0e6:	e7da      	b.n	800c09e <_fflush_r+0x22>
 800c0e8:	0802860c 	.word	0x0802860c
 800c0ec:	0802862c 	.word	0x0802862c
 800c0f0:	080285ec 	.word	0x080285ec

0800c0f4 <std>:
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	b510      	push	{r4, lr}
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	e9c0 3300 	strd	r3, r3, [r0]
 800c0fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c102:	6083      	str	r3, [r0, #8]
 800c104:	8181      	strh	r1, [r0, #12]
 800c106:	6643      	str	r3, [r0, #100]	; 0x64
 800c108:	81c2      	strh	r2, [r0, #14]
 800c10a:	6183      	str	r3, [r0, #24]
 800c10c:	4619      	mov	r1, r3
 800c10e:	2208      	movs	r2, #8
 800c110:	305c      	adds	r0, #92	; 0x5c
 800c112:	f7fd fb65 	bl	80097e0 <memset>
 800c116:	4b05      	ldr	r3, [pc, #20]	; (800c12c <std+0x38>)
 800c118:	6263      	str	r3, [r4, #36]	; 0x24
 800c11a:	4b05      	ldr	r3, [pc, #20]	; (800c130 <std+0x3c>)
 800c11c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c11e:	4b05      	ldr	r3, [pc, #20]	; (800c134 <std+0x40>)
 800c120:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c122:	4b05      	ldr	r3, [pc, #20]	; (800c138 <std+0x44>)
 800c124:	6224      	str	r4, [r4, #32]
 800c126:	6323      	str	r3, [r4, #48]	; 0x30
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	bf00      	nop
 800c12c:	0800c431 	.word	0x0800c431
 800c130:	0800c453 	.word	0x0800c453
 800c134:	0800c48b 	.word	0x0800c48b
 800c138:	0800c4af 	.word	0x0800c4af

0800c13c <_cleanup_r>:
 800c13c:	4901      	ldr	r1, [pc, #4]	; (800c144 <_cleanup_r+0x8>)
 800c13e:	f000 b8af 	b.w	800c2a0 <_fwalk_reent>
 800c142:	bf00      	nop
 800c144:	0800c07d 	.word	0x0800c07d

0800c148 <__sfmoreglue>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	2268      	movs	r2, #104	; 0x68
 800c14c:	1e4d      	subs	r5, r1, #1
 800c14e:	4355      	muls	r5, r2
 800c150:	460e      	mov	r6, r1
 800c152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c156:	f7fd fbb7 	bl	80098c8 <_malloc_r>
 800c15a:	4604      	mov	r4, r0
 800c15c:	b140      	cbz	r0, 800c170 <__sfmoreglue+0x28>
 800c15e:	2100      	movs	r1, #0
 800c160:	e9c0 1600 	strd	r1, r6, [r0]
 800c164:	300c      	adds	r0, #12
 800c166:	60a0      	str	r0, [r4, #8]
 800c168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c16c:	f7fd fb38 	bl	80097e0 <memset>
 800c170:	4620      	mov	r0, r4
 800c172:	bd70      	pop	{r4, r5, r6, pc}

0800c174 <__sfp_lock_acquire>:
 800c174:	4801      	ldr	r0, [pc, #4]	; (800c17c <__sfp_lock_acquire+0x8>)
 800c176:	f7ff bc96 	b.w	800baa6 <__retarget_lock_acquire_recursive>
 800c17a:	bf00      	nop
 800c17c:	2001b679 	.word	0x2001b679

0800c180 <__sfp_lock_release>:
 800c180:	4801      	ldr	r0, [pc, #4]	; (800c188 <__sfp_lock_release+0x8>)
 800c182:	f7ff bc91 	b.w	800baa8 <__retarget_lock_release_recursive>
 800c186:	bf00      	nop
 800c188:	2001b679 	.word	0x2001b679

0800c18c <__sinit_lock_acquire>:
 800c18c:	4801      	ldr	r0, [pc, #4]	; (800c194 <__sinit_lock_acquire+0x8>)
 800c18e:	f7ff bc8a 	b.w	800baa6 <__retarget_lock_acquire_recursive>
 800c192:	bf00      	nop
 800c194:	2001b67a 	.word	0x2001b67a

0800c198 <__sinit_lock_release>:
 800c198:	4801      	ldr	r0, [pc, #4]	; (800c1a0 <__sinit_lock_release+0x8>)
 800c19a:	f7ff bc85 	b.w	800baa8 <__retarget_lock_release_recursive>
 800c19e:	bf00      	nop
 800c1a0:	2001b67a 	.word	0x2001b67a

0800c1a4 <__sinit>:
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	f7ff fff0 	bl	800c18c <__sinit_lock_acquire>
 800c1ac:	69a3      	ldr	r3, [r4, #24]
 800c1ae:	b11b      	cbz	r3, 800c1b8 <__sinit+0x14>
 800c1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1b4:	f7ff bff0 	b.w	800c198 <__sinit_lock_release>
 800c1b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1bc:	6523      	str	r3, [r4, #80]	; 0x50
 800c1be:	4b13      	ldr	r3, [pc, #76]	; (800c20c <__sinit+0x68>)
 800c1c0:	4a13      	ldr	r2, [pc, #76]	; (800c210 <__sinit+0x6c>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1c6:	42a3      	cmp	r3, r4
 800c1c8:	bf04      	itt	eq
 800c1ca:	2301      	moveq	r3, #1
 800c1cc:	61a3      	streq	r3, [r4, #24]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 f820 	bl	800c214 <__sfp>
 800c1d4:	6060      	str	r0, [r4, #4]
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f000 f81c 	bl	800c214 <__sfp>
 800c1dc:	60a0      	str	r0, [r4, #8]
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f000 f818 	bl	800c214 <__sfp>
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	60e0      	str	r0, [r4, #12]
 800c1e8:	2104      	movs	r1, #4
 800c1ea:	6860      	ldr	r0, [r4, #4]
 800c1ec:	f7ff ff82 	bl	800c0f4 <std>
 800c1f0:	68a0      	ldr	r0, [r4, #8]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	2109      	movs	r1, #9
 800c1f6:	f7ff ff7d 	bl	800c0f4 <std>
 800c1fa:	68e0      	ldr	r0, [r4, #12]
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	2112      	movs	r1, #18
 800c200:	f7ff ff78 	bl	800c0f4 <std>
 800c204:	2301      	movs	r3, #1
 800c206:	61a3      	str	r3, [r4, #24]
 800c208:	e7d2      	b.n	800c1b0 <__sinit+0xc>
 800c20a:	bf00      	nop
 800c20c:	08028270 	.word	0x08028270
 800c210:	0800c13d 	.word	0x0800c13d

0800c214 <__sfp>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	4607      	mov	r7, r0
 800c218:	f7ff ffac 	bl	800c174 <__sfp_lock_acquire>
 800c21c:	4b1e      	ldr	r3, [pc, #120]	; (800c298 <__sfp+0x84>)
 800c21e:	681e      	ldr	r6, [r3, #0]
 800c220:	69b3      	ldr	r3, [r6, #24]
 800c222:	b913      	cbnz	r3, 800c22a <__sfp+0x16>
 800c224:	4630      	mov	r0, r6
 800c226:	f7ff ffbd 	bl	800c1a4 <__sinit>
 800c22a:	3648      	adds	r6, #72	; 0x48
 800c22c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c230:	3b01      	subs	r3, #1
 800c232:	d503      	bpl.n	800c23c <__sfp+0x28>
 800c234:	6833      	ldr	r3, [r6, #0]
 800c236:	b30b      	cbz	r3, 800c27c <__sfp+0x68>
 800c238:	6836      	ldr	r6, [r6, #0]
 800c23a:	e7f7      	b.n	800c22c <__sfp+0x18>
 800c23c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c240:	b9d5      	cbnz	r5, 800c278 <__sfp+0x64>
 800c242:	4b16      	ldr	r3, [pc, #88]	; (800c29c <__sfp+0x88>)
 800c244:	60e3      	str	r3, [r4, #12]
 800c246:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c24a:	6665      	str	r5, [r4, #100]	; 0x64
 800c24c:	f7ff fc2a 	bl	800baa4 <__retarget_lock_init_recursive>
 800c250:	f7ff ff96 	bl	800c180 <__sfp_lock_release>
 800c254:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c258:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c25c:	6025      	str	r5, [r4, #0]
 800c25e:	61a5      	str	r5, [r4, #24]
 800c260:	2208      	movs	r2, #8
 800c262:	4629      	mov	r1, r5
 800c264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c268:	f7fd faba 	bl	80097e0 <memset>
 800c26c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c274:	4620      	mov	r0, r4
 800c276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c278:	3468      	adds	r4, #104	; 0x68
 800c27a:	e7d9      	b.n	800c230 <__sfp+0x1c>
 800c27c:	2104      	movs	r1, #4
 800c27e:	4638      	mov	r0, r7
 800c280:	f7ff ff62 	bl	800c148 <__sfmoreglue>
 800c284:	4604      	mov	r4, r0
 800c286:	6030      	str	r0, [r6, #0]
 800c288:	2800      	cmp	r0, #0
 800c28a:	d1d5      	bne.n	800c238 <__sfp+0x24>
 800c28c:	f7ff ff78 	bl	800c180 <__sfp_lock_release>
 800c290:	230c      	movs	r3, #12
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	e7ee      	b.n	800c274 <__sfp+0x60>
 800c296:	bf00      	nop
 800c298:	08028270 	.word	0x08028270
 800c29c:	ffff0001 	.word	0xffff0001

0800c2a0 <_fwalk_reent>:
 800c2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	4688      	mov	r8, r1
 800c2a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2ac:	2700      	movs	r7, #0
 800c2ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2b2:	f1b9 0901 	subs.w	r9, r9, #1
 800c2b6:	d505      	bpl.n	800c2c4 <_fwalk_reent+0x24>
 800c2b8:	6824      	ldr	r4, [r4, #0]
 800c2ba:	2c00      	cmp	r4, #0
 800c2bc:	d1f7      	bne.n	800c2ae <_fwalk_reent+0xe>
 800c2be:	4638      	mov	r0, r7
 800c2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c4:	89ab      	ldrh	r3, [r5, #12]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d907      	bls.n	800c2da <_fwalk_reent+0x3a>
 800c2ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	d003      	beq.n	800c2da <_fwalk_reent+0x3a>
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	4630      	mov	r0, r6
 800c2d6:	47c0      	blx	r8
 800c2d8:	4307      	orrs	r7, r0
 800c2da:	3568      	adds	r5, #104	; 0x68
 800c2dc:	e7e9      	b.n	800c2b2 <_fwalk_reent+0x12>

0800c2de <__swhatbuf_r>:
 800c2de:	b570      	push	{r4, r5, r6, lr}
 800c2e0:	460e      	mov	r6, r1
 800c2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e6:	2900      	cmp	r1, #0
 800c2e8:	b096      	sub	sp, #88	; 0x58
 800c2ea:	4614      	mov	r4, r2
 800c2ec:	461d      	mov	r5, r3
 800c2ee:	da08      	bge.n	800c302 <__swhatbuf_r+0x24>
 800c2f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	602a      	str	r2, [r5, #0]
 800c2f8:	061a      	lsls	r2, r3, #24
 800c2fa:	d410      	bmi.n	800c31e <__swhatbuf_r+0x40>
 800c2fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c300:	e00e      	b.n	800c320 <__swhatbuf_r+0x42>
 800c302:	466a      	mov	r2, sp
 800c304:	f000 f8fa 	bl	800c4fc <_fstat_r>
 800c308:	2800      	cmp	r0, #0
 800c30a:	dbf1      	blt.n	800c2f0 <__swhatbuf_r+0x12>
 800c30c:	9a01      	ldr	r2, [sp, #4]
 800c30e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c316:	425a      	negs	r2, r3
 800c318:	415a      	adcs	r2, r3
 800c31a:	602a      	str	r2, [r5, #0]
 800c31c:	e7ee      	b.n	800c2fc <__swhatbuf_r+0x1e>
 800c31e:	2340      	movs	r3, #64	; 0x40
 800c320:	2000      	movs	r0, #0
 800c322:	6023      	str	r3, [r4, #0]
 800c324:	b016      	add	sp, #88	; 0x58
 800c326:	bd70      	pop	{r4, r5, r6, pc}

0800c328 <__smakebuf_r>:
 800c328:	898b      	ldrh	r3, [r1, #12]
 800c32a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c32c:	079d      	lsls	r5, r3, #30
 800c32e:	4606      	mov	r6, r0
 800c330:	460c      	mov	r4, r1
 800c332:	d507      	bpl.n	800c344 <__smakebuf_r+0x1c>
 800c334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	6123      	str	r3, [r4, #16]
 800c33c:	2301      	movs	r3, #1
 800c33e:	6163      	str	r3, [r4, #20]
 800c340:	b002      	add	sp, #8
 800c342:	bd70      	pop	{r4, r5, r6, pc}
 800c344:	ab01      	add	r3, sp, #4
 800c346:	466a      	mov	r2, sp
 800c348:	f7ff ffc9 	bl	800c2de <__swhatbuf_r>
 800c34c:	9900      	ldr	r1, [sp, #0]
 800c34e:	4605      	mov	r5, r0
 800c350:	4630      	mov	r0, r6
 800c352:	f7fd fab9 	bl	80098c8 <_malloc_r>
 800c356:	b948      	cbnz	r0, 800c36c <__smakebuf_r+0x44>
 800c358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c35c:	059a      	lsls	r2, r3, #22
 800c35e:	d4ef      	bmi.n	800c340 <__smakebuf_r+0x18>
 800c360:	f023 0303 	bic.w	r3, r3, #3
 800c364:	f043 0302 	orr.w	r3, r3, #2
 800c368:	81a3      	strh	r3, [r4, #12]
 800c36a:	e7e3      	b.n	800c334 <__smakebuf_r+0xc>
 800c36c:	4b0d      	ldr	r3, [pc, #52]	; (800c3a4 <__smakebuf_r+0x7c>)
 800c36e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c370:	89a3      	ldrh	r3, [r4, #12]
 800c372:	6020      	str	r0, [r4, #0]
 800c374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c378:	81a3      	strh	r3, [r4, #12]
 800c37a:	9b00      	ldr	r3, [sp, #0]
 800c37c:	6163      	str	r3, [r4, #20]
 800c37e:	9b01      	ldr	r3, [sp, #4]
 800c380:	6120      	str	r0, [r4, #16]
 800c382:	b15b      	cbz	r3, 800c39c <__smakebuf_r+0x74>
 800c384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c388:	4630      	mov	r0, r6
 800c38a:	f000 f8c9 	bl	800c520 <_isatty_r>
 800c38e:	b128      	cbz	r0, 800c39c <__smakebuf_r+0x74>
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	f023 0303 	bic.w	r3, r3, #3
 800c396:	f043 0301 	orr.w	r3, r3, #1
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	89a0      	ldrh	r0, [r4, #12]
 800c39e:	4305      	orrs	r5, r0
 800c3a0:	81a5      	strh	r5, [r4, #12]
 800c3a2:	e7cd      	b.n	800c340 <__smakebuf_r+0x18>
 800c3a4:	0800c13d 	.word	0x0800c13d

0800c3a8 <_raise_r>:
 800c3a8:	291f      	cmp	r1, #31
 800c3aa:	b538      	push	{r3, r4, r5, lr}
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	d904      	bls.n	800c3bc <_raise_r+0x14>
 800c3b2:	2316      	movs	r3, #22
 800c3b4:	6003      	str	r3, [r0, #0]
 800c3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3be:	b112      	cbz	r2, 800c3c6 <_raise_r+0x1e>
 800c3c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3c4:	b94b      	cbnz	r3, 800c3da <_raise_r+0x32>
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f000 f830 	bl	800c42c <_getpid_r>
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3d6:	f000 b817 	b.w	800c408 <_kill_r>
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d00a      	beq.n	800c3f4 <_raise_r+0x4c>
 800c3de:	1c59      	adds	r1, r3, #1
 800c3e0:	d103      	bne.n	800c3ea <_raise_r+0x42>
 800c3e2:	2316      	movs	r3, #22
 800c3e4:	6003      	str	r3, [r0, #0]
 800c3e6:	2001      	movs	r0, #1
 800c3e8:	e7e7      	b.n	800c3ba <_raise_r+0x12>
 800c3ea:	2400      	movs	r4, #0
 800c3ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	4798      	blx	r3
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	e7e0      	b.n	800c3ba <_raise_r+0x12>

0800c3f8 <raise>:
 800c3f8:	4b02      	ldr	r3, [pc, #8]	; (800c404 <raise+0xc>)
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	f7ff bfd3 	b.w	800c3a8 <_raise_r>
 800c402:	bf00      	nop
 800c404:	20000560 	.word	0x20000560

0800c408 <_kill_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	; (800c428 <_kill_r+0x20>)
 800c40c:	2300      	movs	r3, #0
 800c40e:	4604      	mov	r4, r0
 800c410:	4608      	mov	r0, r1
 800c412:	4611      	mov	r1, r2
 800c414:	602b      	str	r3, [r5, #0]
 800c416:	f7f5 fed7 	bl	80021c8 <_kill>
 800c41a:	1c43      	adds	r3, r0, #1
 800c41c:	d102      	bne.n	800c424 <_kill_r+0x1c>
 800c41e:	682b      	ldr	r3, [r5, #0]
 800c420:	b103      	cbz	r3, 800c424 <_kill_r+0x1c>
 800c422:	6023      	str	r3, [r4, #0]
 800c424:	bd38      	pop	{r3, r4, r5, pc}
 800c426:	bf00      	nop
 800c428:	2001b674 	.word	0x2001b674

0800c42c <_getpid_r>:
 800c42c:	f7f5 bec4 	b.w	80021b8 <_getpid>

0800c430 <__sread>:
 800c430:	b510      	push	{r4, lr}
 800c432:	460c      	mov	r4, r1
 800c434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c438:	f000 f894 	bl	800c564 <_read_r>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	bfab      	itete	ge
 800c440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c442:	89a3      	ldrhlt	r3, [r4, #12]
 800c444:	181b      	addge	r3, r3, r0
 800c446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c44a:	bfac      	ite	ge
 800c44c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c44e:	81a3      	strhlt	r3, [r4, #12]
 800c450:	bd10      	pop	{r4, pc}

0800c452 <__swrite>:
 800c452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c456:	461f      	mov	r7, r3
 800c458:	898b      	ldrh	r3, [r1, #12]
 800c45a:	05db      	lsls	r3, r3, #23
 800c45c:	4605      	mov	r5, r0
 800c45e:	460c      	mov	r4, r1
 800c460:	4616      	mov	r6, r2
 800c462:	d505      	bpl.n	800c470 <__swrite+0x1e>
 800c464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c468:	2302      	movs	r3, #2
 800c46a:	2200      	movs	r2, #0
 800c46c:	f000 f868 	bl	800c540 <_lseek_r>
 800c470:	89a3      	ldrh	r3, [r4, #12]
 800c472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c47a:	81a3      	strh	r3, [r4, #12]
 800c47c:	4632      	mov	r2, r6
 800c47e:	463b      	mov	r3, r7
 800c480:	4628      	mov	r0, r5
 800c482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c486:	f000 b817 	b.w	800c4b8 <_write_r>

0800c48a <__sseek>:
 800c48a:	b510      	push	{r4, lr}
 800c48c:	460c      	mov	r4, r1
 800c48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c492:	f000 f855 	bl	800c540 <_lseek_r>
 800c496:	1c43      	adds	r3, r0, #1
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	bf15      	itete	ne
 800c49c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c49e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4a6:	81a3      	strheq	r3, [r4, #12]
 800c4a8:	bf18      	it	ne
 800c4aa:	81a3      	strhne	r3, [r4, #12]
 800c4ac:	bd10      	pop	{r4, pc}

0800c4ae <__sclose>:
 800c4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b2:	f000 b813 	b.w	800c4dc <_close_r>
	...

0800c4b8 <_write_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4d07      	ldr	r5, [pc, #28]	; (800c4d8 <_write_r+0x20>)
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4608      	mov	r0, r1
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f5 feb5 	bl	8002236 <_write>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_write_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_write_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	2001b674 	.word	0x2001b674

0800c4dc <_close_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4d06      	ldr	r5, [pc, #24]	; (800c4f8 <_close_r+0x1c>)
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	4608      	mov	r0, r1
 800c4e6:	602b      	str	r3, [r5, #0]
 800c4e8:	f7f5 fec1 	bl	800226e <_close>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	d102      	bne.n	800c4f6 <_close_r+0x1a>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	b103      	cbz	r3, 800c4f6 <_close_r+0x1a>
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	bd38      	pop	{r3, r4, r5, pc}
 800c4f8:	2001b674 	.word	0x2001b674

0800c4fc <_fstat_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d07      	ldr	r5, [pc, #28]	; (800c51c <_fstat_r+0x20>)
 800c500:	2300      	movs	r3, #0
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	4611      	mov	r1, r2
 800c508:	602b      	str	r3, [r5, #0]
 800c50a:	f7f5 febc 	bl	8002286 <_fstat>
 800c50e:	1c43      	adds	r3, r0, #1
 800c510:	d102      	bne.n	800c518 <_fstat_r+0x1c>
 800c512:	682b      	ldr	r3, [r5, #0]
 800c514:	b103      	cbz	r3, 800c518 <_fstat_r+0x1c>
 800c516:	6023      	str	r3, [r4, #0]
 800c518:	bd38      	pop	{r3, r4, r5, pc}
 800c51a:	bf00      	nop
 800c51c:	2001b674 	.word	0x2001b674

0800c520 <_isatty_r>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	4d06      	ldr	r5, [pc, #24]	; (800c53c <_isatty_r+0x1c>)
 800c524:	2300      	movs	r3, #0
 800c526:	4604      	mov	r4, r0
 800c528:	4608      	mov	r0, r1
 800c52a:	602b      	str	r3, [r5, #0]
 800c52c:	f7f5 febb 	bl	80022a6 <_isatty>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	d102      	bne.n	800c53a <_isatty_r+0x1a>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	b103      	cbz	r3, 800c53a <_isatty_r+0x1a>
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	bd38      	pop	{r3, r4, r5, pc}
 800c53c:	2001b674 	.word	0x2001b674

0800c540 <_lseek_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4d07      	ldr	r5, [pc, #28]	; (800c560 <_lseek_r+0x20>)
 800c544:	4604      	mov	r4, r0
 800c546:	4608      	mov	r0, r1
 800c548:	4611      	mov	r1, r2
 800c54a:	2200      	movs	r2, #0
 800c54c:	602a      	str	r2, [r5, #0]
 800c54e:	461a      	mov	r2, r3
 800c550:	f7f5 feb4 	bl	80022bc <_lseek>
 800c554:	1c43      	adds	r3, r0, #1
 800c556:	d102      	bne.n	800c55e <_lseek_r+0x1e>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	b103      	cbz	r3, 800c55e <_lseek_r+0x1e>
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	2001b674 	.word	0x2001b674

0800c564 <_read_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4d07      	ldr	r5, [pc, #28]	; (800c584 <_read_r+0x20>)
 800c568:	4604      	mov	r4, r0
 800c56a:	4608      	mov	r0, r1
 800c56c:	4611      	mov	r1, r2
 800c56e:	2200      	movs	r2, #0
 800c570:	602a      	str	r2, [r5, #0]
 800c572:	461a      	mov	r2, r3
 800c574:	f7f5 fe42 	bl	80021fc <_read>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_read_r+0x1e>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_read_r+0x1e>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	2001b674 	.word	0x2001b674

0800c588 <expf>:
 800c588:	b508      	push	{r3, lr}
 800c58a:	ed2d 8b02 	vpush	{d8}
 800c58e:	eef0 8a40 	vmov.f32	s17, s0
 800c592:	f000 f84d 	bl	800c630 <__ieee754_expf>
 800c596:	eeb0 8a40 	vmov.f32	s16, s0
 800c59a:	eeb0 0a68 	vmov.f32	s0, s17
 800c59e:	f000 f93b 	bl	800c818 <finitef>
 800c5a2:	b160      	cbz	r0, 800c5be <expf+0x36>
 800c5a4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c5e4 <expf+0x5c>
 800c5a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b0:	dd0a      	ble.n	800c5c8 <expf+0x40>
 800c5b2:	f7fd f8d5 	bl	8009760 <__errno>
 800c5b6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800c5e8 <expf+0x60>
 800c5ba:	2322      	movs	r3, #34	; 0x22
 800c5bc:	6003      	str	r3, [r0, #0]
 800c5be:	eeb0 0a48 	vmov.f32	s0, s16
 800c5c2:	ecbd 8b02 	vpop	{d8}
 800c5c6:	bd08      	pop	{r3, pc}
 800c5c8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c5ec <expf+0x64>
 800c5cc:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d4:	d5f3      	bpl.n	800c5be <expf+0x36>
 800c5d6:	f7fd f8c3 	bl	8009760 <__errno>
 800c5da:	2322      	movs	r3, #34	; 0x22
 800c5dc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800c5f0 <expf+0x68>
 800c5e0:	6003      	str	r3, [r0, #0]
 800c5e2:	e7ec      	b.n	800c5be <expf+0x36>
 800c5e4:	42b17180 	.word	0x42b17180
 800c5e8:	7f800000 	.word	0x7f800000
 800c5ec:	c2cff1b5 	.word	0xc2cff1b5
 800c5f0:	00000000 	.word	0x00000000

0800c5f4 <sqrtf>:
 800c5f4:	b508      	push	{r3, lr}
 800c5f6:	ed2d 8b02 	vpush	{d8}
 800c5fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c5fe:	f000 f8e5 	bl	800c7cc <__ieee754_sqrtf>
 800c602:	eeb4 8a48 	vcmp.f32	s16, s16
 800c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60a:	d60c      	bvs.n	800c626 <sqrtf+0x32>
 800c60c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c62c <sqrtf+0x38>
 800c610:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c618:	d505      	bpl.n	800c626 <sqrtf+0x32>
 800c61a:	f7fd f8a1 	bl	8009760 <__errno>
 800c61e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c622:	2321      	movs	r3, #33	; 0x21
 800c624:	6003      	str	r3, [r0, #0]
 800c626:	ecbd 8b02 	vpop	{d8}
 800c62a:	bd08      	pop	{r3, pc}
 800c62c:	00000000 	.word	0x00000000

0800c630 <__ieee754_expf>:
 800c630:	ee10 2a10 	vmov	r2, s0
 800c634:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c638:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c63c:	d902      	bls.n	800c644 <__ieee754_expf+0x14>
 800c63e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c642:	4770      	bx	lr
 800c644:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800c648:	d106      	bne.n	800c658 <__ieee754_expf+0x28>
 800c64a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800c784 <__ieee754_expf+0x154>
 800c64e:	2b00      	cmp	r3, #0
 800c650:	bf18      	it	ne
 800c652:	eeb0 0a67 	vmovne.f32	s0, s15
 800c656:	4770      	bx	lr
 800c658:	484b      	ldr	r0, [pc, #300]	; (800c788 <__ieee754_expf+0x158>)
 800c65a:	4282      	cmp	r2, r0
 800c65c:	dd02      	ble.n	800c664 <__ieee754_expf+0x34>
 800c65e:	2000      	movs	r0, #0
 800c660:	f000 b8d4 	b.w	800c80c <__math_oflowf>
 800c664:	2a00      	cmp	r2, #0
 800c666:	da05      	bge.n	800c674 <__ieee754_expf+0x44>
 800c668:	4a48      	ldr	r2, [pc, #288]	; (800c78c <__ieee754_expf+0x15c>)
 800c66a:	4291      	cmp	r1, r2
 800c66c:	d902      	bls.n	800c674 <__ieee754_expf+0x44>
 800c66e:	2000      	movs	r0, #0
 800c670:	f000 b8c6 	b.w	800c800 <__math_uflowf>
 800c674:	4a46      	ldr	r2, [pc, #280]	; (800c790 <__ieee754_expf+0x160>)
 800c676:	4291      	cmp	r1, r2
 800c678:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c67c:	d952      	bls.n	800c724 <__ieee754_expf+0xf4>
 800c67e:	4a45      	ldr	r2, [pc, #276]	; (800c794 <__ieee754_expf+0x164>)
 800c680:	4291      	cmp	r1, r2
 800c682:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c686:	d834      	bhi.n	800c6f2 <__ieee754_expf+0xc2>
 800c688:	4943      	ldr	r1, [pc, #268]	; (800c798 <__ieee754_expf+0x168>)
 800c68a:	4411      	add	r1, r2
 800c68c:	ed91 7a00 	vldr	s14, [r1]
 800c690:	4942      	ldr	r1, [pc, #264]	; (800c79c <__ieee754_expf+0x16c>)
 800c692:	440a      	add	r2, r1
 800c694:	edd2 7a00 	vldr	s15, [r2]
 800c698:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c69c:	f1c3 0201 	rsb	r2, r3, #1
 800c6a0:	1ad2      	subs	r2, r2, r3
 800c6a2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c6a6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c6aa:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800c7a0 <__ieee754_expf+0x170>
 800c6ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7a4 <__ieee754_expf+0x174>
 800c6b2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c6b6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800c7a8 <__ieee754_expf+0x178>
 800c6ba:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c6be:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c7ac <__ieee754_expf+0x17c>
 800c6c2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c6c6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800c7b0 <__ieee754_expf+0x180>
 800c6ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c6ce:	eef0 6a40 	vmov.f32	s13, s0
 800c6d2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c6d6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800c6da:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c6de:	bb92      	cbnz	r2, 800c746 <__ieee754_expf+0x116>
 800c6e0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c6e4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c6e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c6ec:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c6f0:	4770      	bx	lr
 800c6f2:	4b30      	ldr	r3, [pc, #192]	; (800c7b4 <__ieee754_expf+0x184>)
 800c6f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c7b8 <__ieee754_expf+0x188>
 800c6f8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c7bc <__ieee754_expf+0x18c>
 800c6fc:	4413      	add	r3, r2
 800c6fe:	edd3 7a00 	vldr	s15, [r3]
 800c702:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c706:	eeb0 7a40 	vmov.f32	s14, s0
 800c70a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c70e:	ee17 2a90 	vmov	r2, s15
 800c712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c716:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c71a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c7c0 <__ieee754_expf+0x190>
 800c71e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c722:	e7be      	b.n	800c6a2 <__ieee754_expf+0x72>
 800c724:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800c728:	d20b      	bcs.n	800c742 <__ieee754_expf+0x112>
 800c72a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c7c4 <__ieee754_expf+0x194>
 800c72e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c732:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73a:	dd02      	ble.n	800c742 <__ieee754_expf+0x112>
 800c73c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c740:	4770      	bx	lr
 800c742:	2200      	movs	r2, #0
 800c744:	e7af      	b.n	800c6a6 <__ieee754_expf+0x76>
 800c746:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c74a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800c74e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800c752:	bfb8      	it	lt
 800c754:	3264      	addlt	r2, #100	; 0x64
 800c756:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c75a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c75e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800c762:	ee17 3a90 	vmov	r3, s15
 800c766:	bfab      	itete	ge
 800c768:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c76c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c770:	ee00 3a10 	vmovge	s0, r3
 800c774:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800c7c8 <__ieee754_expf+0x198>
 800c778:	bfbc      	itt	lt
 800c77a:	ee00 3a10 	vmovlt	s0, r3
 800c77e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c782:	4770      	bx	lr
 800c784:	00000000 	.word	0x00000000
 800c788:	42b17217 	.word	0x42b17217
 800c78c:	42cff1b5 	.word	0x42cff1b5
 800c790:	3eb17218 	.word	0x3eb17218
 800c794:	3f851591 	.word	0x3f851591
 800c798:	08028654 	.word	0x08028654
 800c79c:	0802865c 	.word	0x0802865c
 800c7a0:	3331bb4c 	.word	0x3331bb4c
 800c7a4:	b5ddea0e 	.word	0xb5ddea0e
 800c7a8:	388ab355 	.word	0x388ab355
 800c7ac:	bb360b61 	.word	0xbb360b61
 800c7b0:	3e2aaaab 	.word	0x3e2aaaab
 800c7b4:	0802864c 	.word	0x0802864c
 800c7b8:	3fb8aa3b 	.word	0x3fb8aa3b
 800c7bc:	3f317180 	.word	0x3f317180
 800c7c0:	3717f7d1 	.word	0x3717f7d1
 800c7c4:	7149f2ca 	.word	0x7149f2ca
 800c7c8:	0d800000 	.word	0x0d800000

0800c7cc <__ieee754_sqrtf>:
 800c7cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c7d0:	4770      	bx	lr

0800c7d2 <with_errnof>:
 800c7d2:	b513      	push	{r0, r1, r4, lr}
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c7da:	f7fc ffc1 	bl	8009760 <__errno>
 800c7de:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c7e2:	6004      	str	r4, [r0, #0]
 800c7e4:	b002      	add	sp, #8
 800c7e6:	bd10      	pop	{r4, pc}

0800c7e8 <xflowf>:
 800c7e8:	b130      	cbz	r0, 800c7f8 <xflowf+0x10>
 800c7ea:	eef1 7a40 	vneg.f32	s15, s0
 800c7ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c7f2:	2022      	movs	r0, #34	; 0x22
 800c7f4:	f7ff bfed 	b.w	800c7d2 <with_errnof>
 800c7f8:	eef0 7a40 	vmov.f32	s15, s0
 800c7fc:	e7f7      	b.n	800c7ee <xflowf+0x6>
	...

0800c800 <__math_uflowf>:
 800c800:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c808 <__math_uflowf+0x8>
 800c804:	f7ff bff0 	b.w	800c7e8 <xflowf>
 800c808:	10000000 	.word	0x10000000

0800c80c <__math_oflowf>:
 800c80c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c814 <__math_oflowf+0x8>
 800c810:	f7ff bfea 	b.w	800c7e8 <xflowf>
 800c814:	70000000 	.word	0x70000000

0800c818 <finitef>:
 800c818:	b082      	sub	sp, #8
 800c81a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c81e:	9801      	ldr	r0, [sp, #4]
 800c820:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c824:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c828:	bfac      	ite	ge
 800c82a:	2000      	movge	r0, #0
 800c82c:	2001      	movlt	r0, #1
 800c82e:	b002      	add	sp, #8
 800c830:	4770      	bx	lr
	...

0800c834 <_init>:
 800c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c836:	bf00      	nop
 800c838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83a:	bc08      	pop	{r3}
 800c83c:	469e      	mov	lr, r3
 800c83e:	4770      	bx	lr

0800c840 <_fini>:
 800c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c842:	bf00      	nop
 800c844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c846:	bc08      	pop	{r3}
 800c848:	469e      	mov	lr, r3
 800c84a:	4770      	bx	lr
